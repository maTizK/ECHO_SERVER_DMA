
obj/STM32F4_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c94  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000008  08005e1c  08005e1c  0000de1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08005e24  08005e24  0000de24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000448  20000000  08005e28  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00013d30  20000448  08006270  00010448  2**2
                  ALLOC
  6 ._user_heap_stack 00000400  20014178  08019fa0  00010448  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00010448  2**0
                  CONTENTS, READONLY
  8 .debug_info   000093b7  00000000  00000000  00010476  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001d9e  00000000  00000000  0001982d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003dca  00000000  00000000  0001b5cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b00  00000000  00000000  0001f395  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009d0  00000000  00000000  0001fe95  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005017  00000000  00000000  00020865  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003b10  00000000  00000000  0002587c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000070  00000000  00000000  0002938c  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002664  00000000  00000000  000293fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000448 	.word	0x20000448
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005e04 	.word	0x08005e04

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <frame_dummy+0x1c>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4806      	ldr	r0, [pc, #24]	; (80001cc <frame_dummy+0x20>)
 80001b4:	4906      	ldr	r1, [pc, #24]	; (80001d0 <frame_dummy+0x24>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4806      	ldr	r0, [pc, #24]	; (80001d4 <frame_dummy+0x28>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b113      	cbz	r3, 80001c6 <frame_dummy+0x1a>
 80001c0:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <frame_dummy+0x2c>)
 80001c2:	b103      	cbz	r3, 80001c6 <frame_dummy+0x1a>
 80001c4:	4798      	blx	r3
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005e04 	.word	0x08005e04
 80001d0:	2000044c 	.word	0x2000044c
 80001d4:	20000448 	.word	0x20000448
 80001d8:	00000000 	.word	0x00000000

080001dc <memcpy>:
 80001dc:	4684      	mov	ip, r0
 80001de:	ea41 0300 	orr.w	r3, r1, r0
 80001e2:	f013 0303 	ands.w	r3, r3, #3
 80001e6:	d16d      	bne.n	80002c4 <memcpy+0xe8>
 80001e8:	3a40      	subs	r2, #64	; 0x40
 80001ea:	d341      	bcc.n	8000270 <memcpy+0x94>
 80001ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f0:	f840 3b04 	str.w	r3, [r0], #4
 80001f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f8:	f840 3b04 	str.w	r3, [r0], #4
 80001fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000200:	f840 3b04 	str.w	r3, [r0], #4
 8000204:	f851 3b04 	ldr.w	r3, [r1], #4
 8000208:	f840 3b04 	str.w	r3, [r0], #4
 800020c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000210:	f840 3b04 	str.w	r3, [r0], #4
 8000214:	f851 3b04 	ldr.w	r3, [r1], #4
 8000218:	f840 3b04 	str.w	r3, [r0], #4
 800021c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000220:	f840 3b04 	str.w	r3, [r0], #4
 8000224:	f851 3b04 	ldr.w	r3, [r1], #4
 8000228:	f840 3b04 	str.w	r3, [r0], #4
 800022c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000230:	f840 3b04 	str.w	r3, [r0], #4
 8000234:	f851 3b04 	ldr.w	r3, [r1], #4
 8000238:	f840 3b04 	str.w	r3, [r0], #4
 800023c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000240:	f840 3b04 	str.w	r3, [r0], #4
 8000244:	f851 3b04 	ldr.w	r3, [r1], #4
 8000248:	f840 3b04 	str.w	r3, [r0], #4
 800024c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000250:	f840 3b04 	str.w	r3, [r0], #4
 8000254:	f851 3b04 	ldr.w	r3, [r1], #4
 8000258:	f840 3b04 	str.w	r3, [r0], #4
 800025c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000260:	f840 3b04 	str.w	r3, [r0], #4
 8000264:	f851 3b04 	ldr.w	r3, [r1], #4
 8000268:	f840 3b04 	str.w	r3, [r0], #4
 800026c:	3a40      	subs	r2, #64	; 0x40
 800026e:	d2bd      	bcs.n	80001ec <memcpy+0x10>
 8000270:	3230      	adds	r2, #48	; 0x30
 8000272:	d311      	bcc.n	8000298 <memcpy+0xbc>
 8000274:	f851 3b04 	ldr.w	r3, [r1], #4
 8000278:	f840 3b04 	str.w	r3, [r0], #4
 800027c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000280:	f840 3b04 	str.w	r3, [r0], #4
 8000284:	f851 3b04 	ldr.w	r3, [r1], #4
 8000288:	f840 3b04 	str.w	r3, [r0], #4
 800028c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000290:	f840 3b04 	str.w	r3, [r0], #4
 8000294:	3a10      	subs	r2, #16
 8000296:	d2ed      	bcs.n	8000274 <memcpy+0x98>
 8000298:	320c      	adds	r2, #12
 800029a:	d305      	bcc.n	80002a8 <memcpy+0xcc>
 800029c:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a0:	f840 3b04 	str.w	r3, [r0], #4
 80002a4:	3a04      	subs	r2, #4
 80002a6:	d2f9      	bcs.n	800029c <memcpy+0xc0>
 80002a8:	3204      	adds	r2, #4
 80002aa:	d008      	beq.n	80002be <memcpy+0xe2>
 80002ac:	07d2      	lsls	r2, r2, #31
 80002ae:	bf1c      	itt	ne
 80002b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002b4:	f800 3b01 	strbne.w	r3, [r0], #1
 80002b8:	d301      	bcc.n	80002be <memcpy+0xe2>
 80002ba:	880b      	ldrh	r3, [r1, #0]
 80002bc:	8003      	strh	r3, [r0, #0]
 80002be:	4660      	mov	r0, ip
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	2a08      	cmp	r2, #8
 80002c6:	d313      	bcc.n	80002f0 <memcpy+0x114>
 80002c8:	078b      	lsls	r3, r1, #30
 80002ca:	d08d      	beq.n	80001e8 <memcpy+0xc>
 80002cc:	f010 0303 	ands.w	r3, r0, #3
 80002d0:	d08a      	beq.n	80001e8 <memcpy+0xc>
 80002d2:	f1c3 0304 	rsb	r3, r3, #4
 80002d6:	1ad2      	subs	r2, r2, r3
 80002d8:	07db      	lsls	r3, r3, #31
 80002da:	bf1c      	itt	ne
 80002dc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002e0:	f800 3b01 	strbne.w	r3, [r0], #1
 80002e4:	d380      	bcc.n	80001e8 <memcpy+0xc>
 80002e6:	f831 3b02 	ldrh.w	r3, [r1], #2
 80002ea:	f820 3b02 	strh.w	r3, [r0], #2
 80002ee:	e77b      	b.n	80001e8 <memcpy+0xc>
 80002f0:	3a04      	subs	r2, #4
 80002f2:	d3d9      	bcc.n	80002a8 <memcpy+0xcc>
 80002f4:	3a01      	subs	r2, #1
 80002f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002fa:	f800 3b01 	strb.w	r3, [r0], #1
 80002fe:	d2f9      	bcs.n	80002f4 <memcpy+0x118>
 8000300:	780b      	ldrb	r3, [r1, #0]
 8000302:	7003      	strb	r3, [r0, #0]
 8000304:	784b      	ldrb	r3, [r1, #1]
 8000306:	7043      	strb	r3, [r0, #1]
 8000308:	788b      	ldrb	r3, [r1, #2]
 800030a:	7083      	strb	r3, [r0, #2]
 800030c:	4660      	mov	r0, ip
 800030e:	4770      	bx	lr

08000310 <init_SPI1>:
/* ----------------------------------------------------------*/
/* --    this function initializes the SPI1 peripheral     --*/


/* initialize SPI1 */
void init_SPI1(void){
 8000310:	b580      	push	{r7, lr}
 8000312:	b09a      	sub	sp, #104	; 0x68
 8000314:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStruct;

	
	
	// enable clock for used IO pins
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000316:	2001      	movs	r0, #1
 8000318:	2101      	movs	r1, #1
 800031a:	f004 ff6b 	bl	80051f4 <RCC_AHB1PeriphClockCmd>
	 * PA5 = SCK
	 * PA6 = MISO
	 * PA7 = MOSI
	 */
	// MOSI PA7
	GPIO_InitStruct.GPIO_Pin = SPIx_MOSI_PIN ;
 800031e:	2380      	movs	r3, #128	; 0x80
 8000320:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000322:	2302      	movs	r3, #2
 8000324:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000328:	2300      	movs	r3, #0
 800032a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800032e:	2303      	movs	r3, #3
 8000330:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000334:	2302      	movs	r3, #2
 8000336:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 800033a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800033e:	48a9      	ldr	r0, [pc, #676]	; (80005e4 <init_SPI1+0x2d4>)
 8000340:	4619      	mov	r1, r3
 8000342:	f004 fd19 	bl	8004d78 <GPIO_Init>
	// SCK PA5
	GPIO_InitStruct.GPIO_Pin = SPIx_SCK_PIN;
 8000346:	2320      	movs	r3, #32
 8000348:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 800034a:	2302      	movs	r3, #2
 800034c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000350:	2300      	movs	r3, #0
 8000352:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000356:	2303      	movs	r3, #3
 8000358:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 800035c:	2302      	movs	r3, #2
 800035e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000362:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000366:	489f      	ldr	r0, [pc, #636]	; (80005e4 <init_SPI1+0x2d4>)
 8000368:	4619      	mov	r1, r3
 800036a:	f004 fd05 	bl	8004d78 <GPIO_Init>
	// MISO PA6
	GPIO_InitStruct.GPIO_Pin = SPIx_MISO_PIN;
 800036e:	2340      	movs	r3, #64	; 0x40
 8000370:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000372:	2302      	movs	r3, #2
 8000374:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8000378:	2301      	movs	r3, #1
 800037a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800037e:	2303      	movs	r3, #3
 8000380:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000384:	2300      	movs	r3, #0
 8000386:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 800038a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800038e:	4895      	ldr	r0, [pc, #596]	; (80005e4 <init_SPI1+0x2d4>)
 8000390:	4619      	mov	r1, r3
 8000392:	f004 fcf1 	bl	8004d78 <GPIO_Init>
	
	// connect SPI1 pins to SPI alternate function
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource5, GPIO_AF_SPI1);
 8000396:	4893      	ldr	r0, [pc, #588]	; (80005e4 <init_SPI1+0x2d4>)
 8000398:	2105      	movs	r1, #5
 800039a:	2205      	movs	r2, #5
 800039c:	f004 fe02 	bl	8004fa4 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_SPI1);
 80003a0:	4890      	ldr	r0, [pc, #576]	; (80005e4 <init_SPI1+0x2d4>)
 80003a2:	2106      	movs	r1, #6
 80003a4:	2205      	movs	r2, #5
 80003a6:	f004 fdfd 	bl	8004fa4 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_SPI1);
 80003aa:	488e      	ldr	r0, [pc, #568]	; (80005e4 <init_SPI1+0x2d4>)
 80003ac:	2107      	movs	r1, #7
 80003ae:	2205      	movs	r2, #5
 80003b0:	f004 fdf8 	bl	8004fa4 <GPIO_PinAFConfig>

	
	/* Configure the chip select pin
	   in this case we will use PA4 */
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_4;
 80003b4:	2310      	movs	r3, #16
 80003b6:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 80003b8:	2301      	movs	r3, #1
 80003ba:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80003be:	2300      	movs	r3, #0
 80003c0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80003c4:	2303      	movs	r3, #3
 80003c6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 80003ca:	2301      	movs	r3, #1
 80003cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80003d4:	4883      	ldr	r0, [pc, #524]	; (80005e4 <init_SPI1+0x2d4>)
 80003d6:	4619      	mov	r1, r3
 80003d8:	f004 fcce 	bl	8004d78 <GPIO_Init>
	
	GPIOA->BSRRL |= GPIO_Pin_4; // set PA4 high
 80003dc:	4b81      	ldr	r3, [pc, #516]	; (80005e4 <init_SPI1+0x2d4>)
 80003de:	4a81      	ldr	r2, [pc, #516]	; (80005e4 <init_SPI1+0x2d4>)
 80003e0:	8b12      	ldrh	r2, [r2, #24]
 80003e2:	b292      	uxth	r2, r2
 80003e4:	f042 0210 	orr.w	r2, r2, #16
 80003e8:	b292      	uxth	r2, r2
 80003ea:	831a      	strh	r2, [r3, #24]

	/* Configure the hard reset pin
	   in this case we will use PA3 */
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3;
 80003ec:	2308      	movs	r3, #8
 80003ee:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 80003f0:	2301      	movs	r3, #1
 80003f2:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80003f6:	2300      	movs	r3, #0
 80003f8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80003fc:	2303      	movs	r3, #3
 80003fe:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000402:	2301      	movs	r3, #1
 8000404:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000408:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800040c:	4875      	ldr	r0, [pc, #468]	; (80005e4 <init_SPI1+0x2d4>)
 800040e:	4619      	mov	r1, r3
 8000410:	f004 fcb2 	bl	8004d78 <GPIO_Init>
	
	GPIOA->BSRRL |= GPIO_Pin_3; // set PA3 high
 8000414:	4b73      	ldr	r3, [pc, #460]	; (80005e4 <init_SPI1+0x2d4>)
 8000416:	4a73      	ldr	r2, [pc, #460]	; (80005e4 <init_SPI1+0x2d4>)
 8000418:	8b12      	ldrh	r2, [r2, #24]
 800041a:	b292      	uxth	r2, r2
 800041c:	f042 0208 	orr.w	r2, r2, #8
 8000420:	b292      	uxth	r2, r2
 8000422:	831a      	strh	r2, [r3, #24]

	// enable peripheral clock
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8000424:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000428:	2101      	movs	r1, #1
 800042a:	f004 ff1b 	bl	8005264 <RCC_APB2PeriphClockCmd>
	
	/* configure SPI1 in Mode 0 
	 * CPOL = 0 --> clock is low when idle
	 * CPHA = 0 --> data is sampled at the first edge
	 */
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex; // set to full duplex mode, seperate MOSI and MISO lines
 800042e:	2300      	movs	r3, #0
 8000430:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;     // transmit in master mode, NSS pin has to be always high
 8000434:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000438:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b; // one packet of data is 8 bits wide
 800043c:	2300      	movs	r3, #0
 800043e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;        // clock is low when idle
 8000442:	2300      	movs	r3, #0
 8000444:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;      // data sampled at second edge
 8000448:	2300      	movs	r3, #0
 800044a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft | SPI_NSSInternalSoft_Set; // set the NSS management to internal and pull internal NSS high
 800044e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000452:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4; // SPI frequency is APB2 frequency / 4
 8000456:	2308      	movs	r3, #8
 8000458:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;// data is transmitted MSB first
 800045c:	2300      	movs	r3, #0
 800045e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	SPI_Init(SPI1, &SPI_InitStruct); 
 8000462:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000466:	4860      	ldr	r0, [pc, #384]	; (80005e8 <init_SPI1+0x2d8>)
 8000468:	4619      	mov	r1, r3
 800046a:	f004 ff33 	bl	80052d4 <SPI_Init>
	
	SPI_Cmd(SPI1, ENABLE);			
 800046e:	485e      	ldr	r0, [pc, #376]	; (80005e8 <init_SPI1+0x2d8>)
 8000470:	2101      	movs	r1, #1
 8000472:	f005 f821 	bl	80054b8 <SPI_Cmd>
	

	/* setup DMA */

	// enable clock 
	RCC_AHB1PeriphClockCmd (SPIx_DMA_CLK, ENABLE); 
 8000476:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800047a:	2101      	movs	r1, #1
 800047c:	f004 feba 	bl	80051f4 <RCC_AHB1PeriphClockCmd>
	
	// start with blank DMA configuration
	DMA_DeInit (SPIx_TX_DMA_STREAM);
 8000480:	485a      	ldr	r0, [pc, #360]	; (80005ec <init_SPI1+0x2dc>)
 8000482:	f003 fb75 	bl	8003b70 <DMA_DeInit>
	DMA_DeInit (SPIx_RX_DMA_STREAM);
 8000486:	485a      	ldr	r0, [pc, #360]	; (80005f0 <init_SPI1+0x2e0>)
 8000488:	f003 fb72 	bl	8003b70 <DMA_DeInit>

	// check if DMA stream is disabled before enabling 
	// this is useful when stream is enabled and disabled multiple times. 
	while (DMA_GetCmdStatus (SPIx_TX_DMA_STREAM) != DISABLE);
 800048c:	bf00      	nop
 800048e:	4857      	ldr	r0, [pc, #348]	; (80005ec <init_SPI1+0x2dc>)
 8000490:	f003 ff7e 	bl	8004390 <DMA_GetCmdStatus>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d1f9      	bne.n	800048e <init_SPI1+0x17e>
	while (DMA_GetCmdStatus (SPIx_RX_DMA_STREAM) != DISABLE);
 800049a:	bf00      	nop
 800049c:	4854      	ldr	r0, [pc, #336]	; (80005f0 <init_SPI1+0x2e0>)
 800049e:	f003 ff77 	bl	8004390 <DMA_GetCmdStatus>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d1f9      	bne.n	800049c <init_SPI1+0x18c>
	
	
	DMA_StructInit(&DMA_InitStruct);
 80004a8:	f107 0310 	add.w	r3, r7, #16
 80004ac:	4618      	mov	r0, r3
 80004ae:	f003 fe39 	bl	8004124 <DMA_StructInit>
  	//Configure DMA Initialization Structure
	//DMA_InitStruct.DMA_FIFOMode = DMA_FIFOMode_Disable ;
 	//DMA_InitStruct.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull ;
  	//DMA_InitStruct.DMA_MemoryBurst = DMA_MemoryBurst_Single ;
  	DMA_InitStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80004b2:	2300      	movs	r3, #0
 80004b4:	633b      	str	r3, [r7, #48]	; 0x30
  	DMA_InitStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80004b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ba:	62bb      	str	r3, [r7, #40]	; 0x28
  	DMA_InitStruct.DMA_Mode = DMA_Mode_Normal;
 80004bc:	2300      	movs	r3, #0
 80004be:	637b      	str	r3, [r7, #52]	; 0x34
  	DMA_InitStruct.DMA_PeripheralBaseAddr =(uint32_t) (&(SPIx->DR)) ;
 80004c0:	4b4c      	ldr	r3, [pc, #304]	; (80005f4 <init_SPI1+0x2e4>)
 80004c2:	617b      	str	r3, [r7, #20]
  	DMA_InitStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80004c4:	2300      	movs	r3, #0
 80004c6:	64bb      	str	r3, [r7, #72]	; 0x48
  	DMA_InitStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80004c8:	2300      	movs	r3, #0
 80004ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  	DMA_InitStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80004cc:	2300      	movs	r3, #0
 80004ce:	627b      	str	r3, [r7, #36]	; 0x24
  	DMA_InitStruct.DMA_Priority = DMA_Priority_High;
 80004d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80004d4:	63bb      	str	r3, [r7, #56]	; 0x38
  	// Configure TX DMA 
  	DMA_InitStruct.DMA_Channel = SPIx_TX_DMA_CHANNEL ;
 80004d6:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80004da:	613b      	str	r3, [r7, #16]
  	DMA_InitStruct.DMA_DIR = DMA_DIR_MemoryToPeripheral ;
 80004dc:	2340      	movs	r3, #64	; 0x40
 80004de:	61fb      	str	r3, [r7, #28]
  	DMA_InitStruct.DMA_Memory0BaseAddr = (uint32_t) &bufferTX ;
 80004e0:	4b45      	ldr	r3, [pc, #276]	; (80005f8 <init_SPI1+0x2e8>)
 80004e2:	61bb      	str	r3, [r7, #24]
	DMA_InitStruct.DMA_BufferSize = MAX_BUFFER_LENGTH;
 80004e4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80004e8:	623b      	str	r3, [r7, #32]
  	DMA_Init(SPIx_TX_DMA_STREAM, &DMA_InitStruct);
 80004ea:	f107 0310 	add.w	r3, r7, #16
 80004ee:	483f      	ldr	r0, [pc, #252]	; (80005ec <init_SPI1+0x2dc>)
 80004f0:	4619      	mov	r1, r3
 80004f2:	f003 fc53 	bl	8003d9c <DMA_Init>
	// Configure RX DMA 
  	DMA_InitStruct.DMA_Channel = SPIx_RX_DMA_CHANNEL ;
 80004f6:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80004fa:	613b      	str	r3, [r7, #16]
	DMA_InitStruct.DMA_DIR = DMA_DIR_PeripheralToMemory ;
 80004fc:	2300      	movs	r3, #0
 80004fe:	61fb      	str	r3, [r7, #28]
	DMA_InitStruct.DMA_Memory0BaseAddr = (uint32_t)&bufferRX; 
 8000500:	4b3e      	ldr	r3, [pc, #248]	; (80005fc <init_SPI1+0x2ec>)
 8000502:	61bb      	str	r3, [r7, #24]
	DMA_InitStruct.DMA_BufferSize = MAX_BUFFER_LENGTH;
 8000504:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000508:	623b      	str	r3, [r7, #32]
	DMA_Init(SPIx_RX_DMA_STREAM, &DMA_InitStruct);	
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	4838      	ldr	r0, [pc, #224]	; (80005f0 <init_SPI1+0x2e0>)
 8000510:	4619      	mov	r1, r3
 8000512:	f003 fc43 	bl	8003d9c <DMA_Init>
	
	DMA_ITConfig(SPIx_TX_DMA_STREAM, DMA_IT_TC, ENABLE); 
 8000516:	4835      	ldr	r0, [pc, #212]	; (80005ec <init_SPI1+0x2dc>)
 8000518:	2110      	movs	r1, #16
 800051a:	2201      	movs	r2, #1
 800051c:	f003 ffb6 	bl	800448c <DMA_ITConfig>
	DMA_ITConfig(SPIx_RX_DMA_STREAM, DMA_IT_TC, ENABLE); 
 8000520:	4833      	ldr	r0, [pc, #204]	; (80005f0 <init_SPI1+0x2e0>)
 8000522:	2110      	movs	r1, #16
 8000524:	2201      	movs	r2, #1
 8000526:	f003 ffb1 	bl	800448c <DMA_ITConfig>
  
	SPI_I2S_ClearFlag(SPIx, SPI_I2S_FLAG_TXE);
 800052a:	482f      	ldr	r0, [pc, #188]	; (80005e8 <init_SPI1+0x2d8>)
 800052c:	2102      	movs	r1, #2
 800052e:	f005 f8c1 	bl	80056b4 <SPI_I2S_ClearFlag>
	SPI_I2S_ClearFlag(SPIx, SPI_I2S_FLAG_RXNE);
 8000532:	482d      	ldr	r0, [pc, #180]	; (80005e8 <init_SPI1+0x2d8>)
 8000534:	2101      	movs	r1, #1
 8000536:	f005 f8bd 	bl	80056b4 <SPI_I2S_ClearFlag>
  	
	// enable the interrupt in the NVIC
 	NVIC_InitStruct.NVIC_IRQChannel = DMA2_Stream3_IRQn;
 800053a:	233b      	movs	r3, #59	; 0x3b
 800053c:	733b      	strb	r3, [r7, #12]
  	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0x1;
 800053e:	2301      	movs	r3, #1
 8000540:	737b      	strb	r3, [r7, #13]
 	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x0;
 8000542:	2300      	movs	r3, #0
 8000544:	73bb      	strb	r3, [r7, #14]
  	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000546:	2301      	movs	r3, #1
 8000548:	73fb      	strb	r3, [r7, #15]
  	NVIC_Init (&NVIC_InitStruct);
 800054a:	f107 030c 	add.w	r3, r7, #12
 800054e:	4618      	mov	r0, r3
 8000550:	f003 fa94 	bl	8003a7c <NVIC_Init>
	// enable the interrupt in the NVIC
 	NVIC_InitStruct.NVIC_IRQChannel = DMA2_Stream2_IRQn;
 8000554:	233a      	movs	r3, #58	; 0x3a
 8000556:	733b      	strb	r3, [r7, #12]
  	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0x1;
 8000558:	2301      	movs	r3, #1
 800055a:	737b      	strb	r3, [r7, #13]
 	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x0;
 800055c:	2300      	movs	r3, #0
 800055e:	73bb      	strb	r3, [r7, #14]
  	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000560:	2301      	movs	r3, #1
 8000562:	73fb      	strb	r3, [r7, #15]
  	NVIC_Init (&NVIC_InitStruct);
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	4618      	mov	r0, r3
 800056a:	f003 fa87 	bl	8003a7c <NVIC_Init>
  	// Enable dma tx and rx request
	SPI_I2S_DMACmd (SPIx, SPI_I2S_DMAReq_Tx, ENABLE);	
 800056e:	481e      	ldr	r0, [pc, #120]	; (80005e8 <init_SPI1+0x2d8>)
 8000570:	2102      	movs	r1, #2
 8000572:	2201      	movs	r2, #1
 8000574:	f004 ffe2 	bl	800553c <SPI_I2S_DMACmd>
	SPI_I2S_DMACmd (SPIx, SPI_I2S_DMAReq_Rx, ENABLE);	
 8000578:	481b      	ldr	r0, [pc, #108]	; (80005e8 <init_SPI1+0x2d8>)
 800057a:	2101      	movs	r1, #1
 800057c:	2201      	movs	r2, #1
 800057e:	f004 ffdd 	bl	800553c <SPI_I2S_DMACmd>
	

	/* Configure interrupt pin in this case we will use PA0 */
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0;
 8000582:	2301      	movs	r3, #1
 8000584:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8000586:	2300      	movs	r3, #0
 8000588:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 800058c:	2300      	movs	r3, #0
 800058e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000592:	2303      	movs	r3, #3
 8000594:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_Init(GPIOA, &GPIO_InitStruct);	
 8000598:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800059c:	4811      	ldr	r0, [pc, #68]	; (80005e4 <init_SPI1+0x2d4>)
 800059e:	4619      	mov	r1, r3
 80005a0:	f004 fbea 	bl	8004d78 <GPIO_Init>
	
	EXTI_InitTypeDef EXTI_InitStruct;
	NVIC_InitTypeDef NVIC_InitStruct1;
	/* Connect EXTI Line to appropriate GPIO Pin */ 
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0);
 80005a4:	2000      	movs	r0, #0
 80005a6:	2100      	movs	r1, #0
 80005a8:	f005 f8be 	bl	8005728 <SYSCFG_EXTILineConfig>
	
	/* Configure EXTI Line */
	EXTI_InitStruct.EXTI_Line = EXTI_Line0;
 80005ac:	2301      	movs	r3, #1
 80005ae:	607b      	str	r3, [r7, #4]
 	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 80005b0:	2300      	movs	r3, #0
 80005b2:	723b      	strb	r3, [r7, #8]
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Falling;
 80005b4:	230c      	movs	r3, #12
 80005b6:	727b      	strb	r3, [r7, #9]
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 80005b8:	2301      	movs	r3, #1
 80005ba:	72bb      	strb	r3, [r7, #10]
	EXTI_Init(&EXTI_InitStruct);
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	4618      	mov	r0, r3
 80005c0:	f004 fa82 	bl	8004ac8 <EXTI_Init>
 	
 	/* Enable and set EXTI Line Interrupt */
	NVIC_InitStruct1.NVIC_IRQChannel = EXTI0_IRQn;
 80005c4:	2306      	movs	r3, #6
 80005c6:	703b      	strb	r3, [r7, #0]
 	NVIC_InitStruct1.NVIC_IRQChannelPreemptionPriority = 0x1;
 80005c8:	2301      	movs	r3, #1
 80005ca:	707b      	strb	r3, [r7, #1]
	NVIC_InitStruct1.NVIC_IRQChannelSubPriority = 0x0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	70bb      	strb	r3, [r7, #2]
 	NVIC_InitStruct1.NVIC_IRQChannelCmd = ENABLE;
 80005d0:	2301      	movs	r3, #1
 80005d2:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&NVIC_InitStruct1);
 80005d4:	463b      	mov	r3, r7
 80005d6:	4618      	mov	r0, r3
 80005d8:	f003 fa50 	bl	8003a7c <NVIC_Init>


	
}
 80005dc:	3768      	adds	r7, #104	; 0x68
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40020000 	.word	0x40020000
 80005e8:	40013000 	.word	0x40013000
 80005ec:	40026458 	.word	0x40026458
 80005f0:	40026440 	.word	0x40026440
 80005f4:	4001300c 	.word	0x4001300c
 80005f8:	200139a0 	.word	0x200139a0
 80005fc:	200131cc 	.word	0x200131cc

08000600 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler()
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  // Test if DMA Stream Transfer Complete interrupt
  if (DMA_GetITStatus (SPIx_RX_DMA_STREAM, DMA_IT_TCIF2)) {
 8000604:	481b      	ldr	r0, [pc, #108]	; (8000674 <DMA2_Stream2_IRQHandler+0x74>)
 8000606:	491c      	ldr	r1, [pc, #112]	; (8000678 <DMA2_Stream2_IRQHandler+0x78>)
 8000608:	f003 fff6 	bl	80045f8 <DMA_GetITStatus>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d027      	beq.n	8000662 <DMA2_Stream2_IRQHandler+0x62>
    
	DMA_ClearITPendingBit (SPIx_RX_DMA_STREAM, DMA_IT_TCIF2);
 8000612:	4818      	ldr	r0, [pc, #96]	; (8000674 <DMA2_Stream2_IRQHandler+0x74>)
 8000614:	4918      	ldr	r1, [pc, #96]	; (8000678 <DMA2_Stream2_IRQHandler+0x78>)
 8000616:	f004 f9ab 	bl	8004970 <DMA_ClearITPendingBit>
	
	while (SPI_I2S_GetFlagStatus (SPIx, SPI_I2S_FLAG_BSY) == SET);
 800061a:	bf00      	nop
 800061c:	4817      	ldr	r0, [pc, #92]	; (800067c <DMA2_Stream2_IRQHandler+0x7c>)
 800061e:	2180      	movs	r1, #128	; 0x80
 8000620:	f004 ffea 	bl	80055f8 <SPI_I2S_GetFlagStatus>
 8000624:	4603      	mov	r3, r0
 8000626:	2b01      	cmp	r3, #1
 8000628:	d0f8      	beq.n	800061c <DMA2_Stream2_IRQHandler+0x1c>
     * Now we can deselect the display. If more than one peripheral was being run
     * on this SPI peripheral, we would have to do both/all of them, or work out
     * which one was active and deselect that one.i
	
     */
	CSOFF();
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <DMA2_Stream2_IRQHandler+0x80>)
 800062c:	4a14      	ldr	r2, [pc, #80]	; (8000680 <DMA2_Stream2_IRQHandler+0x80>)
 800062e:	8b12      	ldrh	r2, [r2, #24]
 8000630:	b292      	uxth	r2, r2
 8000632:	f042 0210 	orr.w	r2, r2, #16
 8000636:	b292      	uxth	r2, r2
 8000638:	831a      	strh	r2, [r3, #24]
	DMA_Cmd(SPIx_TX_DMA_STREAM, DISABLE);		
 800063a:	4812      	ldr	r0, [pc, #72]	; (8000684 <DMA2_Stream2_IRQHandler+0x84>)
 800063c:	2100      	movs	r1, #0
 800063e:	f003 fda7 	bl	8004190 <DMA_Cmd>
	DMA_Cmd(SPIx_RX_DMA_STREAM, DISABLE);		
 8000642:	480c      	ldr	r0, [pc, #48]	; (8000674 <DMA2_Stream2_IRQHandler+0x74>)
 8000644:	2100      	movs	r1, #0
 8000646:	f003 fda3 	bl	8004190 <DMA_Cmd>
 
	taskENTER_CRITICAL(); 
 800064a:	f002 fe33 	bl	80032b4 <vPortEnterCritical>
       xSemaphoreGive( xSemaphoreDMASPI);
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <DMA2_Stream2_IRQHandler+0x88>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4618      	mov	r0, r3
 8000654:	2100      	movs	r1, #0
 8000656:	2200      	movs	r2, #0
 8000658:	2300      	movs	r3, #0
 800065a:	f002 f98d 	bl	8002978 <xQueueGenericSend>
//	xHigherPriorityTaskWoken = pdFalse;
//	xSemaphoreGiveFromISR( xSemaphoreDMASPI, &xHigherPriorityTaskWoken );
	taskEXIT_CRITICAL(); //
 800065e:	f002 fe39 	bl	80032d4 <vPortExitCritical>
  }	

  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000662:	4b0a      	ldr	r3, [pc, #40]	; (800068c <DMA2_Stream2_IRQHandler+0x8c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d003      	beq.n	8000672 <DMA2_Stream2_IRQHandler+0x72>
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <DMA2_Stream2_IRQHandler+0x90>)
 800066c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000670:	601a      	str	r2, [r3, #0]
}
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40026440 	.word	0x40026440
 8000678:	10208000 	.word	0x10208000
 800067c:	40013000 	.word	0x40013000
 8000680:	40020000 	.word	0x40020000
 8000684:	40026458 	.word	0x40026458
 8000688:	200131c0 	.word	0x200131c0
 800068c:	20000464 	.word	0x20000464
 8000690:	e000ed04 	.word	0xe000ed04

08000694 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler()
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  // Test if DMA Stream Transfer Complete interrupt
  if (DMA_GetITStatus (SPIx_TX_DMA_STREAM, DMA_IT_TCIF3)) {
 8000698:	481b      	ldr	r0, [pc, #108]	; (8000708 <DMA2_Stream3_IRQHandler+0x74>)
 800069a:	491c      	ldr	r1, [pc, #112]	; (800070c <DMA2_Stream3_IRQHandler+0x78>)
 800069c:	f003 ffac 	bl	80045f8 <DMA_GetITStatus>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d027      	beq.n	80006f6 <DMA2_Stream3_IRQHandler+0x62>
    
	DMA_ClearITPendingBit (SPIx_TX_DMA_STREAM, DMA_IT_TCIF3);
 80006a6:	4818      	ldr	r0, [pc, #96]	; (8000708 <DMA2_Stream3_IRQHandler+0x74>)
 80006a8:	4918      	ldr	r1, [pc, #96]	; (800070c <DMA2_Stream3_IRQHandler+0x78>)
 80006aa:	f004 f961 	bl	8004970 <DMA_ClearITPendingBit>
	
	while (SPI_I2S_GetFlagStatus (SPIx, SPI_I2S_FLAG_BSY) == SET);
 80006ae:	bf00      	nop
 80006b0:	4817      	ldr	r0, [pc, #92]	; (8000710 <DMA2_Stream3_IRQHandler+0x7c>)
 80006b2:	2180      	movs	r1, #128	; 0x80
 80006b4:	f004 ffa0 	bl	80055f8 <SPI_I2S_GetFlagStatus>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d0f8      	beq.n	80006b0 <DMA2_Stream3_IRQHandler+0x1c>
     * Now we can deselect the display. If more than one peripheral was being run
     * on this SPI peripheral, we would have to do both/all of them, or work out
     * which one was active and deselect that one.i
	
     */
	CSOFF();
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <DMA2_Stream3_IRQHandler+0x80>)
 80006c0:	4a14      	ldr	r2, [pc, #80]	; (8000714 <DMA2_Stream3_IRQHandler+0x80>)
 80006c2:	8b12      	ldrh	r2, [r2, #24]
 80006c4:	b292      	uxth	r2, r2
 80006c6:	f042 0210 	orr.w	r2, r2, #16
 80006ca:	b292      	uxth	r2, r2
 80006cc:	831a      	strh	r2, [r3, #24]
	DMA_Cmd(SPIx_TX_DMA_STREAM, DISABLE);		
 80006ce:	480e      	ldr	r0, [pc, #56]	; (8000708 <DMA2_Stream3_IRQHandler+0x74>)
 80006d0:	2100      	movs	r1, #0
 80006d2:	f003 fd5d 	bl	8004190 <DMA_Cmd>
	DMA_Cmd(SPIx_RX_DMA_STREAM, DISABLE);		
 80006d6:	4810      	ldr	r0, [pc, #64]	; (8000718 <DMA2_Stream3_IRQHandler+0x84>)
 80006d8:	2100      	movs	r1, #0
 80006da:	f003 fd59 	bl	8004190 <DMA_Cmd>
       
	taskENTER_CRITICAL(); 
 80006de:	f002 fde9 	bl	80032b4 <vPortEnterCritical>
	 xSemaphoreGive( xSemaphoreDMASPI );
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <DMA2_Stream3_IRQHandler+0x88>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4618      	mov	r0, r3
 80006e8:	2100      	movs	r1, #0
 80006ea:	2200      	movs	r2, #0
 80006ec:	2300      	movs	r3, #0
 80006ee:	f002 f943 	bl	8002978 <xQueueGenericSend>
//	xHigherPriorityTaskWoken = pdFalse;
//	xSemaphoreGiveFromISR( xSemaphoreDMASPI, &xHigherPriorityTaskWoken );
 	taskEXIT_CRITICAL();  
 80006f2:	f002 fdef 	bl	80032d4 <vPortExitCritical>
 }
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80006f6:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <DMA2_Stream3_IRQHandler+0x8c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d003      	beq.n	8000706 <DMA2_Stream3_IRQHandler+0x72>
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <DMA2_Stream3_IRQHandler+0x90>)
 8000700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000704:	601a      	str	r2, [r3, #0]
}
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40026458 	.word	0x40026458
 800070c:	18008000 	.word	0x18008000
 8000710:	40013000 	.word	0x40013000
 8000714:	40020000 	.word	0x40020000
 8000718:	40026440 	.word	0x40026440
 800071c:	200131c0 	.word	0x200131c0
 8000720:	20000464 	.word	0x20000464
 8000724:	e000ed04 	.word	0xe000ed04

08000728 <spi_dma_send>:


/*---------------------------- Matic Knap 25 Jun 2014 ---------------------*/

void spi_dma_send(uint16_t address, uint16_t data_len, uint8_t *data_buf)
{
 8000728:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800072c:	b087      	sub	sp, #28
 800072e:	af00      	add	r7, sp, #0
 8000730:	460b      	mov	r3, r1
 8000732:	603a      	str	r2, [r7, #0]
 8000734:	4602      	mov	r2, r0
 8000736:	80fa      	strh	r2, [r7, #6]
 8000738:	80bb      	strh	r3, [r7, #4]
 800073a:	466b      	mov	r3, sp
 800073c:	461e      	mov	r6, r3
		uint8_t buffer[data_len+4];
 800073e:	88bb      	ldrh	r3, [r7, #4]
 8000740:	1d19      	adds	r1, r3, #4
 8000742:	1e4b      	subs	r3, r1, #1
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	460b      	mov	r3, r1
 8000748:	461a      	mov	r2, r3
 800074a:	f04f 0300 	mov.w	r3, #0
 800074e:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8000752:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8000756:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800075a:	460b      	mov	r3, r1
 800075c:	461a      	mov	r2, r3
 800075e:	f04f 0300 	mov.w	r3, #0
 8000762:	00dd      	lsls	r5, r3, #3
 8000764:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8000768:	00d4      	lsls	r4, r2, #3
 800076a:	460b      	mov	r3, r1
 800076c:	3307      	adds	r3, #7
 800076e:	08db      	lsrs	r3, r3, #3
 8000770:	00db      	lsls	r3, r3, #3
 8000772:	ebad 0d03 	sub.w	sp, sp, r3
 8000776:	466b      	mov	r3, sp
 8000778:	3300      	adds	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
		buffer[0] = ((address & 0xff00) >> 8); // addres byte 1 
 800077c:	88fb      	ldrh	r3, [r7, #6]
 800077e:	0a1b      	lsrs	r3, r3, #8
 8000780:	b29b      	uxth	r3, r3
 8000782:	b2da      	uxtb	r2, r3
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	701a      	strb	r2, [r3, #0]
		buffer[1] = ((address & 0x00ff)); //address byte 2 
 8000788:	88fb      	ldrh	r3, [r7, #6]
 800078a:	b2da      	uxtb	r2, r3
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	705a      	strb	r2, [r3, #1]
		buffer[2] = ((0x80 | (data_len & 0x7f00) >> 8 ));
 8000790:	88bb      	ldrh	r3, [r7, #4]
 8000792:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000796:	121b      	asrs	r3, r3, #8
 8000798:	b2db      	uxtb	r3, r3
 800079a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	709a      	strb	r2, [r3, #2]
		buffer[3] = (data_len & 0x00ff);
 80007a6:	88bb      	ldrh	r3, [r7, #4]
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	70da      	strb	r2, [r3, #3]

		int i;
		for (i = 4 ; i < data_len+4; i++) 
 80007ae:	2304      	movs	r3, #4
 80007b0:	617b      	str	r3, [r7, #20]
 80007b2:	e00b      	b.n	80007cc <spi_dma_send+0xa4>
			buffer[i] = (data_buf[i-4]);
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	3b04      	subs	r3, #4
 80007b8:	683a      	ldr	r2, [r7, #0]
 80007ba:	4413      	add	r3, r2
 80007bc:	781a      	ldrb	r2, [r3, #0]
 80007be:	68f9      	ldr	r1, [r7, #12]
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	440b      	add	r3, r1
 80007c4:	701a      	strb	r2, [r3, #0]
		buffer[1] = ((address & 0x00ff)); //address byte 2 
		buffer[2] = ((0x80 | (data_len & 0x7f00) >> 8 ));
		buffer[3] = (data_len & 0x00ff);

		int i;
		for (i = 4 ; i < data_len+4; i++) 
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	3301      	adds	r3, #1
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	88bb      	ldrh	r3, [r7, #4]
 80007ce:	1d1a      	adds	r2, r3, #4
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	dcee      	bgt.n	80007b4 <spi_dma_send+0x8c>
			buffer[i] = (data_buf[i-4]);
		DMA_SetCurrDataCounter(SPIx_TX_DMA_STREAM, data_len + 4);
 80007d6:	88bb      	ldrh	r3, [r7, #4]
 80007d8:	3304      	adds	r3, #4
 80007da:	b29b      	uxth	r3, r3
 80007dc:	4812      	ldr	r0, [pc, #72]	; (8000828 <spi_dma_send+0x100>)
 80007de:	4619      	mov	r1, r3
 80007e0:	f003 fd62 	bl	80042a8 <DMA_SetCurrDataCounter>
		SPIx_TX_DMA_STREAM->M0AR =(uint32_t) &buffer;	
 80007e4:	4b10      	ldr	r3, [pc, #64]	; (8000828 <spi_dma_send+0x100>)
 80007e6:	68fa      	ldr	r2, [r7, #12]
 80007e8:	60da      	str	r2, [r3, #12]
		CSON(); // chip select 
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <spi_dma_send+0x104>)
 80007ec:	4a0f      	ldr	r2, [pc, #60]	; (800082c <spi_dma_send+0x104>)
 80007ee:	8b52      	ldrh	r2, [r2, #26]
 80007f0:	b292      	uxth	r2, r2
 80007f2:	f042 0210 	orr.w	r2, r2, #16
 80007f6:	b292      	uxth	r2, r2
 80007f8:	835a      	strh	r2, [r3, #26]
		DMA_Cmd(SPIx_TX_DMA_STREAM, ENABLE);		
 80007fa:	480b      	ldr	r0, [pc, #44]	; (8000828 <spi_dma_send+0x100>)
 80007fc:	2101      	movs	r1, #1
 80007fe:	f003 fcc7 	bl	8004190 <DMA_Cmd>
		DMA_Cmd(SPIx_RX_DMA_STREAM, ENABLE);	
 8000802:	480b      	ldr	r0, [pc, #44]	; (8000830 <spi_dma_send+0x108>)
 8000804:	2101      	movs	r1, #1
 8000806:	f003 fcc3 	bl	8004190 <DMA_Cmd>
		/* Block until the semaphore is given */
        	 xSemaphoreTake(xSemaphoreDMASPI, portMAX_DELAY);
 800080a:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <spi_dma_send+0x10c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4618      	mov	r0, r3
 8000810:	2100      	movs	r1, #0
 8000812:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000816:	2300      	movs	r3, #0
 8000818:	f002 f9c8 	bl	8002bac <xQueueGenericReceive>
 800081c:	46b5      	mov	sp, r6

	//	CSOFF(); // chip deselect 
			
	
}
 800081e:	371c      	adds	r7, #28
 8000820:	46bd      	mov	sp, r7
 8000822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000826:	bf00      	nop
 8000828:	40026458 	.word	0x40026458
 800082c:	40020000 	.word	0x40020000
 8000830:	40026440 	.word	0x40026440
 8000834:	200131c0 	.word	0x200131c0

08000838 <spi_dma_send2B>:

void spi_dma_send2B(uint16_t address,  uint16_t data_buf)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	4602      	mov	r2, r0
 8000840:	460b      	mov	r3, r1
 8000842:	80fa      	strh	r2, [r7, #6]
 8000844:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[6];
	uint16_t data_len = 2;
 8000846:	2302      	movs	r3, #2
 8000848:	81fb      	strh	r3, [r7, #14]
	buffer[0] = ((address & 0xff00) >> 8); // addres byte 1 
 800084a:	88fb      	ldrh	r3, [r7, #6]
 800084c:	0a1b      	lsrs	r3, r3, #8
 800084e:	b29b      	uxth	r3, r3
 8000850:	b2db      	uxtb	r3, r3
 8000852:	723b      	strb	r3, [r7, #8]
	buffer[1] = ((address & 0x00ff)); //address byte 2 
 8000854:	88fb      	ldrh	r3, [r7, #6]
 8000856:	b2db      	uxtb	r3, r3
 8000858:	727b      	strb	r3, [r7, #9]
	buffer[2] = ((0x80 | (data_len & 0x7f00) >> 8 ));
 800085a:	89fb      	ldrh	r3, [r7, #14]
 800085c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000860:	121b      	asrs	r3, r3, #8
 8000862:	b2db      	uxtb	r3, r3
 8000864:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000868:	b2db      	uxtb	r3, r3
 800086a:	b2db      	uxtb	r3, r3
 800086c:	72bb      	strb	r3, [r7, #10]
	 buffer[3] = (data_len & 0x00ff);
 800086e:	89fb      	ldrh	r3, [r7, #14]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	72fb      	strb	r3, [r7, #11]
	 buffer[4] = ((data_buf & 0xff00) >> 8);
 8000874:	88bb      	ldrh	r3, [r7, #4]
 8000876:	0a1b      	lsrs	r3, r3, #8
 8000878:	b29b      	uxth	r3, r3
 800087a:	b2db      	uxtb	r3, r3
 800087c:	733b      	strb	r3, [r7, #12]
	 buffer[5] = (data_buf & 0x00ff);
 800087e:	88bb      	ldrh	r3, [r7, #4]
 8000880:	b2db      	uxtb	r3, r3
 8000882:	737b      	strb	r3, [r7, #13]
	DMA_SetCurrDataCounter(SPIx_TX_DMA_STREAM, 6);
 8000884:	4811      	ldr	r0, [pc, #68]	; (80008cc <spi_dma_send2B+0x94>)
 8000886:	2106      	movs	r1, #6
 8000888:	f003 fd0e 	bl	80042a8 <DMA_SetCurrDataCounter>
	SPIx_TX_DMA_STREAM->M0AR =(uint32_t) &buffer;	
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <spi_dma_send2B+0x94>)
 800088e:	f107 0208 	add.w	r2, r7, #8
 8000892:	60da      	str	r2, [r3, #12]
	CSON(); // chip select 
 8000894:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <spi_dma_send2B+0x98>)
 8000896:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <spi_dma_send2B+0x98>)
 8000898:	8b52      	ldrh	r2, [r2, #26]
 800089a:	b292      	uxth	r2, r2
 800089c:	f042 0210 	orr.w	r2, r2, #16
 80008a0:	b292      	uxth	r2, r2
 80008a2:	835a      	strh	r2, [r3, #26]
	DMA_Cmd(SPIx_TX_DMA_STREAM, ENABLE);		
 80008a4:	4809      	ldr	r0, [pc, #36]	; (80008cc <spi_dma_send2B+0x94>)
 80008a6:	2101      	movs	r1, #1
 80008a8:	f003 fc72 	bl	8004190 <DMA_Cmd>
	DMA_Cmd(SPIx_RX_DMA_STREAM, ENABLE);	
 80008ac:	4809      	ldr	r0, [pc, #36]	; (80008d4 <spi_dma_send2B+0x9c>)
 80008ae:	2101      	movs	r1, #1
 80008b0:	f003 fc6e 	bl	8004190 <DMA_Cmd>
	/* Block until the semaphore is given */
        xSemaphoreTake(xSemaphoreDMASPI, portMAX_DELAY);	
 80008b4:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <spi_dma_send2B+0xa0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4618      	mov	r0, r3
 80008ba:	2100      	movs	r1, #0
 80008bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008c0:	2300      	movs	r3, #0
 80008c2:	f002 f973 	bl	8002bac <xQueueGenericReceive>
	
//	CSOFF(); // chip deselect 
			
}
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40026458 	.word	0x40026458
 80008d0:	40020000 	.word	0x40020000
 80008d4:	40026440 	.word	0x40026440
 80008d8:	200131c0 	.word	0x200131c0

080008dc <spi_dma_sendByte>:

void spi_dma_sendByte(uint16_t address,  uint8_t data_buf)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4602      	mov	r2, r0
 80008e4:	460b      	mov	r3, r1
 80008e6:	80fa      	strh	r2, [r7, #6]
 80008e8:	717b      	strb	r3, [r7, #5]
		uint8_t buffer[5];
		uint16_t data_len=0x1;
 80008ea:	2301      	movs	r3, #1
 80008ec:	81fb      	strh	r3, [r7, #14]
		buffer[0] = ((address & 0xff00) >> 8); // addres byte 1 
 80008ee:	88fb      	ldrh	r3, [r7, #6]
 80008f0:	0a1b      	lsrs	r3, r3, #8
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	723b      	strb	r3, [r7, #8]
		buffer[1] = ((address & 0x00ff)); //address byte 2 
 80008f8:	88fb      	ldrh	r3, [r7, #6]
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	727b      	strb	r3, [r7, #9]
		buffer[2] = ((0x80 | (data_len & 0x7f00) >> 8 ));
 80008fe:	89fb      	ldrh	r3, [r7, #14]
 8000900:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000904:	121b      	asrs	r3, r3, #8
 8000906:	b2db      	uxtb	r3, r3
 8000908:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800090c:	b2db      	uxtb	r3, r3
 800090e:	b2db      	uxtb	r3, r3
 8000910:	72bb      	strb	r3, [r7, #10]
		buffer[3] = (data_len & 0x00ff);
 8000912:	89fb      	ldrh	r3, [r7, #14]
 8000914:	b2db      	uxtb	r3, r3
 8000916:	72fb      	strb	r3, [r7, #11]
		buffer[4] = data_buf ; 
 8000918:	797b      	ldrb	r3, [r7, #5]
 800091a:	733b      	strb	r3, [r7, #12]
		DMA_SetCurrDataCounter(SPIx_TX_DMA_STREAM, 5);
 800091c:	4811      	ldr	r0, [pc, #68]	; (8000964 <spi_dma_sendByte+0x88>)
 800091e:	2105      	movs	r1, #5
 8000920:	f003 fcc2 	bl	80042a8 <DMA_SetCurrDataCounter>
		SPIx_TX_DMA_STREAM->M0AR =(uint32_t) &buffer;	
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <spi_dma_sendByte+0x88>)
 8000926:	f107 0208 	add.w	r2, r7, #8
 800092a:	60da      	str	r2, [r3, #12]
		CSON(); // chip select 
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <spi_dma_sendByte+0x8c>)
 800092e:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <spi_dma_sendByte+0x8c>)
 8000930:	8b52      	ldrh	r2, [r2, #26]
 8000932:	b292      	uxth	r2, r2
 8000934:	f042 0210 	orr.w	r2, r2, #16
 8000938:	b292      	uxth	r2, r2
 800093a:	835a      	strh	r2, [r3, #26]
		DMA_Cmd(SPIx_TX_DMA_STREAM, ENABLE);		
 800093c:	4809      	ldr	r0, [pc, #36]	; (8000964 <spi_dma_sendByte+0x88>)
 800093e:	2101      	movs	r1, #1
 8000940:	f003 fc26 	bl	8004190 <DMA_Cmd>
		DMA_Cmd(SPIx_RX_DMA_STREAM, ENABLE);
 8000944:	4809      	ldr	r0, [pc, #36]	; (800096c <spi_dma_sendByte+0x90>)
 8000946:	2101      	movs	r1, #1
 8000948:	f003 fc22 	bl	8004190 <DMA_Cmd>
		/* Block until the semaphore is given */
	        xSemaphoreTake(xSemaphoreDMASPI, portMAX_DELAY);	
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <spi_dma_sendByte+0x94>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	2100      	movs	r1, #0
 8000954:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000958:	2300      	movs	r3, #0
 800095a:	f002 f927 	bl	8002bac <xQueueGenericReceive>
				
//		CSOFF(); // chip deselect 
			
}
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40026458 	.word	0x40026458
 8000968:	40020000 	.word	0x40020000
 800096c:	40026440 	.word	0x40026440
 8000970:	200131c0 	.word	0x200131c0

08000974 <spi_dma_read>:

		return (data_buf[0] << 8) | data_buf[1];

}
void spi_dma_read(uint16_t address, uint16_t data_len)
{
 8000974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000978:	b086      	sub	sp, #24
 800097a:	af00      	add	r7, sp, #0
 800097c:	80f8      	strh	r0, [r7, #6]
 800097e:	80b9      	strh	r1, [r7, #4]
 8000980:	4669      	mov	r1, sp
 8000982:	4688      	mov	r8, r1
		uint8_t buffer[data_len+4];
 8000984:	88b9      	ldrh	r1, [r7, #4]
 8000986:	1d0e      	adds	r6, r1, #4
 8000988:	1e71      	subs	r1, r6, #1
 800098a:	6139      	str	r1, [r7, #16]
 800098c:	4631      	mov	r1, r6
 800098e:	4608      	mov	r0, r1
 8000990:	f04f 0100 	mov.w	r1, #0
 8000994:	00cd      	lsls	r5, r1, #3
 8000996:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
 800099a:	00c4      	lsls	r4, r0, #3
 800099c:	4631      	mov	r1, r6
 800099e:	4608      	mov	r0, r1
 80009a0:	f04f 0100 	mov.w	r1, #0
 80009a4:	00cb      	lsls	r3, r1, #3
 80009a6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80009aa:	00c2      	lsls	r2, r0, #3
 80009ac:	4633      	mov	r3, r6
 80009ae:	3307      	adds	r3, #7
 80009b0:	08db      	lsrs	r3, r3, #3
 80009b2:	00db      	lsls	r3, r3, #3
 80009b4:	ebad 0d03 	sub.w	sp, sp, r3
 80009b8:	466b      	mov	r3, sp
 80009ba:	3300      	adds	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
		buffer[0] = ((address & 0xff00) >> 8); // addres byte 1 
 80009be:	88fb      	ldrh	r3, [r7, #6]
 80009c0:	0a1b      	lsrs	r3, r3, #8
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	701a      	strb	r2, [r3, #0]
		buffer[1] = ((address & 0x00ff)); //address byte 2 
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	705a      	strb	r2, [r3, #1]
		buffer[2] = ((0x00 | (data_len & 0x7f00) >> 8 ));
 80009d2:	88bb      	ldrh	r3, [r7, #4]
 80009d4:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80009d8:	121b      	asrs	r3, r3, #8
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	709a      	strb	r2, [r3, #2]
		buffer[3] = (data_len & 0x00ff);
 80009e0:	88bb      	ldrh	r3, [r7, #4]
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	70da      	strb	r2, [r3, #3]

		int i;
		for (i = 4 ; i < data_len+4; i++) buffer[i] = 0x0;
 80009e8:	2304      	movs	r3, #4
 80009ea:	617b      	str	r3, [r7, #20]
 80009ec:	e007      	b.n	80009fe <spi_dma_read+0x8a>
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	4413      	add	r3, r2
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	3301      	adds	r3, #1
 80009fc:	617b      	str	r3, [r7, #20]
 80009fe:	88bb      	ldrh	r3, [r7, #4]
 8000a00:	1d1a      	adds	r2, r3, #4
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	dcf2      	bgt.n	80009ee <spi_dma_read+0x7a>

		DMA_SetCurrDataCounter(SPIx_RX_DMA_STREAM, data_len+4);
 8000a08:	88bb      	ldrh	r3, [r7, #4]
 8000a0a:	3304      	adds	r3, #4
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	4817      	ldr	r0, [pc, #92]	; (8000a6c <spi_dma_read+0xf8>)
 8000a10:	4619      	mov	r1, r3
 8000a12:	f003 fc49 	bl	80042a8 <DMA_SetCurrDataCounter>
		DMA_SetCurrDataCounter(SPIx_TX_DMA_STREAM, 4+data_len);
 8000a16:	88bb      	ldrh	r3, [r7, #4]
 8000a18:	3304      	adds	r3, #4
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	4814      	ldr	r0, [pc, #80]	; (8000a70 <spi_dma_read+0xfc>)
 8000a1e:	4619      	mov	r1, r3
 8000a20:	f003 fc42 	bl	80042a8 <DMA_SetCurrDataCounter>
		SPIx_TX_DMA_STREAM->M0AR =(uint32_t) &buffer;	
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <spi_dma_read+0xfc>)
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	60da      	str	r2, [r3, #12]
		SPIx_RX_DMA_STREAM->M0AR =(uint32_t)&bufferRX;	
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <spi_dma_read+0xf8>)
 8000a2c:	4a11      	ldr	r2, [pc, #68]	; (8000a74 <spi_dma_read+0x100>)
 8000a2e:	60da      	str	r2, [r3, #12]

		CSON(); // chip select 
 8000a30:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <spi_dma_read+0x104>)
 8000a32:	4a11      	ldr	r2, [pc, #68]	; (8000a78 <spi_dma_read+0x104>)
 8000a34:	8b52      	ldrh	r2, [r2, #26]
 8000a36:	b292      	uxth	r2, r2
 8000a38:	f042 0210 	orr.w	r2, r2, #16
 8000a3c:	b292      	uxth	r2, r2
 8000a3e:	835a      	strh	r2, [r3, #26]
		DMA_Cmd(SPIx_TX_DMA_STREAM, ENABLE);		
 8000a40:	480b      	ldr	r0, [pc, #44]	; (8000a70 <spi_dma_read+0xfc>)
 8000a42:	2101      	movs	r1, #1
 8000a44:	f003 fba4 	bl	8004190 <DMA_Cmd>
		DMA_Cmd(SPIx_RX_DMA_STREAM, ENABLE);
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <spi_dma_read+0xf8>)
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	f003 fba0 	bl	8004190 <DMA_Cmd>
		/* Block until the semaphore is given */
        	xSemaphoreTake(xSemaphoreDMASPI, portMAX_DELAY);	
 8000a50:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <spi_dma_read+0x108>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4618      	mov	r0, r3
 8000a56:	2100      	movs	r1, #0
 8000a58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f002 f8a5 	bl	8002bac <xQueueGenericReceive>
 8000a62:	46c5      	mov	sp, r8
		//CSOFF(); // chip deselect		

}	
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a6c:	40026440 	.word	0x40026440
 8000a70:	40026458 	.word	0x40026458
 8000a74:	200131cc 	.word	0x200131cc
 8000a78:	40020000 	.word	0x40020000
 8000a7c:	200131c0 	.word	0x200131c0

08000a80 <wiznet_initialize>:
			W5200_Sn_SR_SOCK_PPPOE,	// mode is PPPOE
		};


void wiznet_initialize(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
	// hwreset
	//RESET_HIGH();
	//RESET_LOW();
		
	//SW reset 
	spi_dma_sendByte(W5200_MR, W5200_MR_RST);
 8000a86:	2000      	movs	r0, #0
 8000a88:	2180      	movs	r1, #128	; 0x80
 8000a8a:	f7ff ff27 	bl	80008dc <spi_dma_sendByte>
	// wait until reset complete
	uint8_t data = W5200_MR_RST; 
 8000a8e:	2380      	movs	r3, #128	; 0x80
 8000a90:	70fb      	strb	r3, [r7, #3]
	while((data  && W5200_MR_RST) == W5200_MR_RST)
 8000a92:	bf00      	nop
		spi_dma_read(W5200_MR, 1);
		memcpy(&data, bufferRX+4, 1);
	}
		
	// PING enable, PPPoE disable 
	spi_dma_sendByte(W5200_MR, 0);
 8000a94:	2000      	movs	r0, #0
 8000a96:	2100      	movs	r1, #0
 8000a98:	f7ff ff20 	bl	80008dc <spi_dma_sendByte>
	// all socket interrupts sets to nonmask. set '1' is interrupt enable. 
	spi_dma_sendByte(W5200_IMR, 0xff);
 8000a9c:	2016      	movs	r0, #22
 8000a9e:	21ff      	movs	r1, #255	; 0xff
 8000aa0:	f7ff ff1c 	bl	80008dc <spi_dma_sendByte>
	// IP-confilict, PPPoE Close are mask. set '0' interupt disable. 
	spi_dma_sendByte(W5200_IMR2, 0);
 8000aa4:	2036      	movs	r0, #54	; 0x36
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	f7ff ff18 	bl	80008dc <spi_dma_sendByte>
	// set timeoput to 200msec
	spi_dma_sendByte(W5200_RTR, 200);
 8000aac:	2017      	movs	r0, #23
 8000aae:	21c8      	movs	r1, #200	; 0xc8
 8000ab0:	f7ff ff14 	bl	80008dc <spi_dma_sendByte>
	// set retry count register to 3rd
	spi_dma_sendByte(W5200_RCR, 3);
 8000ab4:	2019      	movs	r0, #25
 8000ab6:	2103      	movs	r1, #3
 8000ab8:	f7ff ff10 	bl	80008dc <spi_dma_sendByte>

	int n = 0; 
 8000abc:	2300      	movs	r3, #0
 8000abe:	607b      	str	r3, [r7, #4]

	for (n = 0; n < 8; n++)
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	e02b      	b.n	8000b1e <wiznet_initialize+0x9e>
	{
		spi_dma_sendByte(W5200_Sn_RXMEM_SIZE(n), 0x2);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	021b      	lsls	r3, r3, #8
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000ad2:	331e      	adds	r3, #30
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	2102      	movs	r1, #2
 8000ada:	f7ff feff 	bl	80008dc <spi_dma_sendByte>
		spi_dma_sendByte(W5200_Sn_TXMEM_SIZE(n),0x2);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	021b      	lsls	r3, r3, #8
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000aea:	331f      	adds	r3, #31
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	4618      	mov	r0, r3
 8000af0:	2102      	movs	r1, #2
 8000af2:	f7ff fef3 	bl	80008dc <spi_dma_sendByte>
		spi_dma_sendByte(W5200_Sn_IMR(n), 0xff);	
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	021b      	lsls	r3, r3, #8
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000b02:	332c      	adds	r3, #44	; 0x2c
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	4618      	mov	r0, r3
 8000b08:	21ff      	movs	r1, #255	; 0xff
 8000b0a:	f7ff fee7 	bl	80008dc <spi_dma_sendByte>
		socket_flg[n] = 0;
 8000b0e:	4a07      	ldr	r2, [pc, #28]	; (8000b2c <wiznet_initialize+0xac>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4413      	add	r3, r2
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
	// set retry count register to 3rd
	spi_dma_sendByte(W5200_RCR, 3);

	int n = 0; 

	for (n = 0; n < 8; n++)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2b07      	cmp	r3, #7
 8000b22:	ddd0      	ble.n	8000ac6 <wiznet_initialize+0x46>
			
	}	
	
	
	
}
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000468 	.word	0x20000468

08000b30 <wiznet_set_hardware_address>:

void  wiznet_set_hardware_address(const macaddress_t address)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]

	spi_dma_send(W5200_SHAR, 6, address);
 8000b38:	2009      	movs	r0, #9
 8000b3a:	2106      	movs	r1, #6
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	f7ff fdf3 	bl	8000728 <spi_dma_send>
}
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <wiznet_get_hardware_address>:

void  wiznet_get_hardware_address(macaddress_t address)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]

	spi_dma_read(W5200_SHAR, 6);
 8000b50:	2009      	movs	r0, #9
 8000b52:	2106      	movs	r1, #6
 8000b54:	f7ff ff0e 	bl	8000974 <spi_dma_read>
	memcpy(address, bufferRX+4, 6);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	4903      	ldr	r1, [pc, #12]	; (8000b68 <wiznet_get_hardware_address+0x20>)
 8000b5c:	2206      	movs	r2, #6
 8000b5e:	f7ff fb3d 	bl	80001dc <memcpy>
}
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	200131d0 	.word	0x200131d0

08000b6c <wiznet_configure_network>:

void  wiznet_configure_network(const ipv4address_t address,
                             const ipv4address_t subnet,
                             const ipv4address_t gateway)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
	spi_dma_send(W5200_SIPR, 4, address);
 8000b78:	200f      	movs	r0, #15
 8000b7a:	2104      	movs	r1, #4
 8000b7c:	68fa      	ldr	r2, [r7, #12]
 8000b7e:	f7ff fdd3 	bl	8000728 <spi_dma_send>
	spi_dma_send(W5200_SUBR, 4, subnet);
 8000b82:	2005      	movs	r0, #5
 8000b84:	2104      	movs	r1, #4
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	f7ff fdce 	bl	8000728 <spi_dma_send>
	spi_dma_send(W5200_GAR, 4 , gateway);
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	2104      	movs	r1, #4
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	f7ff fdc9 	bl	8000728 <spi_dma_send>
}
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <wiznet_get_ipaddress>:

void  wiznet_get_ipaddress(ipv4address_t address)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	 spi_dma_read(W5200_SIPR, 4);
 8000ba4:	200f      	movs	r0, #15
 8000ba6:	2104      	movs	r1, #4
 8000ba8:	f7ff fee4 	bl	8000974 <spi_dma_read>
	memcpy(address, bufferRX+4, 4);
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	4903      	ldr	r1, [pc, #12]	; (8000bbc <wiznet_get_ipaddress+0x20>)
 8000bb0:	2204      	movs	r2, #4
 8000bb2:	f7ff fb13 	bl	80001dc <memcpy>
}
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	200131d0 	.word	0x200131d0

08000bc0 <get_CRStatus>:



uint8_t get_CRStatus(uint8_t sck_fd)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
	uint8_t var; 
	spi_dma_read(W5200_Sn_CR(sck_fd),1);
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	021b      	lsls	r3, r3, #8
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	4618      	mov	r0, r3
 8000bdc:	2101      	movs	r1, #1
 8000bde:	f7ff fec9 	bl	8000974 <spi_dma_read>
	memcpy(&var, bufferRX+4, 1);
 8000be2:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <get_CRStatus+0x34>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	73fb      	strb	r3, [r7, #15]
	return var;
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200131d0 	.word	0x200131d0

08000bf8 <get_SRStatus>:


uint8_t get_SRStatus(uint8_t sck_fd)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
	uint8_t var; 
	spi_dma_read(W5200_Sn_SR(sck_fd), 1);
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	021b      	lsls	r3, r3, #8
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000c0e:	3303      	adds	r3, #3
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	4618      	mov	r0, r3
 8000c14:	2101      	movs	r1, #1
 8000c16:	f7ff fead 	bl	8000974 <spi_dma_read>
	memcpy(&var, bufferRX+4, 1);
 8000c1a:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <get_SRStatus+0x34>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	73fb      	strb	r3, [r7, #15]
	return var;
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200131d0 	.word	0x200131d0

08000c30 <get_TXFSRStatus>:

uint16_t get_TXFSRStatus(uint8_t sck_fd)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_TX_FSR(sck_fd), 2);
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	021b      	lsls	r3, r3, #8
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000c46:	3320      	adds	r3, #32
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	f7ff fe91 	bl	8000974 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000c52:	4a08      	ldr	r2, [pc, #32]	; (8000c74 <get_TXFSRStatus+0x44>)
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	8812      	ldrh	r2, [r2, #0]
 8000c5a:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000c5c:	7b3b      	ldrb	r3, [r7, #12]
 8000c5e:	021b      	lsls	r3, r3, #8
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	7b7b      	ldrb	r3, [r7, #13]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	b29b      	uxth	r3, r3
	
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200131d0 	.word	0x200131d0

08000c78 <get_TXWRStatus>:

uint16_t get_TXWRStatus(uint8_t sck_fd)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_TX_WR(sck_fd), 2 );
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	021b      	lsls	r3, r3, #8
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000c8e:	3324      	adds	r3, #36	; 0x24
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	2102      	movs	r1, #2
 8000c96:	f7ff fe6d 	bl	8000974 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000c9a:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <get_TXWRStatus+0x44>)
 8000c9c:	f107 030c 	add.w	r3, r7, #12
 8000ca0:	8812      	ldrh	r2, [r2, #0]
 8000ca2:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000ca4:	7b3b      	ldrb	r3, [r7, #12]
 8000ca6:	021b      	lsls	r3, r3, #8
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	7b7b      	ldrb	r3, [r7, #13]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	b29b      	uxth	r3, r3

	
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200131d0 	.word	0x200131d0

08000cc0 <get_TXRD>:
uint16_t get_TXRD(uint8_t sck_fd)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_TX_RD(sck_fd), 2);
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	021b      	lsls	r3, r3, #8
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000cd6:	3322      	adds	r3, #34	; 0x22
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	4618      	mov	r0, r3
 8000cdc:	2102      	movs	r1, #2
 8000cde:	f7ff fe49 	bl	8000974 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000ce2:	4a08      	ldr	r2, [pc, #32]	; (8000d04 <get_TXRD+0x44>)
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	8812      	ldrh	r2, [r2, #0]
 8000cea:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000cec:	7b3b      	ldrb	r3, [r7, #12]
 8000cee:	021b      	lsls	r3, r3, #8
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	7b7b      	ldrb	r3, [r7, #13]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	b29b      	uxth	r3, r3
	
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	200131d0 	.word	0x200131d0

08000d08 <set_TXWR>:

void  set_TXWR(uint8_t sck_fd, uint16_t val)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4602      	mov	r2, r0
 8000d10:	460b      	mov	r3, r1
 8000d12:	71fa      	strb	r2, [r7, #7]
 8000d14:	80bb      	strh	r3, [r7, #4]
 	spi_dma_send2B(W5200_Sn_TX_WR(sck_fd), val);
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	021b      	lsls	r3, r3, #8
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000d22:	3324      	adds	r3, #36	; 0x24
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	88bb      	ldrh	r3, [r7, #4]
 8000d28:	4610      	mov	r0, r2
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	f7ff fd84 	bl	8000838 <spi_dma_send2B>
}
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop

08000d38 <get_RXRSR>:

uint16_t get_RXRSR(uint8_t sck_fd)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_RX_RSR(sck_fd), 2);
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	021b      	lsls	r3, r3, #8
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000d4e:	3326      	adds	r3, #38	; 0x26
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	4618      	mov	r0, r3
 8000d54:	2102      	movs	r1, #2
 8000d56:	f7ff fe0d 	bl	8000974 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000d5a:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <get_RXRSR+0x44>)
 8000d5c:	f107 030c 	add.w	r3, r7, #12
 8000d60:	8812      	ldrh	r2, [r2, #0]
 8000d62:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000d64:	7b3b      	ldrb	r3, [r7, #12]
 8000d66:	021b      	lsls	r3, r3, #8
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	7b7b      	ldrb	r3, [r7, #13]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	b29b      	uxth	r3, r3

}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200131d0 	.word	0x200131d0

08000d80 <get_RXRD>:

uint16_t get_RXRD(uint8_t sck_fd)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_RX_RD(sck_fd), 2 );
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	021b      	lsls	r3, r3, #8
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000d96:	3328      	adds	r3, #40	; 0x28
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	2102      	movs	r1, #2
 8000d9e:	f7ff fde9 	bl	8000974 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000da2:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <get_RXRD+0x44>)
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	8812      	ldrh	r2, [r2, #0]
 8000daa:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000dac:	7b3b      	ldrb	r3, [r7, #12]
 8000dae:	021b      	lsls	r3, r3, #8
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	7b7b      	ldrb	r3, [r7, #13]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	b29b      	uxth	r3, r3
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200131d0 	.word	0x200131d0

08000dc8 <set_RXRD>:

void set_RXRD(uint8_t sck_fd, uint16_t val)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4602      	mov	r2, r0
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	71fa      	strb	r2, [r7, #7]
 8000dd4:	80bb      	strh	r3, [r7, #4]
	spi_dma_send2B(W5200_Sn_RX_RD(sck_fd), val);
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	021b      	lsls	r3, r3, #8
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000de2:	3328      	adds	r3, #40	; 0x28
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	88bb      	ldrh	r3, [r7, #4]
 8000de8:	4610      	mov	r0, r2
 8000dea:	4619      	mov	r1, r3
 8000dec:	f7ff fd24 	bl	8000838 <spi_dma_send2B>
}
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop

08000df8 <write_memory>:
/*---------------------------------------------------------------------------
	write data to socket TX memory
----------------------------------------------------------------------------*/

void	write_memory(uint8_t sck_fd, uint16_t write_ptr, uint8_t *buf, uint16_t len)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60ba      	str	r2, [r7, #8]
 8000e00:	4602      	mov	r2, r0
 8000e02:	73fa      	strb	r2, [r7, #15]
 8000e04:	460a      	mov	r2, r1
 8000e06:	81ba      	strh	r2, [r7, #12]
 8000e08:	80fb      	strh	r3, [r7, #6]
	uint16_t	memory_addr, offset;
	uint16_t	upper_size, left_size;

	// calculate offset address 
	offset = write_ptr & 0x07ff;
 8000e0a:	89bb      	ldrh	r3, [r7, #12]
 8000e0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e10:	82fb      	strh	r3, [r7, #22]

	// calculate physical memory start address
	memory_addr = W5200_SOCKET_TX_BASE(sck_fd)  + offset;
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	021b      	lsls	r3, r3, #8
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	8afb      	ldrh	r3, [r7, #22]
 8000e20:	4413      	add	r3, r2
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000e28:	82bb      	strh	r3, [r7, #20]

	// if overflow socket TX memory ?
	if(offset + len > W5200_Sn_TXMEM_SIZE(sck_fd) +1 ){
 8000e2a:	8afa      	ldrh	r2, [r7, #22]
 8000e2c:	88fb      	ldrh	r3, [r7, #6]
 8000e2e:	441a      	add	r2, r3
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	021b      	lsls	r3, r3, #8
 8000e34:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000e38:	3320      	adds	r3, #32
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	dd2a      	ble.n	8000e94 <write_memory+0x9c>

		// copy upper_size bytes
		upper_size = W5200_SOCKET_TX_BASE(sck_fd) - offset;
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	00db      	lsls	r3, r3, #3
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	021b      	lsls	r3, r3, #8
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	8afb      	ldrh	r3, [r7, #22]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000e54:	827b      	strh	r3, [r7, #18]
		spi_dma_send( memory_addr,upper_size, buf);
 8000e56:	8aba      	ldrh	r2, [r7, #20]
 8000e58:	8a7b      	ldrh	r3, [r7, #18]
 8000e5a:	4610      	mov	r0, r2
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	f7ff fc62 	bl	8000728 <spi_dma_send>
		buf += upper_size;
 8000e64:	8a7b      	ldrh	r3, [r7, #18]
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	4413      	add	r3, r2
 8000e6a:	60bb      	str	r3, [r7, #8]

		// copy left size bytes
		left_size = len - upper_size;
 8000e6c:	88fa      	ldrh	r2, [r7, #6]
 8000e6e:	8a7b      	ldrh	r3, [r7, #18]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	823b      	strh	r3, [r7, #16]
		spi_dma_send( W5200_SOCKET_TX_BASE(sck_fd),
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	00db      	lsls	r3, r3, #3
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	021b      	lsls	r3, r3, #8
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	8a3b      	ldrh	r3, [r7, #16]
 8000e88:	4610      	mov	r0, r2
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	68ba      	ldr	r2, [r7, #8]
 8000e8e:	f7ff fc4b 	bl	8000728 <spi_dma_send>
 8000e92:	e006      	b.n	8000ea2 <write_memory+0xaa>
		left_size,  buf);

	}else{

		// copy len size bytes
		spi_dma_send( memory_addr,len,  buf);
 8000e94:	8aba      	ldrh	r2, [r7, #20]
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	4610      	mov	r0, r2
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	68ba      	ldr	r2, [r7, #8]
 8000e9e:	f7ff fc43 	bl	8000728 <spi_dma_send>
	}
}
 8000ea2:	3718      	adds	r7, #24
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <read_memory>:
/*---------------------------------------------------------------------------
	read data from socket RX memory
----------------------------------------------------------------------------*/

void	read_memory(uint8_t sck_fd, uint16_t read_ptr, uint8_t *buf, uint16_t len)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60ba      	str	r2, [r7, #8]
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	73fa      	strb	r2, [r7, #15]
 8000eb4:	460a      	mov	r2, r1
 8000eb6:	81ba      	strh	r2, [r7, #12]
 8000eb8:	80fb      	strh	r3, [r7, #6]
	uint16_t	memory_addr, offset;
	uint16_t	upper_size, left_size;

	// calculate offset address 
	offset = read_ptr & 0x07ff;
 8000eba:	89bb      	ldrh	r3, [r7, #12]
 8000ebc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ec0:	82fb      	strh	r3, [r7, #22]

	// calculate physical memory start address
	memory_addr = W5200_SOCKET_RX_BASE(sck_fd)  + offset;
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	021b      	lsls	r3, r3, #8
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	8afb      	ldrh	r3, [r7, #22]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8000ed8:	82bb      	strh	r3, [r7, #20]

	// if overflow socket RX memory ?
	if(offset + len > 0x0800){
 8000eda:	8afa      	ldrh	r2, [r7, #22]
 8000edc:	88fb      	ldrh	r3, [r7, #6]
 8000ede:	4413      	add	r3, r2
 8000ee0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ee4:	dd2f      	ble.n	8000f46 <read_memory+0x9e>

		// copy upper_size bytes
		upper_size = 0x0800 - offset;
 8000ee6:	8afb      	ldrh	r3, [r7, #22]
 8000ee8:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000eec:	827b      	strh	r3, [r7, #18]
		spi_dma_read( memory_addr,upper_size);
 8000eee:	8aba      	ldrh	r2, [r7, #20]
 8000ef0:	8a7b      	ldrh	r3, [r7, #18]
 8000ef2:	4610      	mov	r0, r2
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f7ff fd3d 	bl	8000974 <spi_dma_read>
		memcpy(buf, bufferRX+4, upper_size);
 8000efa:	8a7b      	ldrh	r3, [r7, #18]
 8000efc:	68b8      	ldr	r0, [r7, #8]
 8000efe:	4919      	ldr	r1, [pc, #100]	; (8000f64 <read_memory+0xbc>)
 8000f00:	461a      	mov	r2, r3
 8000f02:	f7ff f96b 	bl	80001dc <memcpy>

		buf += upper_size;
 8000f06:	8a7b      	ldrh	r3, [r7, #18]
 8000f08:	68ba      	ldr	r2, [r7, #8]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	60bb      	str	r3, [r7, #8]

		// copy left size bytes
		left_size = len - upper_size;
 8000f0e:	88fa      	ldrh	r2, [r7, #6]
 8000f10:	8a7b      	ldrh	r3, [r7, #18]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	823b      	strh	r3, [r7, #16]
		spi_dma_read(W5200_SOCKET_RX_BASE(sck_fd), left_size);
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	021b      	lsls	r3, r3, #8
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	8a3b      	ldrh	r3, [r7, #16]
 8000f2a:	4610      	mov	r0, r2
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f7ff fd21 	bl	8000974 <spi_dma_read>
		memcpy(buf+upper_size, bufferRX+4, left_size);
 8000f32:	8a7b      	ldrh	r3, [r7, #18]
 8000f34:	68ba      	ldr	r2, [r7, #8]
 8000f36:	441a      	add	r2, r3
 8000f38:	8a3b      	ldrh	r3, [r7, #16]
 8000f3a:	4610      	mov	r0, r2
 8000f3c:	4909      	ldr	r1, [pc, #36]	; (8000f64 <read_memory+0xbc>)
 8000f3e:	461a      	mov	r2, r3
 8000f40:	f7ff f94c 	bl	80001dc <memcpy>
 8000f44:	e00b      	b.n	8000f5e <read_memory+0xb6>
	}else{

		// copy len size bytes
		spi_dma_read( memory_addr,len);
 8000f46:	8aba      	ldrh	r2, [r7, #20]
 8000f48:	88fb      	ldrh	r3, [r7, #6]
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f7ff fd11 	bl	8000974 <spi_dma_read>
		memcpy(buf, bufferRX+4, len);
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	68b8      	ldr	r0, [r7, #8]
 8000f56:	4903      	ldr	r1, [pc, #12]	; (8000f64 <read_memory+0xbc>)
 8000f58:	461a      	mov	r2, r3
 8000f5a:	f7ff f93f 	bl	80001dc <memcpy>
	}
}
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	200131d0 	.word	0x200131d0

08000f68 <socket>:
	socket()	create socket, handle open
		ip_proto, RAW mode only.
===========================================================================*/

uint8_t	socket(uint8_t  mode, uint16_t  port, uint8_t ip_proto)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4613      	mov	r3, r2
 8000f70:	4602      	mov	r2, r0
 8000f72:	71fa      	strb	r2, [r7, #7]
 8000f74:	460a      	mov	r2, r1
 8000f76:	80ba      	strh	r2, [r7, #4]
 8000f78:	71bb      	strb	r3, [r7, #6]
	uint8_t	sck_fd;
	uint8_t	stat;

	// check free socket exists? 
	for(sck_fd = 0; sck_fd < W5200_MAX_SOCKETS; sck_fd++){
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	73fb      	strb	r3, [r7, #15]
 8000f7e:	e00c      	b.n	8000f9a <socket+0x32>
		if(socket_flg[sck_fd] == 0){
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	4a4c      	ldr	r2, [pc, #304]	; (80010b4 <socket+0x14c>)
 8000f84:	5cd3      	ldrb	r3, [r2, r3]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d104      	bne.n	8000f94 <socket+0x2c>
			socket_flg[sck_fd] = 1;
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	4a49      	ldr	r2, [pc, #292]	; (80010b4 <socket+0x14c>)
 8000f8e:	2101      	movs	r1, #1
 8000f90:	54d1      	strb	r1, [r2, r3]
			break;
 8000f92:	e005      	b.n	8000fa0 <socket+0x38>
{
	uint8_t	sck_fd;
	uint8_t	stat;

	// check free socket exists? 
	for(sck_fd = 0; sck_fd < W5200_MAX_SOCKETS; sck_fd++){
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	3301      	adds	r3, #1
 8000f98:	73fb      	strb	r3, [r7, #15]
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	2b07      	cmp	r3, #7
 8000f9e:	d9ef      	bls.n	8000f80 <socket+0x18>
		if(socket_flg[sck_fd] == 0){
			socket_flg[sck_fd] = 1;
			break;
		}
	}
	if(sck_fd >= W5200_MAX_SOCKETS) return -1;	// no more sockets.
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	2b07      	cmp	r3, #7
 8000fa4:	d901      	bls.n	8000faa <socket+0x42>
 8000fa6:	23ff      	movs	r3, #255	; 0xff
 8000fa8:	e07f      	b.n	80010aa <socket+0x142>
	// check mode parameter
	if((mode & 0x0f) > W5200_MR_PPPOE_ENABLE) return -1;	// mode error.
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	f003 030f 	and.w	r3, r3, #15
 8000fb0:	2b08      	cmp	r3, #8
 8000fb2:	dd01      	ble.n	8000fb8 <socket+0x50>
 8000fb4:	23ff      	movs	r3, #255	; 0xff
 8000fb6:	e078      	b.n	80010aa <socket+0x142>
	if(((mode & 0x0f) != W5200_Sn_MR_UDP) && (mode & W5200_Sn_MR_MULTI)) return -1; // MULTI is UDP only.
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	f003 030f 	and.w	r3, r3, #15
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d005      	beq.n	8000fce <socket+0x66>
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	b25b      	sxtb	r3, r3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	da01      	bge.n	8000fce <socket+0x66>
 8000fca:	23ff      	movs	r3, #255	; 0xff
 8000fcc:	e06d      	b.n	80010aa <socket+0x142>
	if(((mode & 0x0f) != W5200_Sn_MR_TCP) && (mode & W5200_Sn_MR_ND)) return -1; // ND is TCP only.
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	f003 030f 	and.w	r3, r3, #15
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d006      	beq.n	8000fe6 <socket+0x7e>
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 0320 	and.w	r3, r3, #32
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <socket+0x7e>
 8000fe2:	23ff      	movs	r3, #255	; 0xff
 8000fe4:	e061      	b.n	80010aa <socket+0x142>

	// set MODE register
	spi_dma_sendByte(W5200_Sn_MR(sck_fd) , mode);
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f7ff fc6f 	bl	80008dc <spi_dma_sendByte>
	//socket_mode[sck_fd] = mode & 0x0f;	// omitting ND/MULTICAST
	mode &= 0x0f;
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	f003 030f 	and.w	r3, r3, #15
 8001004:	71fb      	strb	r3, [r7, #7]

	uint8_t prt[2];

	// set PORT, PROTOCOL 
	switch(mode){
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	2b01      	cmp	r3, #1
 800100a:	db29      	blt.n	8001060 <socket+0xf8>
 800100c:	2b02      	cmp	r3, #2
 800100e:	dd02      	ble.n	8001016 <socket+0xae>
 8001010:	2b03      	cmp	r3, #3
 8001012:	d018      	beq.n	8001046 <socket+0xde>
 8001014:	e024      	b.n	8001060 <socket+0xf8>
	case W5200_Sn_MR_TCP:
	case W5200_Sn_MR_UDP:

		// split port for sending on two 8bits
		prt[0] = (port & 0xff00) >> 8;
 8001016:	88bb      	ldrh	r3, [r7, #4]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	b29b      	uxth	r3, r3
 800101c:	b2db      	uxtb	r3, r3
 800101e:	733b      	strb	r3, [r7, #12]
		prt[1] =  (port & 0x00ff);
 8001020:	88bb      	ldrh	r3, [r7, #4]
 8001022:	b2db      	uxtb	r3, r3
 8001024:	737b      	strb	r3, [r7, #13]
		spi_dma_send(W5200_Sn_PORT(sck_fd), 2 , prt);
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	b29b      	uxth	r3, r3
 800102a:	021b      	lsls	r3, r3, #8
 800102c:	b29b      	uxth	r3, r3
 800102e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001032:	3304      	adds	r3, #4
 8001034:	b29a      	uxth	r2, r3
 8001036:	f107 030c 	add.w	r3, r7, #12
 800103a:	4610      	mov	r0, r2
 800103c:	2102      	movs	r1, #2
 800103e:	461a      	mov	r2, r3
 8001040:	f7ff fb72 	bl	8000728 <spi_dma_send>
		
		break;
 8001044:	e00c      	b.n	8001060 <socket+0xf8>
	case W5200_Sn_MR_IPRAW:
		spi_dma_sendByte(W5200_Sn_PROTO(sck_fd), ip_proto);
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	b29b      	uxth	r3, r3
 800104a:	021b      	lsls	r3, r3, #8
 800104c:	b29b      	uxth	r3, r3
 800104e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001052:	3314      	adds	r3, #20
 8001054:	b29a      	uxth	r2, r3
 8001056:	79bb      	ldrb	r3, [r7, #6]
 8001058:	4610      	mov	r0, r2
 800105a:	4619      	mov	r1, r3
 800105c:	f7ff fc3e 	bl	80008dc <spi_dma_sendByte>
	}

	// execute socket open
	spi_dma_sendByte(W5200_Sn_CR(sck_fd), W5200_Sn_CR_OPEN);
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	b29b      	uxth	r3, r3
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	b29b      	uxth	r3, r3
 8001068:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800106c:	3301      	adds	r3, #1
 800106e:	b29b      	uxth	r3, r3
 8001070:	4618      	mov	r0, r3
 8001072:	2101      	movs	r1, #1
 8001074:	f7ff fc32 	bl	80008dc <spi_dma_sendByte>
	// wait command complete.
	while(get_CRStatus(sck_fd)  != 0);	// 0 value is command complete. 
 8001078:	bf00      	nop
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fd9f 	bl	8000bc0 <get_CRStatus>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1f8      	bne.n	800107a <socket+0x112>

	// check status
	if(stat = get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_INIT) return -1;
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fdb4 	bl	8000bf8 <get_SRStatus>
 8001090:	4603      	mov	r3, r0
 8001092:	2b13      	cmp	r3, #19
 8001094:	bf0c      	ite	eq
 8001096:	2300      	moveq	r3, #0
 8001098:	2301      	movne	r3, #1
 800109a:	b2db      	uxtb	r3, r3
 800109c:	73bb      	strb	r3, [r7, #14]
 800109e:	7bbb      	ldrb	r3, [r7, #14]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <socket+0x140>
 80010a4:	23ff      	movs	r3, #255	; 0xff
 80010a6:	e000      	b.n	80010aa <socket+0x142>

	// success return
	return sck_fd;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000468 	.word	0x20000468

080010b8 <closesocket>:
/*==========================================================================
	closesocket()	socket handle close
===========================================================================*/

int	closesocket(int sck_fd)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	// check asign flag
	if(sck_fd < 0 || sck_fd >=W5200_MAX_SOCKETS||  socket_flg[sck_fd] != 1) return -1;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	db08      	blt.n	80010d8 <closesocket+0x20>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b07      	cmp	r3, #7
 80010ca:	dc05      	bgt.n	80010d8 <closesocket+0x20>
 80010cc:	4a18      	ldr	r2, [pc, #96]	; (8001130 <closesocket+0x78>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d002      	beq.n	80010de <closesocket+0x26>
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010dc:	e023      	b.n	8001126 <closesocket+0x6e>

	// release socket
	socket_flg[sck_fd] = 0;
 80010de:	4a14      	ldr	r2, [pc, #80]	; (8001130 <closesocket+0x78>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4413      	add	r3, r2
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]
	
	// execute socket close
	spi_dma_sendByte(W5200_Sn_CR(sck_fd), W5200_Sn_CR_CLOSE);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80010f4:	3301      	adds	r3, #1
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	4618      	mov	r0, r3
 80010fa:	2110      	movs	r1, #16
 80010fc:	f7ff fbee 	bl	80008dc <spi_dma_sendByte>
	// wait command complete.
	while(get_CRStatus(sck_fd)  != 0);	// 0 value is command complete. 
 8001100:	bf00      	nop
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fd5a 	bl	8000bc0 <get_CRStatus>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1f7      	bne.n	8001102 <closesocket+0x4a>

	// check status
	while( get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_CLOSED);
 8001112:	bf00      	nop
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	b2db      	uxtb	r3, r3
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fd6d 	bl	8000bf8 <get_SRStatus>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1f7      	bne.n	8001114 <closesocket+0x5c>

	// close success
	return 0;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000468 	.word	0x20000468

08001134 <send>:
/*==========================================================================
	send()	send *buf to  (TCP only)
===========================================================================*/

int	send(uint8_t sck_fd, uint8_t *buf, uint16_t len, uint16_t flag)
{
 8001134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001138:	b08b      	sub	sp, #44	; 0x2c
 800113a:	af00      	add	r7, sp, #0
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	4601      	mov	r1, r0
 8001140:	73f9      	strb	r1, [r7, #15]
 8001142:	81ba      	strh	r2, [r7, #12]
 8001144:	80fb      	strh	r3, [r7, #6]
	uint16_t	send_size;
	uint16_t	write_ptr;
	uint16_t status = get_SRStatus(sck_fd);
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fd55 	bl	8000bf8 <get_SRStatus>
 800114e:	4603      	mov	r3, r0
 8001150:	84bb      	strh	r3, [r7, #36]	; 0x24
	// check socket asign flag
	if(sck_fd < 0 || sck_fd >= W5200_MAX_SOCKETS ||  socket_flg[sck_fd] != 1) return -1;
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	2b07      	cmp	r3, #7
 8001156:	d804      	bhi.n	8001162 <send+0x2e>
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	4a56      	ldr	r2, [pc, #344]	; (80012b4 <send+0x180>)
 800115c:	5cd3      	ldrb	r3, [r2, r3]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d002      	beq.n	8001168 <send+0x34>
 8001162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001166:	e0a0      	b.n	80012aa <send+0x176>

	// check parameter
	if(buf == NULL || len == 0) return -1;
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d002      	beq.n	8001174 <send+0x40>
 800116e:	89bb      	ldrh	r3, [r7, #12]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d102      	bne.n	800117a <send+0x46>
 8001174:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001178:	e097      	b.n	80012aa <send+0x176>
	
	// check status
	if(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_ESTABLISHED) return 0; // closing or fin close wait.
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fd3b 	bl	8000bf8 <get_SRStatus>
 8001182:	4603      	mov	r3, r0
 8001184:	2b17      	cmp	r3, #23
 8001186:	d001      	beq.n	800118c <send+0x58>
 8001188:	2300      	movs	r3, #0
 800118a:	e08e      	b.n	80012aa <send+0x176>

	// check TX memory free size?
	while((send_size = get_TXFSRStatus(sck_fd)) == 0){
 800118c:	e004      	b.n	8001198 <send+0x64>
		if(flag == 1) return 0;	// NONE BLOCKING
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d101      	bne.n	8001198 <send+0x64>
 8001194:	2300      	movs	r3, #0
 8001196:	e088      	b.n	80012aa <send+0x176>
	
	// check status
	if(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_ESTABLISHED) return 0; // closing or fin close wait.

	// check TX memory free size?
	while((send_size = get_TXFSRStatus(sck_fd)) == 0){
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fd48 	bl	8000c30 <get_TXFSRStatus>
 80011a0:	4603      	mov	r3, r0
 80011a2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80011a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d0f1      	beq.n	800118e <send+0x5a>
		if(flag == 1) return 0;	// NONE BLOCKING
	}

	// get write pointer
	write_ptr = get_TXWRStatus(sck_fd);
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fd63 	bl	8000c78 <get_TXWRStatus>
 80011b2:	4603      	mov	r3, r0
 80011b4:	847b      	strh	r3, [r7, #34]	; 0x22

	// check write length
	if(send_size > len) send_size = len;
 80011b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80011b8:	89bb      	ldrh	r3, [r7, #12]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d901      	bls.n	80011c2 <send+0x8e>
 80011be:	89bb      	ldrh	r3, [r7, #12]
 80011c0:	84fb      	strh	r3, [r7, #38]	; 0x26

	// data write to memory
	write_memory(sck_fd, write_ptr, buf, send_size);
 80011c2:	7bf9      	ldrb	r1, [r7, #15]
 80011c4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80011c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011c8:	4608      	mov	r0, r1
 80011ca:	4611      	mov	r1, r2
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	f7ff fe13 	bl	8000df8 <write_memory>

	// pointer update
	write_ptr += send_size;
 80011d2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80011d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011d6:	4413      	add	r3, r2
 80011d8:	847b      	strh	r3, [r7, #34]	; 0x22
	set_TXWR(sck_fd, write_ptr);
 80011da:	7bfa      	ldrb	r2, [r7, #15]
 80011dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80011de:	4610      	mov	r0, r2
 80011e0:	4619      	mov	r1, r3
 80011e2:	f7ff fd91 	bl	8000d08 <set_TXWR>
		
	// test function 
	

	uint16_t start = get_TXRD(sck_fd);
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fd69 	bl	8000cc0 <get_TXRD>
 80011ee:	4603      	mov	r3, r0
 80011f0:	843b      	strh	r3, [r7, #32]
	uint16_t end   = get_TXWRStatus(sck_fd); 
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fd3f 	bl	8000c78 <get_TXWRStatus>
 80011fa:	4603      	mov	r3, r0
 80011fc:	83fb      	strh	r3, [r7, #30]
	uint8_t data [write_ptr-start]; 	
 80011fe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001200:	8c3b      	ldrh	r3, [r7, #32]
 8001202:	1ad1      	subs	r1, r2, r3
 8001204:	466b      	mov	r3, sp
 8001206:	461e      	mov	r6, r3
 8001208:	1e4b      	subs	r3, r1, #1
 800120a:	61bb      	str	r3, [r7, #24]
 800120c:	460b      	mov	r3, r1
 800120e:	461a      	mov	r2, r3
 8001210:	f04f 0300 	mov.w	r3, #0
 8001214:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8001218:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 800121c:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8001220:	460b      	mov	r3, r1
 8001222:	461a      	mov	r2, r3
 8001224:	f04f 0300 	mov.w	r3, #0
 8001228:	00dd      	lsls	r5, r3, #3
 800122a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800122e:	00d4      	lsls	r4, r2, #3
 8001230:	460b      	mov	r3, r1
 8001232:	3307      	adds	r3, #7
 8001234:	08db      	lsrs	r3, r3, #3
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	ebad 0d03 	sub.w	sp, sp, r3
 800123c:	466b      	mov	r3, sp
 800123e:	3300      	adds	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
	spi_dma_read(start+0x8000, write_ptr-start );
 8001242:	8c3b      	ldrh	r3, [r7, #32]
 8001244:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001248:	b29a      	uxth	r2, r3
 800124a:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800124c:	8c3b      	ldrh	r3, [r7, #32]
 800124e:	1acb      	subs	r3, r1, r3
 8001250:	b29b      	uxth	r3, r3
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	f7ff fb8d 	bl	8000974 <spi_dma_read>
	memcpy(data, bufferRX +4, write_ptr-start);
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800125e:	8c3b      	ldrh	r3, [r7, #32]
 8001260:	1acb      	subs	r3, r1, r3
 8001262:	4610      	mov	r0, r2
 8001264:	4914      	ldr	r1, [pc, #80]	; (80012b8 <send+0x184>)
 8001266:	461a      	mov	r2, r3
 8001268:	f7fe ffb8 	bl	80001dc <memcpy>

	
	// test function 
	
	// send command
	spi_dma_sendByte(W5200_Sn_CR(sck_fd), W5200_Sn_CR_SEND);
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	b29b      	uxth	r3, r3
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	b29b      	uxth	r3, r3
 8001274:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001278:	3301      	adds	r3, #1
 800127a:	b29b      	uxth	r3, r3
 800127c:	4618      	mov	r0, r3
 800127e:	2120      	movs	r1, #32
 8001280:	f7ff fb2c 	bl	80008dc <spi_dma_sendByte>
	// wait command complete.
	while(get_CRStatus(sck_fd) != 0);	// 0 value is command complete. 
 8001284:	bf00      	nop
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fc99 	bl	8000bc0 <get_CRStatus>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1f8      	bne.n	8001286 <send+0x152>

	// wait sending complete
	while(get_TXRD(sck_fd) != write_ptr);
 8001294:	bf00      	nop
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fd11 	bl	8000cc0 <get_TXRD>
 800129e:	4603      	mov	r3, r0
 80012a0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d1f7      	bne.n	8001296 <send+0x162>

	return send_size;
 80012a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012a8:	46b5      	mov	sp, r6
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	372c      	adds	r7, #44	; 0x2c
 80012ae:	46bd      	mov	sp, r7
 80012b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012b4:	20000468 	.word	0x20000468
 80012b8:	200131d0 	.word	0x200131d0

080012bc <recv>:
	return code is received data size.
	if received disconnect@from peer, size was set to Zero, 
===========================================================================*/

int	recv(uint8_t sck_fd, uint8_t *buf, uint16_t len, uint8_t flag)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6039      	str	r1, [r7, #0]
 80012c4:	4601      	mov	r1, r0
 80012c6:	71f9      	strb	r1, [r7, #7]
 80012c8:	80ba      	strh	r2, [r7, #4]
 80012ca:	71bb      	strb	r3, [r7, #6]
	uint16_t	read_len;
	uint16_t	read_ptr;

	// check asign flag
	if(sck_fd < 0 || sck_fd >= W5200_MAX_SOCKETS ||  socket_flg[sck_fd] != 1) return -1;
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	2b07      	cmp	r3, #7
 80012d0:	d804      	bhi.n	80012dc <recv+0x20>
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	4a31      	ldr	r2, [pc, #196]	; (800139c <recv+0xe0>)
 80012d6:	5cd3      	ldrb	r3, [r2, r3]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d002      	beq.n	80012e2 <recv+0x26>
 80012dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012e0:	e057      	b.n	8001392 <recv+0xd6>

	// check parameter
	if(buf == NULL || len == 0) return -1;
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d002      	beq.n	80012ee <recv+0x32>
 80012e8:	88bb      	ldrh	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d102      	bne.n	80012f4 <recv+0x38>
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012f2:	e04e      	b.n	8001392 <recv+0xd6>

	// check status
	if(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_ESTABLISHED) return 0;	// closing or fin close wait.
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fc7e 	bl	8000bf8 <get_SRStatus>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b17      	cmp	r3, #23
 8001300:	d001      	beq.n	8001306 <recv+0x4a>
 8001302:	2300      	movs	r3, #0
 8001304:	e045      	b.n	8001392 <recv+0xd6>

	// received data exists?
	while((read_len = get_RXRSR(sck_fd)) == 0){
 8001306:	e004      	b.n	8001312 <recv+0x56>
		if(flag == 1) return 0;	// NONE BLOCKING
 8001308:	79bb      	ldrb	r3, [r7, #6]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d101      	bne.n	8001312 <recv+0x56>
 800130e:	2300      	movs	r3, #0
 8001310:	e03f      	b.n	8001392 <recv+0xd6>

	// check status
	if(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_ESTABLISHED) return 0;	// closing or fin close wait.

	// received data exists?
	while((read_len = get_RXRSR(sck_fd)) == 0){
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fd0f 	bl	8000d38 <get_RXRSR>
 800131a:	4603      	mov	r3, r0
 800131c:	81fb      	strh	r3, [r7, #14]
 800131e:	89fb      	ldrh	r3, [r7, #14]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0f1      	beq.n	8001308 <recv+0x4c>

	// set read length
	//if(read_len > len) read_len = len;

	// get read pointer
	read_ptr = get_RXRD(sck_fd);
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fd2a 	bl	8000d80 <get_RXRD>
 800132c:	4603      	mov	r3, r0
 800132e:	81bb      	strh	r3, [r7, #12]

	// read from RX memory
	read_memory(sck_fd, read_ptr, buf, read_len < len ? read_len: len);
 8001330:	88ba      	ldrh	r2, [r7, #4]
 8001332:	89fb      	ldrh	r3, [r7, #14]
 8001334:	429a      	cmp	r2, r3
 8001336:	bf38      	it	cc
 8001338:	4613      	movcc	r3, r2
 800133a:	b29b      	uxth	r3, r3
 800133c:	79f9      	ldrb	r1, [r7, #7]
 800133e:	89ba      	ldrh	r2, [r7, #12]
 8001340:	4608      	mov	r0, r1
 8001342:	4611      	mov	r1, r2
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	f7ff fdaf 	bl	8000ea8 <read_memory>

	// update pointer
	read_ptr += read_len;
 800134a:	89ba      	ldrh	r2, [r7, #12]
 800134c:	89fb      	ldrh	r3, [r7, #14]
 800134e:	4413      	add	r3, r2
 8001350:	81bb      	strh	r3, [r7, #12]
	set_RXRD(sck_fd, read_ptr);
 8001352:	79fa      	ldrb	r2, [r7, #7]
 8001354:	89bb      	ldrh	r3, [r7, #12]
 8001356:	4610      	mov	r0, r2
 8001358:	4619      	mov	r1, r3
 800135a:	f7ff fd35 	bl	8000dc8 <set_RXRD>

	// recive command
	spi_dma_sendByte(W5200_Sn_CR(sck_fd), W5200_Sn_CR_RECV);
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	b29b      	uxth	r3, r3
 8001362:	021b      	lsls	r3, r3, #8
 8001364:	b29b      	uxth	r3, r3
 8001366:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800136a:	3301      	adds	r3, #1
 800136c:	b29b      	uxth	r3, r3
 800136e:	4618      	mov	r0, r3
 8001370:	2140      	movs	r1, #64	; 0x40
 8001372:	f7ff fab3 	bl	80008dc <spi_dma_sendByte>
	// wait command complete.
	while(get_CRStatus(sck_fd) != 0);	// 0 value is command complete. 
 8001376:	bf00      	nop
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fc20 	bl	8000bc0 <get_CRStatus>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1f8      	bne.n	8001378 <recv+0xbc>
	

 	return	(read_len < len ? read_len: len);
 8001386:	88ba      	ldrh	r2, [r7, #4]
 8001388:	89fb      	ldrh	r3, [r7, #14]
 800138a:	429a      	cmp	r2, r3
 800138c:	bf38      	it	cc
 800138e:	4613      	movcc	r3, r2
 8001390:	b29b      	uxth	r3, r3
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000468 	.word	0x20000468

080013a0 <listen>:


int	listen(int sck_fd)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	// check socket asign flag
	if(sck_fd < 0 || sck_fd >=W5200_MAX_SOCKETS||  socket_flg[sck_fd] != 1) return -1;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	db08      	blt.n	80013c0 <listen+0x20>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b07      	cmp	r3, #7
 80013b2:	dc05      	bgt.n	80013c0 <listen+0x20>
 80013b4:	4a22      	ldr	r2, [pc, #136]	; (8001440 <listen+0xa0>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d002      	beq.n	80013c6 <listen+0x26>
 80013c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013c4:	e038      	b.n	8001438 <listen+0x98>

	// LISTEN start from INIT only.
	if(get_SRStatus(sck_fd)  != W5200_Sn_SR_SOCK_INIT) return -1;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fc14 	bl	8000bf8 <get_SRStatus>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b13      	cmp	r3, #19
 80013d4:	d002      	beq.n	80013dc <listen+0x3c>
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013da:	e02d      	b.n	8001438 <listen+0x98>


	uint8_t b;
	spi_dma_read(W5200_Sn_IR(sck_fd), 1);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	b29b      	uxth	r3, r3
 80013e0:	021b      	lsls	r3, r3, #8
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80013e8:	3302      	adds	r3, #2
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	4618      	mov	r0, r3
 80013ee:	2101      	movs	r1, #1
 80013f0:	f7ff fac0 	bl	8000974 <spi_dma_read>
	memcpy(&b, bufferRX + 4, 1);
 80013f4:	4b13      	ldr	r3, [pc, #76]	; (8001444 <listen+0xa4>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	73fb      	strb	r3, [r7, #15]

	// CONNECT command
	spi_dma_sendByte(W5200_Sn_CR(sck_fd), W5200_Sn_CR_LISTEN);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	b29b      	uxth	r3, r3
 8001402:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001406:	3301      	adds	r3, #1
 8001408:	b29b      	uxth	r3, r3
 800140a:	4618      	mov	r0, r3
 800140c:	2102      	movs	r1, #2
 800140e:	f7ff fa65 	bl	80008dc <spi_dma_sendByte>
	while(get_CRStatus(sck_fd) != 0);	// 0 value is command complete. 
 8001412:	bf00      	nop
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	b2db      	uxtb	r3, r3
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fbd1 	bl	8000bc0 <get_CRStatus>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1f7      	bne.n	8001414 <listen+0x74>

	// wait for status change to LISTEN
	while(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_LISTEN);
 8001424:	bf00      	nop
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fbe4 	bl	8000bf8 <get_SRStatus>
 8001430:	4603      	mov	r3, r0
 8001432:	2b14      	cmp	r3, #20
 8001434:	d1f7      	bne.n	8001426 <listen+0x86>
	 
	return 0;	// listen success complete
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000468 	.word	0x20000468
 8001444:	200131d0 	.word	0x200131d0

08001448 <locate_interrupt>:



void locate_interrupt()
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
	uint8_t code = 0x4; 
 800144e:	2304      	movs	r3, #4
 8001450:	71fb      	strb	r3, [r7, #7]
	spi_dma_read(W5200_IMR2, 1);
 8001452:	2036      	movs	r0, #54	; 0x36
 8001454:	2101      	movs	r1, #1
 8001456:	f7ff fa8d 	bl	8000974 <spi_dma_read>
	memcpy(&code, bufferRX + 4, 1);
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <locate_interrupt+0x68>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	71fb      	strb	r3, [r7, #7]
	spi_dma_read(W5200_Sn_IR(code), 1);
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	b29b      	uxth	r3, r3
 8001466:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800146a:	3302      	adds	r3, #2
 800146c:	b29b      	uxth	r3, r3
 800146e:	4618      	mov	r0, r3
 8001470:	2101      	movs	r1, #1
 8001472:	f7ff fa7f 	bl	8000974 <spi_dma_read>
	memcpy(&code, bufferRX +4 , 1);
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <locate_interrupt+0x68>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	71fb      	strb	r3, [r7, #7]
       
	
	spi_dma_sendByte(W5200_Sn_IR(0x0), 0xff);
 800147c:	f244 0002 	movw	r0, #16386	; 0x4002
 8001480:	21ff      	movs	r1, #255	; 0xff
 8001482:	f7ff fa2b 	bl	80008dc <spi_dma_sendByte>
	switch (code )
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	2b02      	cmp	r3, #2
 800148a:	d00a      	beq.n	80014a2 <locate_interrupt+0x5a>
 800148c:	2b04      	cmp	r3, #4
 800148e:	d002      	beq.n	8001496 <locate_interrupt+0x4e>
 8001490:	2b01      	cmp	r3, #1
 8001492:	d008      	beq.n	80014a6 <locate_interrupt+0x5e>
			break;
		case 0x4:
			vTaskResume(set_macTaskHandle); 
			break;
		default:
			break;		
 8001494:	e008      	b.n	80014a8 <locate_interrupt+0x60>
			// do nothing wait for input. 
			break;
		case 0x2:
			break;
		case 0x4:
			vTaskResume(set_macTaskHandle); 
 8001496:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <locate_interrupt+0x6c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f000 fc16 	bl	8001ccc <vTaskResume>
			break;
 80014a0:	e002      	b.n	80014a8 <locate_interrupt+0x60>
		case 0x1: 
			// connection established 
			// do nothing wait for input. 
			break;
		case 0x2:
			break;
 80014a2:	bf00      	nop
 80014a4:	e000      	b.n	80014a8 <locate_interrupt+0x60>
	switch (code )
	{
		case 0x1: 
			// connection established 
			// do nothing wait for input. 
			break;
 80014a6:	bf00      	nop
			vTaskResume(set_macTaskHandle); 
			break;
		default:
			break;		
	}
}
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200131d0 	.word	0x200131d0
 80014b4:	200131c4 	.word	0x200131c4

080014b8 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void) //EXTI0 ISR
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
 
	if(EXTI_GetITStatus(EXTI_Line0) != RESET) //check if EXTI line is asserted
 80014bc:	2001      	movs	r0, #1
 80014be:	f003 fbc1 	bl	8004c44 <EXTI_GetITStatus>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d004      	beq.n	80014d2 <EXTI0_IRQHandler+0x1a>
	{
	 	EXTI_ClearFlag(EXTI_Line0); //clear interrupt
 80014c8:	2001      	movs	r0, #1
 80014ca:	f003 fba1 	bl	8004c10 <EXTI_ClearFlag>
 		locate_interrupt();
 80014ce:	f7ff ffbb 	bl	8001448 <locate_interrupt>
	}
}
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <NVIC_SetPendingIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the interrupt for set pending
 */
static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <NVIC_SetPendingIRQ+0x30>)
 80014e0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80014e4:	0952      	lsrs	r2, r2, #5
 80014e6:	79f9      	ldrb	r1, [r7, #7]
 80014e8:	f001 011f 	and.w	r1, r1, #31
 80014ec:	2001      	movs	r0, #1
 80014ee:	fa00 f101 	lsl.w	r1, r0, r1
 80014f2:	3240      	adds	r2, #64	; 0x40
 80014f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000e100 	.word	0xe000e100

08001508 <main>:
volatile unsigned long ulButtonPressCounts = 0UL;

/*-----------------------------------------------------------*/

int main(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af04      	add	r7, sp, #16
	/* Configure the hardware ready to run the test. */
	prvSetupHardware();
 800150e:	f000 f8d9 	bl	80016c4 <prvSetupHardware>
	more information. */
	//vStartLEDFlashTasks( mainFLASH_TASK_PRIORITY );


	/*------------------added by Matic Knap 24 Jun 2014 ---------------------------------*/
	xTaskCreate(set_macTask, "SETMAC", configMINIMAL_STACK_SIZE, NULL, mainFLASH_TASK_PRIORITY, &set_macTaskHandle);
 8001512:	2301      	movs	r3, #1
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	4b07      	ldr	r3, [pc, #28]	; (8001534 <main+0x2c>)
 8001518:	9301      	str	r3, [sp, #4]
 800151a:	2300      	movs	r3, #0
 800151c:	9302      	str	r3, [sp, #8]
 800151e:	2300      	movs	r3, #0
 8001520:	9303      	str	r3, [sp, #12]
 8001522:	4805      	ldr	r0, [pc, #20]	; (8001538 <main+0x30>)
 8001524:	4905      	ldr	r1, [pc, #20]	; (800153c <main+0x34>)
 8001526:	2282      	movs	r2, #130	; 0x82
 8001528:	2300      	movs	r3, #0
 800152a:	f000 fa49 	bl	80019c0 <xTaskGenericCreate>
	mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY is set to 0 (at the top of this
	file).  See the comments at the top of this file for more information. */
	//prvOptionallyCreateComprehensveTestApplication();

	/* Start the scheduler. */
	vTaskStartScheduler();
 800152e:	f000 fc1b 	bl	8001d68 <vTaskStartScheduler>
	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details. */
	for( ;; );
 8001532:	e7fe      	b.n	8001532 <main+0x2a>
 8001534:	200131c4 	.word	0x200131c4
 8001538:	08001541 	.word	0x08001541
 800153c:	08005b44 	.word	0x08005b44

08001540 <set_macTask>:

/*------added by Matic Knap 24 Jun 2014 ----------------------*/
	

void set_macTask(void *pvParameters)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b0a8      	sub	sp, #160	; 0xa0
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

	uint8_t address[6] = {0xdd, 0xaa, 0xbb, 0xcc, 0x11, 0x22}; 
 8001548:	4a55      	ldr	r2, [pc, #340]	; (80016a0 <set_macTask+0x160>)
 800154a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800154e:	6810      	ldr	r0, [r2, #0]
 8001550:	6018      	str	r0, [r3, #0]
 8001552:	8892      	ldrh	r2, [r2, #4]
 8001554:	809a      	strh	r2, [r3, #4]
	const  uint8_t ip[4] = {0xc0, 0xa8, 0x0, 0x08};
 8001556:	4a53      	ldr	r2, [pc, #332]	; (80016a4 <set_macTask+0x164>)
 8001558:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800155c:	6810      	ldr	r0, [r2, #0]
 800155e:	6018      	str	r0, [r3, #0]
	const uint8_t subnet[4] = {0xff,0xff,0xff,0x0};
 8001560:	4a51      	ldr	r2, [pc, #324]	; (80016a8 <set_macTask+0x168>)
 8001562:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001566:	6810      	ldr	r0, [r2, #0]
 8001568:	6018      	str	r0, [r3, #0]
	const uint8_t gw[4] = {0xc0, 0xa8, 0x0, 0x01};
 800156a:	4a50      	ldr	r2, [pc, #320]	; (80016ac <set_macTask+0x16c>)
 800156c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001570:	6810      	ldr	r0, [r2, #0]
 8001572:	6018      	str	r0, [r3, #0]

	 const portTickType xFrequency = 1;
 8001574:	2301      	movs	r3, #1
 8001576:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	portTickType xLastWakeTime;
     // Initialise the xLastWakeTime variable with the current time.
//    	xSemaphoreDMASPI = xSemaphoreCreateMutex();		
	xSemaphoreDMASPI = xSemaphoreCreateBinary();
 800157a:	2001      	movs	r0, #1
 800157c:	2100      	movs	r1, #0
 800157e:	2203      	movs	r2, #3
 8001580:	f001 f9b8 	bl	80028f4 <xQueueGenericCreate>
 8001584:	4602      	mov	r2, r0
 8001586:	4b4a      	ldr	r3, [pc, #296]	; (80016b0 <set_macTask+0x170>)
 8001588:	601a      	str	r2, [r3, #0]

	wiznet_initialize();	
 800158a:	f7ff fa79 	bl	8000a80 <wiznet_initialize>
	xLastWakeTime = xTaskGetTickCount();
 800158e:	f000 fcb7 	bl	8001f00 <xTaskGetTickCount>
 8001592:	4603      	mov	r3, r0
 8001594:	67bb      	str	r3, [r7, #120]	; 0x78
	vTaskDelayUntil(&xLastWakeTime, 500/portTICK_RATE_MS );		
 8001596:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800159a:	4618      	mov	r0, r3
 800159c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80015a0:	f000 fac2 	bl	8001b28 <vTaskDelayUntil>
	wiznet_configure_network(ip, subnet, gw);
 80015a4:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80015a8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80015ac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015b0:	4608      	mov	r0, r1
 80015b2:	4611      	mov	r1, r2
 80015b4:	461a      	mov	r2, r3
 80015b6:	f7ff fad9 	bl	8000b6c <wiznet_configure_network>
	wiznet_set_hardware_address(address);
 80015ba:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fab6 	bl	8000b30 <wiznet_set_hardware_address>
	
	/* dma testing */
	
	uint8_t var[6];
	wiznet_get_hardware_address(var);
 80015c4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fabd 	bl	8000b48 <wiznet_get_hardware_address>
	wiznet_get_ipaddress(var);
 80015ce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fae2 	bl	8000b9c <wiznet_get_ipaddress>
	
	uint16_t v;
	spi_dma_read(0x0017, 2 );
 80015d8:	2017      	movs	r0, #23
 80015da:	2102      	movs	r1, #2
 80015dc:	f7ff f9ca 	bl	8000974 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 80015e0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015e4:	4618      	mov	r0, r3
 80015e6:	4933      	ldr	r1, [pc, #204]	; (80016b4 <set_macTask+0x174>)
 80015e8:	2202      	movs	r2, #2
 80015ea:	f7fe fdf7 	bl	80001dc <memcpy>
	
	v = ((var[0] << 8) | var[1] );
 80015ee:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80015fa:	4313      	orrs	r3, r2
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	uint8_t vi;
	spi_dma_read(0x0017, 1 );
 8001602:	2017      	movs	r0, #23
 8001604:	2101      	movs	r1, #1
 8001606:	f7ff f9b5 	bl	8000974 <spi_dma_read>
	memcpy(&vi, bufferRX+4, 1);
 800160a:	4b2a      	ldr	r3, [pc, #168]	; (80016b4 <set_macTask+0x174>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
//	wiznet_initialize();
//	vTaskDelayUntil(&xLastWakeTime, 500/portTICK_RATE_MS );		
	
	/*create socket and send byte */
	uint8_t s;
	s = socket(W5200_Sn_MR_TCP, 80, 0);
 8001612:	2001      	movs	r0, #1
 8001614:	2150      	movs	r1, #80	; 0x50
 8001616:	2200      	movs	r2, #0
 8001618:	f7ff fca6 	bl	8000f68 <socket>
 800161c:	4603      	mov	r3, r0
 800161e:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
	uint8_t buf [100];//= "Hello my name is Dummy Server!"; 
	listen(s);
 8001622:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff feba 	bl	80013a0 <listen>
	int len;
	for( ;; )
        {
		/*we are now listening
		suspend task set_macTask()*/
		vTaskSuspend(set_macTaskHandle);
 800162c:	4b22      	ldr	r3, [pc, #136]	; (80016b8 <set_macTask+0x178>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f000 fad1 	bl	8001bd8 <vTaskSuspend>
		len = recv(s, buf, 100, 0);
 8001636:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 800163a:	f107 0308 	add.w	r3, r7, #8
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	2264      	movs	r2, #100	; 0x64
 8001644:	2300      	movs	r3, #0
 8001646:	f7ff fe39 	bl	80012bc <recv>
 800164a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
		
		if ( !strncmp(buf, "quit", 4))
 800164e:	f107 0308 	add.w	r3, r7, #8
 8001652:	4618      	mov	r0, r3
 8001654:	4919      	ldr	r1, [pc, #100]	; (80016bc <set_macTask+0x17c>)
 8001656:	2204      	movs	r2, #4
 8001658:	f004 f99e 	bl	8005998 <strncmp>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d110      	bne.n	8001684 <set_macTask+0x144>
		{
			uint8_t * r = "Bye\n"; 
 8001662:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <set_macTask+0x180>)
 8001664:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			send(s, r, 4,0);
 8001668:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 800166c:	4618      	mov	r0, r3
 800166e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001672:	2204      	movs	r2, #4
 8001674:	2300      	movs	r3, #0
 8001676:	f7ff fd5d 	bl	8001134 <send>
			closesocket(s);
 800167a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fd1a 	bl	80010b8 <closesocket>
		} 
		send(s, buf, len, 0);
 8001684:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001688:	b29b      	uxth	r3, r3
 800168a:	f897 1099 	ldrb.w	r1, [r7, #153]	; 0x99
 800168e:	f107 0208 	add.w	r2, r7, #8
 8001692:	4608      	mov	r0, r1
 8001694:	4611      	mov	r1, r2
 8001696:	461a      	mov	r2, r3
 8001698:	2300      	movs	r3, #0
 800169a:	f7ff fd4b 	bl	8001134 <send>
	
	}	
 800169e:	e7c5      	b.n	800162c <set_macTask+0xec>
 80016a0:	08005b5c 	.word	0x08005b5c
 80016a4:	08005b64 	.word	0x08005b64
 80016a8:	08005b68 	.word	0x08005b68
 80016ac:	08005b6c 	.word	0x08005b6c
 80016b0:	200131c0 	.word	0x200131c0
 80016b4:	200131d0 	.word	0x200131d0
 80016b8:	200131c4 	.word	0x200131c4
 80016bc:	08005b4c 	.word	0x08005b4c
 80016c0:	08005b54 	.word	0x08005b54

080016c4 <prvSetupHardware>:
	}
}
/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	/* Setup STM32 system (clock, PLL and Flash configuration) */
	SystemInit();
 80016c8:	f000 f8cc 	bl	8001864 <SystemInit>

	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 80016cc:	f44f 7040 	mov.w	r0, #768	; 0x300
 80016d0:	f002 f9aa 	bl	8003a28 <NVIC_PriorityGroupConfig>
	
	init_SPI1();	
 80016d4:	f7fe fe1c 	bl	8000310 <init_SPI1>
	/* Setup the LED outputs. */
	vParTestInitialise();
 80016d8:	f000 f882 	bl	80017e0 <vParTestInitialise>

	/* Configure the button input.  This configures the interrupt to use the
	lowest interrupt priority, so it is ok to use the ISR safe FreeRTOS API
	from the button interrupt handler. */
	//STM_EVAL_PBInit( BUTTON_USER, BUTTON_MODE_EXTI );
}
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop

080016e0 <vApplicationTickHook>:
/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	#if ( mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY == 0 )
	{
		/* Just to verify that the interrupt nesting behaves as expected,
		increment ulFPUInterruptNesting on entry, and decrement it on exit. */
		ulFPUInterruptNesting++;
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <vApplicationTickHook+0x20>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	1c5a      	adds	r2, r3, #1
 80016ea:	4b05      	ldr	r3, [pc, #20]	; (8001700 <vApplicationTickHook+0x20>)
 80016ec:	601a      	str	r2, [r3, #0]

		/* Trigger a timer 2 interrupt, which will fill the registers with a
		different value and itself trigger a timer 3 interrupt.  Note that the
		timers are not actually used.  The timer 2 and 3 interrupt vectors are
		just used for convenience. */
		NVIC_SetPendingIRQ( TIM2_IRQn );
 80016ee:	201c      	movs	r0, #28
 80016f0:	f7ff fef0 	bl	80014d4 <NVIC_SetPendingIRQ>
		/* Ensure that, after returning from the nested interrupts, all the FPU
		registers contain the value to which they were set by the tick hook
		function. */
		//configASSERT( ulRegTestCheckFlopRegistersContainParameterValue( 0UL ) );

		ulFPUInterruptNesting--;
 80016f4:	4b02      	ldr	r3, [pc, #8]	; (8001700 <vApplicationTickHook+0x20>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	1e5a      	subs	r2, r3, #1
 80016fa:	4b01      	ldr	r3, [pc, #4]	; (8001700 <vApplicationTickHook+0x20>)
 80016fc:	601a      	str	r2, [r3, #0]
	}
	#endif
}
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000470 	.word	0x20000470

08001704 <TIM3_IRQHandler>:
	NVIC_Init( &NVIC_InitStructure );
}
/*-----------------------------------------------------------*/

void TIM3_IRQHandler( void )
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
	/* Just to verify that the interrupt nesting behaves as expected, increment
	ulFPUInterruptNesting on entry, and decrement it on exit. */
	ulFPUInterruptNesting++;
 8001708:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <TIM3_IRQHandler+0x34>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	1c5a      	adds	r2, r3, #1
 800170e:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <TIM3_IRQHandler+0x34>)
 8001710:	601a      	str	r2, [r3, #0]

	/* This is the highest priority interrupt in the chain of forced nesting
	interrupts, so latch the maximum value reached by ulFPUInterruptNesting.
	This is done purely to allow verification that the nesting depth reaches
	that intended. */
	if( ulFPUInterruptNesting > ulMaxFPUInterruptNesting )
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <TIM3_IRQHandler+0x34>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <TIM3_IRQHandler+0x38>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	d903      	bls.n	8001726 <TIM3_IRQHandler+0x22>
	{
		ulMaxFPUInterruptNesting = ulFPUInterruptNesting;
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <TIM3_IRQHandler+0x34>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <TIM3_IRQHandler+0x38>)
 8001724:	601a      	str	r2, [r3, #0]

	/* Fill the FPU registers with 99 to overwrite the values written by
	TIM2_IRQHandler(). */
	//vRegTestClearFlopRegistersToParameterValue( 99UL );

	ulFPUInterruptNesting--;
 8001726:	4b04      	ldr	r3, [pc, #16]	; (8001738 <TIM3_IRQHandler+0x34>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	1e5a      	subs	r2, r3, #1
 800172c:	4b02      	ldr	r3, [pc, #8]	; (8001738 <TIM3_IRQHandler+0x34>)
 800172e:	601a      	str	r2, [r3, #0]
}
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	20000470 	.word	0x20000470
 800173c:	20000474 	.word	0x20000474

08001740 <TIM2_IRQHandler>:
/*-----------------------------------------------------------*/

void TIM2_IRQHandler( void )
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	/* Just to verify that the interrupt nesting behaves as expected, increment
	ulFPUInterruptNesting on entry, and decrement it on exit. */
	ulFPUInterruptNesting++;
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <TIM2_IRQHandler+0x20>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	1c5a      	adds	r2, r3, #1
 800174a:	4b05      	ldr	r3, [pc, #20]	; (8001760 <TIM2_IRQHandler+0x20>)
 800174c:	601a      	str	r2, [r3, #0]
	/* Fill the FPU registers with 1. */
	//vRegTestClearFlopRegistersToParameterValue( 1UL );

	/* Trigger a timer 3 interrupt, which will fill the registers with a
	different value. */
	NVIC_SetPendingIRQ( TIM3_IRQn );
 800174e:	201d      	movs	r0, #29
 8001750:	f7ff fec0 	bl	80014d4 <NVIC_SetPendingIRQ>
	/* Ensure that, after returning from the nesting interrupt, all the FPU
	registers contain the value to which they were set by this interrupt
	function. */
	//configASSERT( ulRegTestCheckFlopRegistersContainParameterValue( 1UL ) );

	ulFPUInterruptNesting--;
 8001754:	4b02      	ldr	r3, [pc, #8]	; (8001760 <TIM2_IRQHandler+0x20>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	1e5a      	subs	r2, r3, #1
 800175a:	4b01      	ldr	r3, [pc, #4]	; (8001760 <TIM2_IRQHandler+0x20>)
 800175c:	601a      	str	r2, [r3, #0]
}
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000470 	.word	0x20000470

08001764 <EXTI9_5_IRQHandler>:
	#endif /* mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY */
}
/*-----------------------------------------------------------*/

void EXTI9_5_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
long lHigherPriorityTaskWoken = pdFALSE;
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]

	/* Only line 6 is enabled, so there is no need to test which line generated
	the interrupt. */
	EXTI_ClearITPendingBit( EXTI_Line6 );
 800176e:	2040      	movs	r0, #64	; 0x40
 8001770:	f003 fae6 	bl	8004d40 <EXTI_ClearITPendingBit>

	/* This interrupt does nothing more than demonstrate how to synchronise a
	task with an interrupt.  First the handler releases a semaphore.
	lHigherPriorityTaskWoken has been initialised to zero. */
	xSemaphoreGiveFromISR( xTestSemaphore, &lHigherPriorityTaskWoken );
 8001774:	4b09      	ldr	r3, [pc, #36]	; (800179c <EXTI9_5_IRQHandler+0x38>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	1d3b      	adds	r3, r7, #4
 800177a:	4610      	mov	r0, r2
 800177c:	2100      	movs	r1, #0
 800177e:	461a      	mov	r2, r3
 8001780:	2300      	movs	r3, #0
 8001782:	f001 f9a9 	bl	8002ad8 <xQueueGenericSendFromISR>
	semaphore caused the task to unblock, and the unblocked task has a priority
	higher than the currently executing task (the task that this interrupt
	interrupted), then lHigherPriorityTaskWoken will have been set to pdTRUE.
	Passing pdTRUE into the following macro call will cause this interrupt to
	return directly to the unblocked, higher priority, task. */
	portEND_SWITCHING_ISR( lHigherPriorityTaskWoken );
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <EXTI9_5_IRQHandler+0x30>
 800178c:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <EXTI9_5_IRQHandler+0x3c>)
 800178e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001792:	601a      	str	r2, [r3, #0]
}
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000478 	.word	0x20000478
 80017a0:	e000ed04 	.word	0xe000ed04

080017a4 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 80017a8:	f001 fda6 	bl	80032f8 <ulPortSetInterruptMask>
	for( ;; );
 80017ac:	e7fe      	b.n	80017ac <vApplicationMallocFailedHook+0x8>
 80017ae:	bf00      	nop

080017b0 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	unction, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 80017c6:	f001 fd97 	bl	80032f8 <ulPortSetInterruptMask>
	for( ;; );
 80017ca:	e7fe      	b.n	80017ca <vApplicationStackOverflowHook+0xe>

080017cc <assert_failed>:
}
///*-----------------------------------------------------------*/
void assert_failed(uint8_t* file, uint32_t line){
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]

}
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <vParTestInitialise>:
static const Led_TypeDef xLEDs[ partstMAX_LEDS ] = { LED3, LED4, LED5, LED6 };

/*-----------------------------------------------------------*/

void vParTestInitialise( void )
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
	/* Initialise all four LEDs that are built onto the starter kit. */
	STM_EVAL_LEDInit( LED3 );
 80017e4:	2001      	movs	r0, #1
 80017e6:	f002 f8f1 	bl	80039cc <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit( LED4 );
 80017ea:	2000      	movs	r0, #0
 80017ec:	f002 f8ee 	bl	80039cc <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit( LED5 );
 80017f0:	2002      	movs	r0, #2
 80017f2:	f002 f8eb 	bl	80039cc <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit( LED6 );
 80017f6:	2003      	movs	r0, #3
 80017f8:	f002 f8e8 	bl	80039cc <STM_EVAL_LEDInit>
}
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop

08001800 <Reset_Handler>:
 8001800:	2100      	movs	r1, #0
 8001802:	f000 b804 	b.w	800180e <LoopCopyDataInit>

08001806 <CopyDataInit>:
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <LoopFillZerobss+0x22>)
 8001808:	585b      	ldr	r3, [r3, r1]
 800180a:	5043      	str	r3, [r0, r1]
 800180c:	3104      	adds	r1, #4

0800180e <LoopCopyDataInit>:
 800180e:	480f      	ldr	r0, [pc, #60]	; (800184c <LoopFillZerobss+0x26>)
 8001810:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <LoopFillZerobss+0x2a>)
 8001812:	1842      	adds	r2, r0, r1
 8001814:	429a      	cmp	r2, r3
 8001816:	f4ff aff6 	bcc.w	8001806 <CopyDataInit>
 800181a:	4a0e      	ldr	r2, [pc, #56]	; (8001854 <LoopFillZerobss+0x2e>)
 800181c:	f000 b803 	b.w	8001826 <LoopFillZerobss>

08001820 <FillZerobss>:
 8001820:	2300      	movs	r3, #0
 8001822:	f842 3b04 	str.w	r3, [r2], #4

08001826 <LoopFillZerobss>:
 8001826:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <LoopFillZerobss+0x32>)
 8001828:	429a      	cmp	r2, r3
 800182a:	f4ff aff9 	bcc.w	8001820 <FillZerobss>
 800182e:	480b      	ldr	r0, [pc, #44]	; (800185c <LoopFillZerobss+0x36>)
 8001830:	6801      	ldr	r1, [r0, #0]
 8001832:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001836:	6001      	str	r1, [r0, #0]
 8001838:	f000 f814 	bl	8001864 <SystemInit>
 800183c:	f004 f806 	bl	800584c <__libc_init_array>
 8001840:	f7ff fe62 	bl	8001508 <main>
 8001844:	4770      	bx	lr
 8001846:	0000      	.short	0x0000
 8001848:	08005e28 	.word	0x08005e28
 800184c:	20000000 	.word	0x20000000
 8001850:	20000448 	.word	0x20000448
 8001854:	20000448 	.word	0x20000448
 8001858:	20014178 	.word	0x20014178
 800185c:	e000ed88 	.word	0xe000ed88

08001860 <ADC_IRQHandler>:
 8001860:	f7ff bffe 	b.w	8001860 <ADC_IRQHandler>

08001864 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001868:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <SystemInit+0x5c>)
 800186a:	4a15      	ldr	r2, [pc, #84]	; (80018c0 <SystemInit+0x5c>)
 800186c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8001870:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001874:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <SystemInit+0x60>)
 800187a:	4a12      	ldr	r2, [pc, #72]	; (80018c4 <SystemInit+0x60>)
 800187c:	6812      	ldr	r2, [r2, #0]
 800187e:	f042 0201 	orr.w	r2, r2, #1
 8001882:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <SystemInit+0x60>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800188a:	4a0e      	ldr	r2, [pc, #56]	; (80018c4 <SystemInit+0x60>)
 800188c:	4b0d      	ldr	r3, [pc, #52]	; (80018c4 <SystemInit+0x60>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001898:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <SystemInit+0x60>)
 800189c:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <SystemInit+0x64>)
 800189e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80018a0:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <SystemInit+0x60>)
 80018a2:	4a08      	ldr	r2, [pc, #32]	; (80018c4 <SystemInit+0x60>)
 80018a4:	6812      	ldr	r2, [r2, #0]
 80018a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018aa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80018ac:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <SystemInit+0x60>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80018b2:	f000 f80b 	bl	80018cc <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018b6:	4b02      	ldr	r3, [pc, #8]	; (80018c0 <SystemInit+0x5c>)
 80018b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018bc:	609a      	str	r2, [r3, #8]
#endif
}
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	e000ed00 	.word	0xe000ed00
 80018c4:	40023800 	.word	0x40023800
 80018c8:	24003010 	.word	0x24003010

080018cc <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	2300      	movs	r3, #0
 80018d8:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80018da:	4b35      	ldr	r3, [pc, #212]	; (80019b0 <SetSysClock+0xe4>)
 80018dc:	4a34      	ldr	r2, [pc, #208]	; (80019b0 <SetSysClock+0xe4>)
 80018de:	6812      	ldr	r2, [r2, #0]
 80018e0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80018e4:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80018e6:	4b32      	ldr	r3, [pc, #200]	; (80019b0 <SetSysClock+0xe4>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3301      	adds	r3, #1
 80018f4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d103      	bne.n	8001904 <SetSysClock+0x38>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001902:	d1f0      	bne.n	80018e6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001904:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <SetSysClock+0xe4>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d002      	beq.n	8001916 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001910:	2301      	movs	r3, #1
 8001912:	603b      	str	r3, [r7, #0]
 8001914:	e001      	b.n	800191a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001916:	2300      	movs	r3, #0
 8001918:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d142      	bne.n	80019a6 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001920:	4b23      	ldr	r3, [pc, #140]	; (80019b0 <SetSysClock+0xe4>)
 8001922:	4a23      	ldr	r2, [pc, #140]	; (80019b0 <SetSysClock+0xe4>)
 8001924:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001926:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800192a:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800192c:	4b21      	ldr	r3, [pc, #132]	; (80019b4 <SetSysClock+0xe8>)
 800192e:	4a21      	ldr	r2, [pc, #132]	; (80019b4 <SetSysClock+0xe8>)
 8001930:	6812      	ldr	r2, [r2, #0]
 8001932:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001936:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001938:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <SetSysClock+0xe4>)
 800193a:	4a1d      	ldr	r2, [pc, #116]	; (80019b0 <SetSysClock+0xe4>)
 800193c:	6892      	ldr	r2, [r2, #8]
 800193e:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001940:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <SetSysClock+0xe4>)
 8001942:	4a1b      	ldr	r2, [pc, #108]	; (80019b0 <SetSysClock+0xe4>)
 8001944:	6892      	ldr	r2, [r2, #8]
 8001946:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800194a:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800194c:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <SetSysClock+0xe4>)
 800194e:	4a18      	ldr	r2, [pc, #96]	; (80019b0 <SetSysClock+0xe4>)
 8001950:	6892      	ldr	r2, [r2, #8]
 8001952:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8001956:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001958:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <SetSysClock+0xe4>)
 800195a:	4a17      	ldr	r2, [pc, #92]	; (80019b8 <SetSysClock+0xec>)
 800195c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800195e:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <SetSysClock+0xe4>)
 8001960:	4a13      	ldr	r2, [pc, #76]	; (80019b0 <SetSysClock+0xe4>)
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001968:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800196a:	bf00      	nop
 800196c:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <SetSysClock+0xe4>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0f9      	beq.n	800196c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_4WS;
 8001978:	4b10      	ldr	r3, [pc, #64]	; (80019bc <SetSysClock+0xf0>)
 800197a:	f240 6204 	movw	r2, #1540	; 0x604
 800197e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001980:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <SetSysClock+0xe4>)
 8001982:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <SetSysClock+0xe4>)
 8001984:	6892      	ldr	r2, [r2, #8]
 8001986:	f022 0203 	bic.w	r2, r2, #3
 800198a:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800198c:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <SetSysClock+0xe4>)
 800198e:	4a08      	ldr	r2, [pc, #32]	; (80019b0 <SetSysClock+0xe4>)
 8001990:	6892      	ldr	r2, [r2, #8]
 8001992:	f042 0202 	orr.w	r2, r2, #2
 8001996:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001998:	bf00      	nop
 800199a:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <SetSysClock+0xe4>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 030c 	and.w	r3, r3, #12
 80019a2:	2b08      	cmp	r3, #8
 80019a4:	d1f9      	bne.n	800199a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40007000 	.word	0x40007000
 80019b8:	07404b19 	.word	0x07404b19
 80019bc:	40023c00 	.word	0x40023c00

080019c0 <xTaskGenericCreate>:
	static portTickType prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;

#endif

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08a      	sub	sp, #40	; 0x28
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	4613      	mov	r3, r2
 80019ce:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d102      	bne.n	80019dc <xTaskGenericCreate+0x1c>
 80019d6:	f001 fc8f 	bl	80032f8 <ulPortSetInterruptMask>
 80019da:	e7fe      	b.n	80019da <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 80019dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019de:	2b04      	cmp	r3, #4
 80019e0:	d902      	bls.n	80019e8 <xTaskGenericCreate+0x28>
 80019e2:	f001 fc89 	bl	80032f8 <ulPortSetInterruptMask>
 80019e6:	e7fe      	b.n	80019e6 <xTaskGenericCreate+0x26>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 80019e8:	88fb      	ldrh	r3, [r7, #6]
 80019ea:	4618      	mov	r0, r3
 80019ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80019ee:	f000 fe21 	bl	8002634 <prvAllocateTCBAndStack>
 80019f2:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d072      	beq.n	8001ae0 <xTaskGenericCreate+0x120>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a04:	3b01      	subs	r3, #1
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f023 0307 	bic.w	r3, r3, #7
 8001a12:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d002      	beq.n	8001a24 <xTaskGenericCreate+0x64>
 8001a1e:	f001 fc6b 	bl	80032f8 <ulPortSetInterruptMask>
 8001a22:	e7fe      	b.n	8001a22 <xTaskGenericCreate+0x62>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8001a24:	88fb      	ldrh	r3, [r7, #6]
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	69b8      	ldr	r0, [r7, #24]
 8001a2a:	68b9      	ldr	r1, [r7, #8]
 8001a2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a30:	f000 fd0a 	bl	8002448 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001a34:	6978      	ldr	r0, [r7, #20]
 8001a36:	68f9      	ldr	r1, [r7, #12]
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	f001 fb6b 	bl	8003114 <pxPortInitialiseStack>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 8001a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d002      	beq.n	8001a50 <xTaskGenericCreate+0x90>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 8001a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	601a      	str	r2, [r3, #0]
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 8001a50:	f001 fc30 	bl	80032b4 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8001a54:	4b2e      	ldr	r3, [pc, #184]	; (8001b10 <xTaskGenericCreate+0x150>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	1c5a      	adds	r2, r3, #1
 8001a5a:	4b2d      	ldr	r3, [pc, #180]	; (8001b10 <xTaskGenericCreate+0x150>)
 8001a5c:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 8001a5e:	4b2d      	ldr	r3, [pc, #180]	; (8001b14 <xTaskGenericCreate+0x154>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d109      	bne.n	8001a7a <xTaskGenericCreate+0xba>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8001a66:	4b2b      	ldr	r3, [pc, #172]	; (8001b14 <xTaskGenericCreate+0x154>)
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 8001a6c:	4b28      	ldr	r3, [pc, #160]	; (8001b10 <xTaskGenericCreate+0x150>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d10f      	bne.n	8001a94 <xTaskGenericCreate+0xd4>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 8001a74:	f000 fd30 	bl	80024d8 <prvInitialiseTaskLists>
 8001a78:	e00c      	b.n	8001a94 <xTaskGenericCreate+0xd4>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8001a7a:	4b27      	ldr	r3, [pc, #156]	; (8001b18 <xTaskGenericCreate+0x158>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d108      	bne.n	8001a94 <xTaskGenericCreate+0xd4>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8001a82:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <xTaskGenericCreate+0x154>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d802      	bhi.n	8001a94 <xTaskGenericCreate+0xd4>
					{
						pxCurrentTCB = pxNewTCB;
 8001a8e:	4b21      	ldr	r3, [pc, #132]	; (8001b14 <xTaskGenericCreate+0x154>)
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	601a      	str	r2, [r3, #0]
					}
				}
			}

			uxTaskNumber++;
 8001a94:	4b21      	ldr	r3, [pc, #132]	; (8001b1c <xTaskGenericCreate+0x15c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	1c5a      	adds	r2, r3, #1
 8001a9a:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <xTaskGenericCreate+0x15c>)
 8001a9c:	601a      	str	r2, [r3, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001a9e:	4b1f      	ldr	r3, [pc, #124]	; (8001b1c <xTaskGenericCreate+0x15c>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aaa:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <xTaskGenericCreate+0x160>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d903      	bls.n	8001aba <xTaskGenericCreate+0xfa>
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab6:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <xTaskGenericCreate+0x160>)
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4a17      	ldr	r2, [pc, #92]	; (8001b24 <xTaskGenericCreate+0x164>)
 8001ac8:	441a      	add	r2, r3
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	3304      	adds	r3, #4
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f001 fa99 	bl	8003008 <vListInsertEnd>

			xReturn = pdPASS;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8001ada:	f001 fbfb 	bl	80032d4 <vPortExitCritical>
 8001ade:	e002      	b.n	8001ae6 <xTaskGenericCreate+0x126>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001ae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ae4:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d10b      	bne.n	8001b04 <xTaskGenericCreate+0x144>
	{
		if( xSchedulerRunning != pdFALSE )
 8001aec:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <xTaskGenericCreate+0x158>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d007      	beq.n	8001b04 <xTaskGenericCreate+0x144>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8001af4:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <xTaskGenericCreate+0x154>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d201      	bcs.n	8001b04 <xTaskGenericCreate+0x144>
			{
				portYIELD_WITHIN_API();
 8001b00:	f001 fbc8 	bl	8003294 <vPortYield>
			}
		}
	}

	return xReturn;
 8001b04:	69fb      	ldr	r3, [r7, #28]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3720      	adds	r7, #32
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000554 	.word	0x20000554
 8001b14:	2000047c 	.word	0x2000047c
 8001b18:	20000560 	.word	0x20000560
 8001b1c:	20000574 	.word	0x20000574
 8001b20:	2000055c 	.word	0x2000055c
 8001b24:	20000480 	.word	0x20000480

08001b28 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d102      	bne.n	8001b42 <vTaskDelayUntil+0x1a>
 8001b3c:	f001 fbdc 	bl	80032f8 <ulPortSetInterruptMask>
 8001b40:	e7fe      	b.n	8001b40 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d102      	bne.n	8001b4e <vTaskDelayUntil+0x26>
 8001b48:	f001 fbd6 	bl	80032f8 <ulPortSetInterruptMask>
 8001b4c:	e7fe      	b.n	8001b4c <vTaskDelayUntil+0x24>

		vTaskSuspendAll();
 8001b4e:	f000 f943 	bl	8001dd8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const portTickType xConstTickCount = xTickCount;
 8001b52:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <vTaskDelayUntil+0xa8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d90b      	bls.n	8001b84 <vTaskDelayUntil+0x5c>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d911      	bls.n	8001b9a <vTaskDelayUntil+0x72>
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d90d      	bls.n	8001b9a <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	e00a      	b.n	8001b9a <vTaskDelayUntil+0x72>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d803      	bhi.n	8001b96 <vTaskDelayUntil+0x6e>
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d901      	bls.n	8001b9a <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
 8001b96:	2301      	movs	r3, #1
 8001b98:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d008      	beq.n	8001bb8 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <vTaskDelayUntil+0xac>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	3304      	adds	r3, #4
 8001bac:	4618      	mov	r0, r3
 8001bae:	f001 fa87 	bl	80030c0 <uxListRemove>
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f000 fd08 	bl	80025c8 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8001bb8:	f000 f91c 	bl	8001df4 <xTaskResumeAll>
 8001bbc:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
 8001bc4:	f001 fb66 	bl	8003294 <vPortYield>
		}
	}
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000558 	.word	0x20000558
 8001bd4:	2000047c 	.word	0x2000047c

08001bd8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle xTaskToSuspend )
	{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
 8001be0:	f001 fb68 	bl	80032b4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d102      	bne.n	8001bf0 <vTaskSuspend+0x18>
 8001bea:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <vTaskSuspend+0x80>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	e000      	b.n	8001bf2 <vTaskSuspend+0x1a>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f001 fa61 	bl	80030c0 <uxListRemove>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d004      	beq.n	8001c10 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	3318      	adds	r3, #24
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f001 fa58 	bl	80030c0 <uxListRemove>
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	3304      	adds	r3, #4
 8001c14:	4811      	ldr	r0, [pc, #68]	; (8001c5c <vTaskSuspend+0x84>)
 8001c16:	4619      	mov	r1, r3
 8001c18:	f001 f9f6 	bl	8003008 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 8001c1c:	f001 fb5a 	bl	80032d4 <vPortExitCritical>

		if( pxTCB == pxCurrentTCB )
 8001c20:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <vTaskSuspend+0x80>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d112      	bne.n	8001c50 <vTaskSuspend+0x78>
		{
			if( xSchedulerRunning != pdFALSE )
 8001c2a:	4b0d      	ldr	r3, [pc, #52]	; (8001c60 <vTaskSuspend+0x88>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d002      	beq.n	8001c38 <vTaskSuspend+0x60>
			{
				/* The current task has just been suspended. */
				portYIELD_WITHIN_API();
 8001c32:	f001 fb2f 	bl	8003294 <vPortYield>
 8001c36:	e00b      	b.n	8001c50 <vTaskSuspend+0x78>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8001c38:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <vTaskSuspend+0x84>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <vTaskSuspend+0x8c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d103      	bne.n	8001c4c <vTaskSuspend+0x74>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <vTaskSuspend+0x80>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	e001      	b.n	8001c50 <vTaskSuspend+0x78>
				}
				else
				{
					vTaskSwitchContext();
 8001c4c:	f000 fa40 	bl	80020d0 <vTaskSwitchContext>
				}
			}
		}
	}
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	2000047c 	.word	0x2000047c
 8001c5c:	20000540 	.word	0x20000540
 8001c60:	20000560 	.word	0x20000560
 8001c64:	20000554 	.word	0x20000554

08001c68 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	60bb      	str	r3, [r7, #8]

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d102      	bne.n	8001c84 <xTaskIsTaskSuspended+0x1c>
 8001c7e:	f001 fb3b 	bl	80032f8 <ulPortSetInterruptMask>
 8001c82:	e7fe      	b.n	8001c82 <xTaskIsTaskSuspended+0x1a>

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	695a      	ldr	r2, [r3, #20]
 8001c88:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <xTaskIsTaskSuspended+0x5c>)
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d101      	bne.n	8001c92 <xTaskIsTaskSuspended+0x2a>
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <xTaskIsTaskSuspended+0x2c>
 8001c92:	2300      	movs	r3, #0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00f      	beq.n	8001cb8 <xTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c9c:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <xTaskIsTaskSuspended+0x60>)
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d00a      	beq.n	8001cb8 <xTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <xTaskIsTaskSuspended+0x46>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <xTaskIsTaskSuspended+0x48>
 8001cae:	2300      	movs	r3, #0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <xTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000540 	.word	0x20000540
 8001cc8:	20000514 	.word	0x20000514

08001ccc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle xTaskToResume )
	{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) xTaskToResume;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d102      	bne.n	8001ce4 <vTaskResume+0x18>
 8001cde:	f001 fb0b 	bl	80032f8 <ulPortSetInterruptMask>
 8001ce2:	e7fe      	b.n	8001ce2 <vTaskResume+0x16>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d034      	beq.n	8001d54 <vTaskResume+0x88>
 8001cea:	4b1c      	ldr	r3, [pc, #112]	; (8001d5c <vTaskResume+0x90>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d02f      	beq.n	8001d54 <vTaskResume+0x88>
		{
			taskENTER_CRITICAL();
 8001cf4:	f001 fade 	bl	80032b4 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f7ff ffb5 	bl	8001c68 <xTaskIsTaskSuspended>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d125      	bne.n	8001d50 <vTaskResume+0x84>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	3304      	adds	r3, #4
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f001 f9d9 	bl	80030c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d12:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <vTaskResume+0x94>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d903      	bls.n	8001d22 <vTaskResume+0x56>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <vTaskResume+0x94>)
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d26:	4613      	mov	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4a0d      	ldr	r2, [pc, #52]	; (8001d64 <vTaskResume+0x98>)
 8001d30:	441a      	add	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	3304      	adds	r3, #4
 8001d36:	4610      	mov	r0, r2
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f001 f965 	bl	8003008 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <vTaskResume+0x90>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d301      	bcc.n	8001d50 <vTaskResume+0x84>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
 8001d4c:	f001 faa2 	bl	8003294 <vPortYield>
					}
				}
			}
			taskEXIT_CRITICAL();
 8001d50:	f001 fac0 	bl	80032d4 <vPortExitCritical>
		}
	}
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	2000047c 	.word	0x2000047c
 8001d60:	2000055c 	.word	0x2000055c
 8001d64:	20000480 	.word	0x20000480

08001d68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 8001d6e:	2300      	movs	r3, #0
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	2300      	movs	r3, #0
 8001d74:	9301      	str	r3, [sp, #4]
 8001d76:	2300      	movs	r3, #0
 8001d78:	9302      	str	r3, [sp, #8]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	9303      	str	r3, [sp, #12]
 8001d7e:	4812      	ldr	r0, [pc, #72]	; (8001dc8 <vTaskStartScheduler+0x60>)
 8001d80:	4912      	ldr	r1, [pc, #72]	; (8001dcc <vTaskStartScheduler+0x64>)
 8001d82:	2282      	movs	r2, #130	; 0x82
 8001d84:	2300      	movs	r3, #0
 8001d86:	f7ff fe1b 	bl	80019c0 <xTaskGenericCreate>
 8001d8a:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d102      	bne.n	8001d98 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
 8001d92:	f001 fb4b 	bl	800342c <xTimerCreateTimerTask>
 8001d96:	6078      	str	r0, [r7, #4]
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d10a      	bne.n	8001db4 <vTaskStartScheduler+0x4c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8001d9e:	f001 faab 	bl	80032f8 <ulPortSetInterruptMask>
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
 8001da2:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <vTaskStartScheduler+0x68>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 8001da8:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <vTaskStartScheduler+0x6c>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001dae:	f001 fa0b 	bl	80031c8 <xPortStartScheduler>
 8001db2:	e005      	b.n	8001dc0 <vTaskStartScheduler+0x58>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d102      	bne.n	8001dc0 <vTaskStartScheduler+0x58>
 8001dba:	f001 fa9d 	bl	80032f8 <ulPortSetInterruptMask>
 8001dbe:	e7fe      	b.n	8001dbe <vTaskStartScheduler+0x56>
	}
}
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	08002425 	.word	0x08002425
 8001dcc:	08005b94 	.word	0x08005b94
 8001dd0:	20000560 	.word	0x20000560
 8001dd4:	20000558 	.word	0x20000558

08001dd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 8001ddc:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <vTaskSuspendAll+0x18>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	1c5a      	adds	r2, r3, #1
 8001de2:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <vTaskSuspendAll+0x18>)
 8001de4:	601a      	str	r2, [r3, #0]
}
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20000564 	.word	0x20000564

08001df4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
tskTCB *pxTCB;
portBASE_TYPE xAlreadyYielded = pdFALSE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001dfe:	4b38      	ldr	r3, [pc, #224]	; (8001ee0 <xTaskResumeAll+0xec>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d102      	bne.n	8001e0c <xTaskResumeAll+0x18>
 8001e06:	f001 fa77 	bl	80032f8 <ulPortSetInterruptMask>
 8001e0a:	e7fe      	b.n	8001e0a <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001e0c:	f001 fa52 	bl	80032b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001e10:	4b33      	ldr	r3, [pc, #204]	; (8001ee0 <xTaskResumeAll+0xec>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	1e5a      	subs	r2, r3, #1
 8001e16:	4b32      	ldr	r3, [pc, #200]	; (8001ee0 <xTaskResumeAll+0xec>)
 8001e18:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8001e1a:	4b31      	ldr	r3, [pc, #196]	; (8001ee0 <xTaskResumeAll+0xec>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d156      	bne.n	8001ed0 <xTaskResumeAll+0xdc>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 8001e22:	4b30      	ldr	r3, [pc, #192]	; (8001ee4 <xTaskResumeAll+0xf0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d052      	beq.n	8001ed0 <xTaskResumeAll+0xdc>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e2a:	e02f      	b.n	8001e8c <xTaskResumeAll+0x98>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001e2c:	4b2e      	ldr	r3, [pc, #184]	; (8001ee8 <xTaskResumeAll+0xf4>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	3318      	adds	r3, #24
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f001 f941 	bl	80030c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	3304      	adds	r3, #4
 8001e42:	4618      	mov	r0, r3
 8001e44:	f001 f93c 	bl	80030c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e4c:	4b27      	ldr	r3, [pc, #156]	; (8001eec <xTaskResumeAll+0xf8>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d903      	bls.n	8001e5c <xTaskResumeAll+0x68>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e58:	4b24      	ldr	r3, [pc, #144]	; (8001eec <xTaskResumeAll+0xf8>)
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4a21      	ldr	r2, [pc, #132]	; (8001ef0 <xTaskResumeAll+0xfc>)
 8001e6a:	441a      	add	r2, r3
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	3304      	adds	r3, #4
 8001e70:	4610      	mov	r0, r2
 8001e72:	4619      	mov	r1, r3
 8001e74:	f001 f8c8 	bl	8003008 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <xTaskResumeAll+0x100>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d302      	bcc.n	8001e8c <xTaskResumeAll+0x98>
					{
						xYieldPending = pdTRUE;
 8001e86:	4b1c      	ldr	r3, [pc, #112]	; (8001ef8 <xTaskResumeAll+0x104>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e8c:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <xTaskResumeAll+0xf4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1cb      	bne.n	8001e2c <xTaskResumeAll+0x38>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 8001e94:	4b19      	ldr	r3, [pc, #100]	; (8001efc <xTaskResumeAll+0x108>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d011      	beq.n	8001ec0 <xTaskResumeAll+0xcc>
				{
					while( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 8001e9c:	e00c      	b.n	8001eb8 <xTaskResumeAll+0xc4>
					{
						if( xTaskIncrementTick() != pdFALSE )
 8001e9e:	f000 f841 	bl	8001f24 <xTaskIncrementTick>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d002      	beq.n	8001eae <xTaskResumeAll+0xba>
						{
							xYieldPending = pdTRUE;
 8001ea8:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <xTaskResumeAll+0x104>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	601a      	str	r2, [r3, #0]
						}
						--uxPendedTicks;
 8001eae:	4b13      	ldr	r3, [pc, #76]	; (8001efc <xTaskResumeAll+0x108>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	1e5a      	subs	r2, r3, #1
 8001eb4:	4b11      	ldr	r3, [pc, #68]	; (8001efc <xTaskResumeAll+0x108>)
 8001eb6:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 8001eb8:	4b10      	ldr	r3, [pc, #64]	; (8001efc <xTaskResumeAll+0x108>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1ee      	bne.n	8001e9e <xTaskResumeAll+0xaa>
						}
						--uxPendedTicks;
					}
				}

				if( xYieldPending == pdTRUE )
 8001ec0:	4b0d      	ldr	r3, [pc, #52]	; (8001ef8 <xTaskResumeAll+0x104>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d103      	bne.n	8001ed0 <xTaskResumeAll+0xdc>
				{
					xAlreadyYielded = pdTRUE;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	607b      	str	r3, [r7, #4]
					portYIELD_WITHIN_API();
 8001ecc:	f001 f9e2 	bl	8003294 <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 8001ed0:	f001 fa00 	bl	80032d4 <vPortExitCritical>

	return xAlreadyYielded;
 8001ed4:	687b      	ldr	r3, [r7, #4]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000564 	.word	0x20000564
 8001ee4:	20000554 	.word	0x20000554
 8001ee8:	20000514 	.word	0x20000514
 8001eec:	2000055c 	.word	0x2000055c
 8001ef0:	20000480 	.word	0x20000480
 8001ef4:	2000047c 	.word	0x2000047c
 8001ef8:	2000056c 	.word	0x2000056c
 8001efc:	20000568 	.word	0x20000568

08001f00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCount( void )
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 8001f06:	f001 f9d5 	bl	80032b4 <vPortEnterCritical>
	{
		xTicks = xTickCount;
 8001f0a:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <xTaskGetTickCount+0x20>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
 8001f10:	f001 f9e0 	bl	80032d4 <vPortExitCritical>

	return xTicks;
 8001f14:	687b      	ldr	r3, [r7, #4]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000558 	.word	0x20000558

08001f24 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

portBASE_TYPE xTaskIncrementTick( void )
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
tskTCB * pxTCB;
portTickType xItemValue;
portBASE_TYPE xSwitchRequired = pdFALSE;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8001f2e:	4b5d      	ldr	r3, [pc, #372]	; (80020a4 <xTaskIncrementTick+0x180>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f040 80a4 	bne.w	8002080 <xTaskIncrementTick+0x15c>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8001f38:	4b5b      	ldr	r3, [pc, #364]	; (80020a8 <xTaskIncrementTick+0x184>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	1c5a      	adds	r2, r3, #1
 8001f3e:	4b5a      	ldr	r3, [pc, #360]	; (80020a8 <xTaskIncrementTick+0x184>)
 8001f40:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const portTickType xConstTickCount = xTickCount;
 8001f42:	4b59      	ldr	r3, [pc, #356]	; (80020a8 <xTaskIncrementTick+0x184>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( portTickType ) 0U )
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d12e      	bne.n	8001fac <xTaskIncrementTick+0x88>
			{
				taskSWITCH_DELAYED_LISTS();
 8001f4e:	4b57      	ldr	r3, [pc, #348]	; (80020ac <xTaskIncrementTick+0x188>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d002      	beq.n	8001f5e <xTaskIncrementTick+0x3a>
 8001f58:	f001 f9ce 	bl	80032f8 <ulPortSetInterruptMask>
 8001f5c:	e7fe      	b.n	8001f5c <xTaskIncrementTick+0x38>
 8001f5e:	4b53      	ldr	r3, [pc, #332]	; (80020ac <xTaskIncrementTick+0x188>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	4b52      	ldr	r3, [pc, #328]	; (80020b0 <xTaskIncrementTick+0x18c>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4b50      	ldr	r3, [pc, #320]	; (80020ac <xTaskIncrementTick+0x188>)
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	4b50      	ldr	r3, [pc, #320]	; (80020b0 <xTaskIncrementTick+0x18c>)
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	4b50      	ldr	r3, [pc, #320]	; (80020b4 <xTaskIncrementTick+0x190>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	4b4e      	ldr	r3, [pc, #312]	; (80020b4 <xTaskIncrementTick+0x190>)
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	4b4b      	ldr	r3, [pc, #300]	; (80020ac <xTaskIncrementTick+0x188>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <xTaskIncrementTick+0x66>
 8001f86:	2301      	movs	r3, #1
 8001f88:	e000      	b.n	8001f8c <xTaskIncrementTick+0x68>
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d004      	beq.n	8001f9a <xTaskIncrementTick+0x76>
 8001f90:	4b49      	ldr	r3, [pc, #292]	; (80020b8 <xTaskIncrementTick+0x194>)
 8001f92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	e008      	b.n	8001fac <xTaskIncrementTick+0x88>
 8001f9a:	4b44      	ldr	r3, [pc, #272]	; (80020ac <xTaskIncrementTick+0x188>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	4b43      	ldr	r3, [pc, #268]	; (80020b8 <xTaskIncrementTick+0x194>)
 8001faa:	601a      	str	r2, [r3, #0]

			/* See if this tick has made a timeout expire.  Tasks are stored in the
			queue in the order of their wake time - meaning once one tasks has been
			found whose block time has not expired there is no need not look any
			further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8001fac:	4b42      	ldr	r3, [pc, #264]	; (80020b8 <xTaskIncrementTick+0x194>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d34f      	bcc.n	8002056 <xTaskIncrementTick+0x132>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fb6:	4b3d      	ldr	r3, [pc, #244]	; (80020ac <xTaskIncrementTick+0x188>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <xTaskIncrementTick+0xa0>
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e000      	b.n	8001fc6 <xTaskIncrementTick+0xa2>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d004      	beq.n	8001fd4 <xTaskIncrementTick+0xb0>
					{
						/* The delayed list is empty.  Set xNextTaskUnblockTime to
						the	maximum possible value so it is extremely unlikely that
						the if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8001fca:	4b3b      	ldr	r3, [pc, #236]	; (80020b8 <xTaskIncrementTick+0x194>)
 8001fcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fd0:	601a      	str	r2, [r3, #0]
						break;
 8001fd2:	e040      	b.n	8002056 <xTaskIncrementTick+0x132>
					{
						/* The delayed list is not empty, get the value of the item
						at the head of the delayed list.  This is the time at which
						the task at the head of the delayed list must be removed
						from the Blocked state. */
						pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001fd4:	4b35      	ldr	r3, [pc, #212]	; (80020ac <xTaskIncrementTick+0x188>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d203      	bcs.n	8001ff4 <xTaskIncrementTick+0xd0>
						{
							/* It is not time to unblock this item yet, but the item
							value is the time at which the task at the head of the
							blocked list must be removed from the Blocked state -
							so record the item value in xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 8001fec:	4b32      	ldr	r3, [pc, #200]	; (80020b8 <xTaskIncrementTick+0x194>)
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	601a      	str	r2, [r3, #0]
							break;
 8001ff2:	e030      	b.n	8002056 <xTaskIncrementTick+0x132>
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f001 f861 	bl	80030c0 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove it
						from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002002:	2b00      	cmp	r3, #0
 8002004:	d004      	beq.n	8002010 <xTaskIncrementTick+0xec>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	3318      	adds	r3, #24
 800200a:	4618      	mov	r0, r3
 800200c:	f001 f858 	bl	80030c0 <uxListRemove>
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002014:	4b29      	ldr	r3, [pc, #164]	; (80020bc <xTaskIncrementTick+0x198>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	429a      	cmp	r2, r3
 800201a:	d903      	bls.n	8002024 <xTaskIncrementTick+0x100>
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002020:	4b26      	ldr	r3, [pc, #152]	; (80020bc <xTaskIncrementTick+0x198>)
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4a23      	ldr	r2, [pc, #140]	; (80020c0 <xTaskIncrementTick+0x19c>)
 8002032:	441a      	add	r2, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	3304      	adds	r3, #4
 8002038:	4610      	mov	r0, r2
 800203a:	4619      	mov	r1, r3
 800203c:	f000 ffe4 	bl	8003008 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should only
							be performed if the unblocked task has a priority that
							is equal to or higher than the currently executing
							task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002044:	4b1f      	ldr	r3, [pc, #124]	; (80020c4 <xTaskIncrementTick+0x1a0>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204a:	429a      	cmp	r2, r3
 800204c:	d302      	bcc.n	8002054 <xTaskIncrementTick+0x130>
							{
								xSwitchRequired = pdTRUE;
 800204e:	2301      	movs	r3, #1
 8002050:	617b      	str	r3, [r7, #20]
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
 8002052:	e7b0      	b.n	8001fb6 <xTaskIncrementTick+0x92>
 8002054:	e7af      	b.n	8001fb6 <xTaskIncrementTick+0x92>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 8002056:	4b1b      	ldr	r3, [pc, #108]	; (80020c4 <xTaskIncrementTick+0x1a0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800205c:	4918      	ldr	r1, [pc, #96]	; (80020c0 <xTaskIncrementTick+0x19c>)
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	440b      	add	r3, r1
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d901      	bls.n	8002072 <xTaskIncrementTick+0x14e>
			{
				xSwitchRequired = pdTRUE;
 800206e:	2301      	movs	r3, #1
 8002070:	617b      	str	r3, [r7, #20]
		
		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( unsigned portBASE_TYPE ) 0U )
 8002072:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <xTaskIncrementTick+0x1a4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d109      	bne.n	800208e <xTaskIncrementTick+0x16a>
			{
				vApplicationTickHook();
 800207a:	f7ff fb31 	bl	80016e0 <vApplicationTickHook>
 800207e:	e006      	b.n	800208e <xTaskIncrementTick+0x16a>
		}
		#endif /* configUSE_TICK_HOOK */		
	}
	else
	{
		++uxPendedTicks;
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <xTaskIncrementTick+0x1a4>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	1c5a      	adds	r2, r3, #1
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <xTaskIncrementTick+0x1a4>)
 8002088:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800208a:	f7ff fb29 	bl	80016e0 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800208e:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <xTaskIncrementTick+0x1a8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <xTaskIncrementTick+0x176>
		{
			xSwitchRequired = pdTRUE;
 8002096:	2301      	movs	r3, #1
 8002098:	617b      	str	r3, [r7, #20]
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800209a:	697b      	ldr	r3, [r7, #20]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20000564 	.word	0x20000564
 80020a8:	20000558 	.word	0x20000558
 80020ac:	2000050c 	.word	0x2000050c
 80020b0:	20000510 	.word	0x20000510
 80020b4:	20000570 	.word	0x20000570
 80020b8:	20000004 	.word	0x20000004
 80020bc:	2000055c 	.word	0x2000055c
 80020c0:	20000480 	.word	0x20000480
 80020c4:	2000047c 	.word	0x2000047c
 80020c8:	20000568 	.word	0x20000568
 80020cc:	2000056c 	.word	0x2000056c

080020d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 80020d6:	4b35      	ldr	r3, [pc, #212]	; (80021ac <vTaskSwitchContext+0xdc>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80020de:	4b34      	ldr	r3, [pc, #208]	; (80021b0 <vTaskSwitchContext+0xe0>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	e05e      	b.n	80021a4 <vTaskSwitchContext+0xd4>
	}
	else
	{
		xYieldPending = pdFALSE;
 80020e6:	4b32      	ldr	r3, [pc, #200]	; (80021b0 <vTaskSwitchContext+0xe0>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
				}
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 80020ec:	4b31      	ldr	r3, [pc, #196]	; (80021b4 <vTaskSwitchContext+0xe4>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	4b30      	ldr	r3, [pc, #192]	; (80021b4 <vTaskSwitchContext+0xe4>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d808      	bhi.n	800210e <vTaskSwitchContext+0x3e>
 80020fc:	4b2d      	ldr	r3, [pc, #180]	; (80021b4 <vTaskSwitchContext+0xe4>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b2c      	ldr	r3, [pc, #176]	; (80021b4 <vTaskSwitchContext+0xe4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	3334      	adds	r3, #52	; 0x34
 8002106:	4610      	mov	r0, r2
 8002108:	4619      	mov	r1, r3
 800210a:	f7ff fb57 	bl	80017bc <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800210e:	4b29      	ldr	r3, [pc, #164]	; (80021b4 <vTaskSwitchContext+0xe4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002114:	4618      	mov	r0, r3
 8002116:	4928      	ldr	r1, [pc, #160]	; (80021b8 <vTaskSwitchContext+0xe8>)
 8002118:	2214      	movs	r2, #20
 800211a:	f003 fbbf 	bl	800589c <memcmp>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d009      	beq.n	8002138 <vTaskSwitchContext+0x68>
 8002124:	4b23      	ldr	r3, [pc, #140]	; (80021b4 <vTaskSwitchContext+0xe4>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b22      	ldr	r3, [pc, #136]	; (80021b4 <vTaskSwitchContext+0xe4>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	3334      	adds	r3, #52	; 0x34
 800212e:	4610      	mov	r0, r2
 8002130:	4619      	mov	r1, r3
 8002132:	f7ff fb43 	bl	80017bc <vApplicationStackOverflowHook>

		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002136:	e00c      	b.n	8002152 <vTaskSwitchContext+0x82>
 8002138:	e00b      	b.n	8002152 <vTaskSwitchContext+0x82>
 800213a:	4b20      	ldr	r3, [pc, #128]	; (80021bc <vTaskSwitchContext+0xec>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d102      	bne.n	8002148 <vTaskSwitchContext+0x78>
 8002142:	f001 f8d9 	bl	80032f8 <ulPortSetInterruptMask>
 8002146:	e7fe      	b.n	8002146 <vTaskSwitchContext+0x76>
 8002148:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <vTaskSwitchContext+0xec>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	1e5a      	subs	r2, r3, #1
 800214e:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <vTaskSwitchContext+0xec>)
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <vTaskSwitchContext+0xec>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	491a      	ldr	r1, [pc, #104]	; (80021c0 <vTaskSwitchContext+0xf0>)
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0e8      	beq.n	800213a <vTaskSwitchContext+0x6a>
 8002168:	4b14      	ldr	r3, [pc, #80]	; (80021bc <vTaskSwitchContext+0xec>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4a12      	ldr	r2, [pc, #72]	; (80021c0 <vTaskSwitchContext+0xf0>)
 8002176:	4413      	add	r3, r2
 8002178:	607b      	str	r3, [r7, #4]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	605a      	str	r2, [r3, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3308      	adds	r3, #8
 800218c:	429a      	cmp	r2, r3
 800218e:	d104      	bne.n	800219a <vTaskSwitchContext+0xca>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	68da      	ldr	r2, [r3, #12]
 80021a0:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <vTaskSwitchContext+0xe4>)
 80021a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000564 	.word	0x20000564
 80021b0:	2000056c 	.word	0x2000056c
 80021b4:	2000047c 	.word	0x2000047c
 80021b8:	08005dd0 	.word	0x08005dd0
 80021bc:	2000055c 	.word	0x2000055c
 80021c0:	20000480 	.word	0x20000480

080021c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( xList * const pxEventList, portTickType xTicksToWait )
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d102      	bne.n	80021da <vTaskPlaceOnEventList+0x16>
 80021d4:	f001 f890 	bl	80032f8 <ulPortSetInterruptMask>
 80021d8:	e7fe      	b.n	80021d8 <vTaskPlaceOnEventList+0x14>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80021da:	4b12      	ldr	r3, [pc, #72]	; (8002224 <vTaskPlaceOnEventList+0x60>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	3318      	adds	r3, #24
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	4619      	mov	r1, r3
 80021e4:	f000 ff34 	bl	8003050 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 80021e8:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <vTaskPlaceOnEventList+0x60>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	3304      	adds	r3, #4
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 ff66 	bl	80030c0 <uxListRemove>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021fa:	d107      	bne.n	800220c <vTaskPlaceOnEventList+0x48>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80021fc:	4b09      	ldr	r3, [pc, #36]	; (8002224 <vTaskPlaceOnEventList+0x60>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	3304      	adds	r3, #4
 8002202:	4809      	ldr	r0, [pc, #36]	; (8002228 <vTaskPlaceOnEventList+0x64>)
 8002204:	4619      	mov	r1, r3
 8002206:	f000 feff 	bl	8003008 <vListInsertEnd>
 800220a:	e007      	b.n	800221c <vTaskPlaceOnEventList+0x58>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 800220c:	4b07      	ldr	r3, [pc, #28]	; (800222c <vTaskPlaceOnEventList+0x68>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	4413      	add	r3, r2
 8002214:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 f9d6 	bl	80025c8 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	2000047c 	.word	0x2000047c
 8002228:	20000540 	.word	0x20000540
 800222c:	20000558 	.word	0x20000558

08002230 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( xList * const pxEventList, portTickType xTicksToWait )
	{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d102      	bne.n	8002246 <vTaskPlaceOnEventListRestricted+0x16>
 8002240:	f001 f85a 	bl	80032f8 <ulPortSetInterruptMask>
 8002244:	e7fe      	b.n	8002244 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002246:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <vTaskPlaceOnEventListRestricted+0x48>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	3318      	adds	r3, #24
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	4619      	mov	r1, r3
 8002250:	f000 feda 	bl	8003008 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8002254:	4b08      	ldr	r3, [pc, #32]	; (8002278 <vTaskPlaceOnEventListRestricted+0x48>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	3304      	adds	r3, #4
 800225a:	4618      	mov	r0, r3
 800225c:	f000 ff30 	bl	80030c0 <uxListRemove>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 8002260:	4b06      	ldr	r3, [pc, #24]	; (800227c <vTaskPlaceOnEventListRestricted+0x4c>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	4413      	add	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 f9ac 	bl	80025c8 <prvAddCurrentTaskToDelayedList>
	}
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	2000047c 	.word	0x2000047c
 800227c:	20000558 	.word	0x20000558

08002280 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d102      	bne.n	800229c <xTaskRemoveFromEventList+0x1c>
 8002296:	f001 f82f 	bl	80032f8 <ulPortSetInterruptMask>
 800229a:	e7fe      	b.n	800229a <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	3318      	adds	r3, #24
 80022a0:	4618      	mov	r0, r3
 80022a2:	f000 ff0d 	bl	80030c0 <uxListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 80022a6:	4b1e      	ldr	r3, [pc, #120]	; (8002320 <xTaskRemoveFromEventList+0xa0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d11d      	bne.n	80022ea <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	3304      	adds	r3, #4
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 ff04 	bl	80030c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022bc:	4b19      	ldr	r3, [pc, #100]	; (8002324 <xTaskRemoveFromEventList+0xa4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d903      	bls.n	80022cc <xTaskRemoveFromEventList+0x4c>
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022c8:	4b16      	ldr	r3, [pc, #88]	; (8002324 <xTaskRemoveFromEventList+0xa4>)
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022d0:	4613      	mov	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4a13      	ldr	r2, [pc, #76]	; (8002328 <xTaskRemoveFromEventList+0xa8>)
 80022da:	441a      	add	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	3304      	adds	r3, #4
 80022e0:	4610      	mov	r0, r2
 80022e2:	4619      	mov	r1, r3
 80022e4:	f000 fe90 	bl	8003008 <vListInsertEnd>
 80022e8:	e005      	b.n	80022f6 <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	3318      	adds	r3, #24
 80022ee:	480f      	ldr	r0, [pc, #60]	; (800232c <xTaskRemoveFromEventList+0xac>)
 80022f0:	4619      	mov	r1, r3
 80022f2:	f000 fe89 	bl	8003008 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022fa:	4b0d      	ldr	r3, [pc, #52]	; (8002330 <xTaskRemoveFromEventList+0xb0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	429a      	cmp	r2, r3
 8002302:	d305      	bcc.n	8002310 <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 8002304:	2301      	movs	r3, #1
 8002306:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002308:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <xTaskRemoveFromEventList+0xb4>)
 800230a:	2201      	movs	r2, #1
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	e001      	b.n	8002314 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 8002310:	2300      	movs	r3, #0
 8002312:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8002314:	68fb      	ldr	r3, [r7, #12]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000564 	.word	0x20000564
 8002324:	2000055c 	.word	0x2000055c
 8002328:	20000480 	.word	0x20000480
 800232c:	20000514 	.word	0x20000514
 8002330:	2000047c 	.word	0x2000047c
 8002334:	2000056c 	.word	0x2000056c

08002338 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d102      	bne.n	800234c <vTaskSetTimeOutState+0x14>
 8002346:	f000 ffd7 	bl	80032f8 <ulPortSetInterruptMask>
 800234a:	e7fe      	b.n	800234a <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800234c:	4b05      	ldr	r3, [pc, #20]	; (8002364 <vTaskSetTimeOutState+0x2c>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002354:	4b04      	ldr	r3, [pc, #16]	; (8002368 <vTaskSetTimeOutState+0x30>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	605a      	str	r2, [r3, #4]
}
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20000570 	.word	0x20000570
 8002368:	20000558 	.word	0x20000558

0800236c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d102      	bne.n	8002382 <xTaskCheckForTimeOut+0x16>
 800237c:	f000 ffbc 	bl	80032f8 <ulPortSetInterruptMask>
 8002380:	e7fe      	b.n	8002380 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d102      	bne.n	800238e <xTaskCheckForTimeOut+0x22>
 8002388:	f000 ffb6 	bl	80032f8 <ulPortSetInterruptMask>
 800238c:	e7fe      	b.n	800238c <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 800238e:	f000 ff91 	bl	80032b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const portTickType xConstTickCount = xTickCount;
 8002392:	4b1c      	ldr	r3, [pc, #112]	; (8002404 <xTaskCheckForTimeOut+0x98>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023a0:	d102      	bne.n	80023a8 <xTaskCheckForTimeOut+0x3c>
			{
				xReturn = pdFALSE;
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	e026      	b.n	80023f6 <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b16      	ldr	r3, [pc, #88]	; (8002408 <xTaskCheckForTimeOut+0x9c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d007      	beq.n	80023c4 <xTaskCheckForTimeOut+0x58>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d802      	bhi.n	80023c4 <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 80023be:	2301      	movs	r3, #1
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	e018      	b.n	80023f6 <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	1ad2      	subs	r2, r2, r3
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d20e      	bcs.n	80023f2 <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6859      	ldr	r1, [r3, #4]
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	1acb      	subs	r3, r1, r3
 80023e0:	441a      	add	r2, r3
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff ffa6 	bl	8002338 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	e001      	b.n	80023f6 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
 80023f2:	2301      	movs	r3, #1
 80023f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80023f6:	f000 ff6d 	bl	80032d4 <vPortExitCritical>

	return xReturn;
 80023fa:	68fb      	ldr	r3, [r7, #12]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20000558 	.word	0x20000558
 8002408:	20000570 	.word	0x20000570

0800240c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002410:	4b03      	ldr	r3, [pc, #12]	; (8002420 <vTaskMissedYield+0x14>)
 8002412:	2201      	movs	r2, #1
 8002414:	601a      	str	r2, [r3, #0]
}
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	2000056c 	.word	0x2000056c

08002424 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 800242c:	f000 f892 	bl	8002554 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 8002430:	4b04      	ldr	r3, [pc, #16]	; (8002444 <prvIdleTask+0x20>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d901      	bls.n	800243c <prvIdleTask+0x18>
			{
				taskYIELD();
 8002438:	f000 ff2c 	bl	8003294 <vPortYield>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800243c:	f7ff f9b8 	bl	80017b0 <vApplicationIdleHook>
				}
				( void ) xTaskResumeAll();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8002440:	e7f4      	b.n	800242c <prvIdleTask+0x8>
 8002442:	bf00      	nop
 8002444:	20000480 	.word	0x20000480

08002448 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	603b      	str	r3, [r7, #0]
unsigned portBASE_TYPE x;

	/* Store the task name in the TCB. */
	for( x = ( unsigned portBASE_TYPE ) 0; x < ( unsigned portBASE_TYPE ) configMAX_TASK_NAME_LEN; x++ )
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	e012      	b.n	8002482 <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	4413      	add	r3, r2
 8002462:	781a      	ldrb	r2, [r3, #0]
 8002464:	68f9      	ldr	r1, [r7, #12]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	440b      	add	r3, r1
 800246a:	3330      	adds	r3, #48	; 0x30
 800246c:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	4413      	add	r3, r2
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d100      	bne.n	800247c <prvInitialiseTCBVariables+0x34>
		{
			break;
 800247a:	e005      	b.n	8002488 <prvInitialiseTCBVariables+0x40>
static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
unsigned portBASE_TYPE x;

	/* Store the task name in the TCB. */
	for( x = ( unsigned portBASE_TYPE ) 0; x < ( unsigned portBASE_TYPE ) configMAX_TASK_NAME_LEN; x++ )
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	3301      	adds	r3, #1
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	2b09      	cmp	r3, #9
 8002486:	d9e9      	bls.n	800245c <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = ( signed char ) '\0';
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( unsigned portBASE_TYPE ) configMAX_PRIORITIES )
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b04      	cmp	r3, #4
 8002494:	d901      	bls.n	800249a <prvInitialiseTCBVariables+0x52>
	{
		uxPriority = ( unsigned portBASE_TYPE ) configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 8002496:	2304      	movs	r3, #4
 8002498:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	3304      	adds	r3, #4
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 fda0 	bl	8002ff0 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	3318      	adds	r3, #24
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 fd9b 	bl	8002ff0 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f1c3 0205 	rsb	r2, r3, #5
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop

080024d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < ( unsigned portBASE_TYPE ) configMAX_PRIORITIES; uxPriority++ )
 80024de:	2300      	movs	r3, #0
 80024e0:	607b      	str	r3, [r7, #4]
 80024e2:	e00c      	b.n	80024fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4a11      	ldr	r2, [pc, #68]	; (8002534 <prvInitialiseTaskLists+0x5c>)
 80024f0:	4413      	add	r3, r2
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 fd5c 	bl	8002fb0 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < ( unsigned portBASE_TYPE ) configMAX_PRIORITIES; uxPriority++ )
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3301      	adds	r3, #1
 80024fc:	607b      	str	r3, [r7, #4]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b04      	cmp	r3, #4
 8002502:	d9ef      	bls.n	80024e4 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8002504:	480c      	ldr	r0, [pc, #48]	; (8002538 <prvInitialiseTaskLists+0x60>)
 8002506:	f000 fd53 	bl	8002fb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800250a:	480c      	ldr	r0, [pc, #48]	; (800253c <prvInitialiseTaskLists+0x64>)
 800250c:	f000 fd50 	bl	8002fb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002510:	480b      	ldr	r0, [pc, #44]	; (8002540 <prvInitialiseTaskLists+0x68>)
 8002512:	f000 fd4d 	bl	8002fb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002516:	480b      	ldr	r0, [pc, #44]	; (8002544 <prvInitialiseTaskLists+0x6c>)
 8002518:	f000 fd4a 	bl	8002fb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800251c:	480a      	ldr	r0, [pc, #40]	; (8002548 <prvInitialiseTaskLists+0x70>)
 800251e:	f000 fd47 	bl	8002fb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002522:	4b0a      	ldr	r3, [pc, #40]	; (800254c <prvInitialiseTaskLists+0x74>)
 8002524:	4a04      	ldr	r2, [pc, #16]	; (8002538 <prvInitialiseTaskLists+0x60>)
 8002526:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002528:	4b09      	ldr	r3, [pc, #36]	; (8002550 <prvInitialiseTaskLists+0x78>)
 800252a:	4a04      	ldr	r2, [pc, #16]	; (800253c <prvInitialiseTaskLists+0x64>)
 800252c:	601a      	str	r2, [r3, #0]
}
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	20000480 	.word	0x20000480
 8002538:	200004e4 	.word	0x200004e4
 800253c:	200004f8 	.word	0x200004f8
 8002540:	20000514 	.word	0x20000514
 8002544:	20000528 	.word	0x20000528
 8002548:	20000540 	.word	0x20000540
 800254c:	2000050c 	.word	0x2000050c
 8002550:	20000510 	.word	0x20000510

08002554 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 800255a:	e028      	b.n	80025ae <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 800255c:	f7ff fc3c 	bl	8001dd8 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002560:	4b16      	ldr	r3, [pc, #88]	; (80025bc <prvCheckTasksWaitingTermination+0x68>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	bf14      	ite	ne
 8002568:	2300      	movne	r3, #0
 800256a:	2301      	moveq	r3, #1
 800256c:	b2db      	uxtb	r3, r3
 800256e:	607b      	str	r3, [r7, #4]
			( void ) xTaskResumeAll();
 8002570:	f7ff fc40 	bl	8001df4 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d119      	bne.n	80025ae <prvCheckTasksWaitingTermination+0x5a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 800257a:	f000 fe9b 	bl	80032b4 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800257e:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <prvCheckTasksWaitingTermination+0x68>)
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	3304      	adds	r3, #4
 800258a:	4618      	mov	r0, r3
 800258c:	f000 fd98 	bl	80030c0 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <prvCheckTasksWaitingTermination+0x6c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	1e5a      	subs	r2, r3, #1
 8002596:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <prvCheckTasksWaitingTermination+0x6c>)
 8002598:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 800259a:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <prvCheckTasksWaitingTermination+0x70>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	1e5a      	subs	r2, r3, #1
 80025a0:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <prvCheckTasksWaitingTermination+0x70>)
 80025a2:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 80025a4:	f000 fe96 	bl	80032d4 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80025a8:	6838      	ldr	r0, [r7, #0]
 80025aa:	f000 f875 	bl	8002698 <prvDeleteTCB>
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 80025ae:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <prvCheckTasksWaitingTermination+0x70>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1d2      	bne.n	800255c <prvCheckTasksWaitingTermination+0x8>
				prvDeleteTCB( pxTCB );
			}
		}
	}
	#endif /* vTaskDelete */
}
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	20000528 	.word	0x20000528
 80025c0:	20000554 	.word	0x20000554
 80025c4:	2000053c 	.word	0x2000053c

080025c8 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80025d0:	4b13      	ldr	r3, [pc, #76]	; (8002620 <prvAddCurrentTaskToDelayedList+0x58>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 80025d8:	4b12      	ldr	r3, [pc, #72]	; (8002624 <prvAddCurrentTaskToDelayedList+0x5c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d209      	bcs.n	80025f6 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80025e2:	4b11      	ldr	r3, [pc, #68]	; (8002628 <prvAddCurrentTaskToDelayedList+0x60>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <prvAddCurrentTaskToDelayedList+0x58>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	3304      	adds	r3, #4
 80025ec:	4610      	mov	r0, r2
 80025ee:	4619      	mov	r1, r3
 80025f0:	f000 fd2e 	bl	8003050 <vListInsert>
 80025f4:	e010      	b.n	8002618 <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80025f6:	4b0d      	ldr	r3, [pc, #52]	; (800262c <prvAddCurrentTaskToDelayedList+0x64>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	4b09      	ldr	r3, [pc, #36]	; (8002620 <prvAddCurrentTaskToDelayedList+0x58>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	3304      	adds	r3, #4
 8002600:	4610      	mov	r0, r2
 8002602:	4619      	mov	r1, r3
 8002604:	f000 fd24 	bl	8003050 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8002608:	4b09      	ldr	r3, [pc, #36]	; (8002630 <prvAddCurrentTaskToDelayedList+0x68>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	429a      	cmp	r2, r3
 8002610:	d202      	bcs.n	8002618 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
 8002612:	4b07      	ldr	r3, [pc, #28]	; (8002630 <prvAddCurrentTaskToDelayedList+0x68>)
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	601a      	str	r2, [r3, #0]
		}
	}
}
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	2000047c 	.word	0x2000047c
 8002624:	20000558 	.word	0x20000558
 8002628:	20000510 	.word	0x20000510
 800262c:	2000050c 	.word	0x2000050c
 8002630:	20000004 	.word	0x20000004

08002634 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	6039      	str	r1, [r7, #0]
 800263e:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 8002640:	204c      	movs	r0, #76	; 0x4c
 8002642:	f001 f969 	bl	8003918 <pvPortMalloc>
 8002646:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d01f      	beq.n	800268e <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d106      	bne.n	8002662 <prvAllocateTCBAndStack+0x2e>
 8002654:	88fb      	ldrh	r3, [r7, #6]
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4618      	mov	r0, r3
 800265a:	f001 f95d 	bl	8003918 <pvPortMalloc>
 800265e:	4603      	mov	r3, r0
 8002660:	e000      	b.n	8002664 <prvAllocateTCBAndStack+0x30>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	2b00      	cmp	r3, #0
 800266e:	d105      	bne.n	800267c <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f001 f99d 	bl	80039b0 <vPortFree>
			pxNewTCB = NULL;
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	e008      	b.n	800268e <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002680:	88fb      	ldrh	r3, [r7, #6]
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4610      	mov	r0, r2
 8002686:	21a5      	movs	r1, #165	; 0xa5
 8002688:	461a      	mov	r2, r3
 800268a:	f003 f93b 	bl	8005904 <memset>
		}
	}

	return pxNewTCB;
 800268e:	68fb      	ldr	r3, [r7, #12]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a4:	4618      	mov	r0, r3
 80026a6:	f001 f983 	bl	80039b0 <vPortFree>
		vPortFree( pxTCB );
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f001 f980 	bl	80039b0 <vPortFree>
	}
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop

080026b8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80026be:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <xTaskGetCurrentTaskHandle+0x1c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	607b      	str	r3, [r7, #4]

		return xReturn;
 80026c4:	687b      	ldr	r3, [r7, #4]
	}
 80026c6:	4618      	mov	r0, r3
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	2000047c 	.word	0x2000047c

080026d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
 80026de:	4b0b      	ldr	r3, [pc, #44]	; (800270c <xTaskGetSchedulerState+0x34>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d102      	bne.n	80026ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80026e6:	2300      	movs	r3, #0
 80026e8:	607b      	str	r3, [r7, #4]
 80026ea:	e008      	b.n	80026fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 80026ec:	4b08      	ldr	r3, [pc, #32]	; (8002710 <xTaskGetSchedulerState+0x38>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d102      	bne.n	80026fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80026f4:	2301      	movs	r3, #1
 80026f6:	607b      	str	r3, [r7, #4]
 80026f8:	e001      	b.n	80026fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80026fa:	2302      	movs	r3, #2
 80026fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80026fe:	687b      	ldr	r3, [r7, #4]
	}
 8002700:	4618      	mov	r0, r3
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	20000560 	.word	0x20000560
 8002710:	20000564 	.word	0x20000564

08002714 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle const pxMutexHolder )
	{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d046      	beq.n	80027b4 <vTaskPriorityInherit+0xa0>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800272a:	4b24      	ldr	r3, [pc, #144]	; (80027bc <vTaskPriorityInherit+0xa8>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002730:	429a      	cmp	r2, r3
 8002732:	d23f      	bcs.n	80027b4 <vTaskPriorityInherit+0xa0>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002734:	4b21      	ldr	r3, [pc, #132]	; (80027bc <vTaskPriorityInherit+0xa8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273a:	f1c3 0205 	rsb	r2, r3, #5
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6959      	ldr	r1, [r3, #20]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4a1b      	ldr	r2, [pc, #108]	; (80027c0 <vTaskPriorityInherit+0xac>)
 8002754:	4413      	add	r3, r2
 8002756:	4299      	cmp	r1, r3
 8002758:	d101      	bne.n	800275e <vTaskPriorityInherit+0x4a>
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <vTaskPriorityInherit+0x4c>
 800275e:	2300      	movs	r3, #0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d022      	beq.n	80027aa <vTaskPriorityInherit+0x96>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	3304      	adds	r3, #4
 8002768:	4618      	mov	r0, r3
 800276a:	f000 fca9 	bl	80030c0 <uxListRemove>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800276e:	4b13      	ldr	r3, [pc, #76]	; (80027bc <vTaskPriorityInherit+0xa8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800277c:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <vTaskPriorityInherit+0xb0>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	429a      	cmp	r2, r3
 8002782:	d903      	bls.n	800278c <vTaskPriorityInherit+0x78>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002788:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <vTaskPriorityInherit+0xb0>)
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002790:	4613      	mov	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4a09      	ldr	r2, [pc, #36]	; (80027c0 <vTaskPriorityInherit+0xac>)
 800279a:	441a      	add	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	3304      	adds	r3, #4
 80027a0:	4610      	mov	r0, r2
 80027a2:	4619      	mov	r1, r3
 80027a4:	f000 fc30 	bl	8003008 <vListInsertEnd>
 80027a8:	e004      	b.n	80027b4 <vTaskPriorityInherit+0xa0>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80027aa:	4b04      	ldr	r3, [pc, #16]	; (80027bc <vTaskPriorityInherit+0xa8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	2000047c 	.word	0x2000047c
 80027c0:	20000480 	.word	0x20000480
 80027c4:	2000055c 	.word	0x2000055c

080027c8 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle const pxMutexHolder )
	{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d02c      	beq.n	8002834 <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d026      	beq.n	8002834 <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	3304      	adds	r3, #4
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 fc68 	bl	80030c0 <uxListRemove>
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fc:	f1c3 0205 	rsb	r2, r3, #5
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyList( pxTCB );
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002808:	4b0c      	ldr	r3, [pc, #48]	; (800283c <vTaskPriorityDisinherit+0x74>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	429a      	cmp	r2, r3
 800280e:	d903      	bls.n	8002818 <vTaskPriorityDisinherit+0x50>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002814:	4b09      	ldr	r3, [pc, #36]	; (800283c <vTaskPriorityDisinherit+0x74>)
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4a06      	ldr	r2, [pc, #24]	; (8002840 <vTaskPriorityDisinherit+0x78>)
 8002826:	441a      	add	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	3304      	adds	r3, #4
 800282c:	4610      	mov	r0, r2
 800282e:	4619      	mov	r1, r3
 8002830:	f000 fbea 	bl	8003008 <vListInsertEnd>
			}
		}
	}
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	2000055c 	.word	0x2000055c
 8002840:	20000480 	.word	0x20000480

08002844 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle xQueue, portBASE_TYPE xNewQueue )
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d102      	bne.n	800285e <xQueueGenericReset+0x1a>
 8002858:	f000 fd4e 	bl	80032f8 <ulPortSetInterruptMask>
 800285c:	e7fe      	b.n	800285c <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 800285e:	f000 fd29 	bl	80032b4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286a:	68f9      	ldr	r1, [r7, #12]
 800286c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800286e:	fb01 f303 	mul.w	r3, r1, r3
 8002872:	441a      	add	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288e:	3b01      	subs	r3, #1
 8002890:	68f9      	ldr	r1, [r7, #12]
 8002892:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002894:	fb01 f303 	mul.w	r3, r1, r3
 8002898:	441a      	add	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028a4:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028ac:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10e      	bne.n	80028d2 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d014      	beq.n	80028e6 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	3310      	adds	r3, #16
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff fcdd 	bl	8002280 <xTaskRemoveFromEventList>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d10c      	bne.n	80028e6 <xQueueGenericReset+0xa2>
				{
					portYIELD_WITHIN_API();
 80028cc:	f000 fce2 	bl	8003294 <vPortYield>
 80028d0:	e009      	b.n	80028e6 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	3310      	adds	r3, #16
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 fb6a 	bl	8002fb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	3324      	adds	r3, #36	; 0x24
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 fb65 	bl	8002fb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80028e6:	f000 fcf5 	bl	80032d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80028ea:	2301      	movs	r3, #1
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	4613      	mov	r3, r2
 8002900:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
 8002902:	2300      	movs	r3, #0
 8002904:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d02a      	beq.n	8002962 <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 800290c:	2050      	movs	r0, #80	; 0x50
 800290e:	f001 f803 	bl	8003918 <pvPortMalloc>
 8002912:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d023      	beq.n	8002962 <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	fb02 f303 	mul.w	r3, r2, r3
 8002922:	3301      	adds	r3, #1
 8002924:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 8002926:	6978      	ldr	r0, [r7, #20]
 8002928:	f000 fff6 	bl	8003918 <pvPortMalloc>
 800292c:	4602      	mov	r2, r0
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d010      	beq.n	800295c <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002946:	69b8      	ldr	r0, [r7, #24]
 8002948:	2101      	movs	r1, #1
 800294a:	f7ff ff7b 	bl	8002844 <xQueueGenericReset>

				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	79fa      	ldrb	r2, [r7, #7]
 8002952:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	61fb      	str	r3, [r7, #28]
 800295a:	e002      	b.n	8002962 <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 800295c:	69b8      	ldr	r0, [r7, #24]
 800295e:	f001 f827 	bl	80039b0 <vPortFree>
			}
		}
	}

	configASSERT( xReturn );
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d102      	bne.n	800296e <xQueueGenericCreate+0x7a>
 8002968:	f000 fcc6 	bl	80032f8 <ulPortSetInterruptMask>
 800296c:	e7fe      	b.n	800296c <xQueueGenericCreate+0x78>

	return xReturn;
 800296e:	69fb      	ldr	r3, [r7, #28]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3720      	adds	r7, #32
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
 8002984:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 8002986:	2300      	movs	r3, #0
 8002988:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d102      	bne.n	800299a <xQueueGenericSend+0x22>
 8002994:	f000 fcb0 	bl	80032f8 <ulPortSetInterruptMask>
 8002998:	e7fe      	b.n	8002998 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d103      	bne.n	80029a8 <xQueueGenericSend+0x30>
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <xQueueGenericSend+0x34>
 80029a8:	2301      	movs	r3, #1
 80029aa:	e000      	b.n	80029ae <xQueueGenericSend+0x36>
 80029ac:	2300      	movs	r3, #0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d102      	bne.n	80029b8 <xQueueGenericSend+0x40>
 80029b2:	f000 fca1 	bl	80032f8 <ulPortSetInterruptMask>
 80029b6:	e7fe      	b.n	80029b6 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d103      	bne.n	80029c6 <xQueueGenericSend+0x4e>
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <xQueueGenericSend+0x52>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <xQueueGenericSend+0x54>
 80029ca:	2300      	movs	r3, #0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d102      	bne.n	80029d6 <xQueueGenericSend+0x5e>
 80029d0:	f000 fc92 	bl	80032f8 <ulPortSetInterruptMask>
 80029d4:	e7fe      	b.n	80029d4 <xQueueGenericSend+0x5c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80029d6:	f000 fc6d 	bl	80032b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d302      	bcc.n	80029ec <xQueueGenericSend+0x74>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d116      	bne.n	8002a1a <xQueueGenericSend+0xa2>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80029ec:	69b8      	ldr	r0, [r7, #24]
 80029ee:	68b9      	ldr	r1, [r7, #8]
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	f000 f9a9 	bl	8002d48 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d009      	beq.n	8002a12 <xQueueGenericSend+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	3324      	adds	r3, #36	; 0x24
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff fc3c 	bl	8002280 <xTaskRemoveFromEventList>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <xQueueGenericSend+0x9a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							portYIELD_WITHIN_API();
 8002a0e:	f000 fc41 	bl	8003294 <vPortYield>
						}
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002a12:	f000 fc5f 	bl	80032d4 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e059      	b.n	8002ace <xQueueGenericSend+0x156>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d103      	bne.n	8002a28 <xQueueGenericSend+0xb0>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a20:	f000 fc58 	bl	80032d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	e052      	b.n	8002ace <xQueueGenericSend+0x156>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d106      	bne.n	8002a3c <xQueueGenericSend+0xc4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8002a2e:	f107 0310 	add.w	r3, r7, #16
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff fc80 	bl	8002338 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	61fb      	str	r3, [r7, #28]
				{
					/* Entry time was already set. */
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a3c:	f000 fc4a 	bl	80032d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a40:	f7ff f9ca 	bl	8001dd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a44:	f000 fc36 	bl	80032b4 <vPortEnterCritical>
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a50:	d102      	bne.n	8002a58 <xQueueGenericSend+0xe0>
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	2200      	movs	r2, #0
 8002a56:	645a      	str	r2, [r3, #68]	; 0x44
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a60:	d102      	bne.n	8002a68 <xQueueGenericSend+0xf0>
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	2200      	movs	r2, #0
 8002a66:	649a      	str	r2, [r3, #72]	; 0x48
 8002a68:	f000 fc34 	bl	80032d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a6c:	f107 0210 	add.w	r2, r7, #16
 8002a70:	1d3b      	adds	r3, r7, #4
 8002a72:	4610      	mov	r0, r2
 8002a74:	4619      	mov	r1, r3
 8002a76:	f7ff fc79 	bl	800236c <xTaskCheckForTimeOut>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d11e      	bne.n	8002abe <xQueueGenericSend+0x146>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002a80:	69b8      	ldr	r0, [r7, #24]
 8002a82:	f000 fa51 	bl	8002f28 <prvIsQueueFull>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d012      	beq.n	8002ab2 <xQueueGenericSend+0x13a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	f103 0210 	add.w	r2, r3, #16
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4610      	mov	r0, r2
 8002a96:	4619      	mov	r1, r3
 8002a98:	f7ff fb94 	bl	80021c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002a9c:	69b8      	ldr	r0, [r7, #24]
 8002a9e:	f000 f9e1 	bl	8002e64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002aa2:	f7ff f9a7 	bl	8001df4 <xTaskResumeAll>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10f      	bne.n	8002acc <xQueueGenericSend+0x154>
				{
					portYIELD_WITHIN_API();
 8002aac:	f000 fbf2 	bl	8003294 <vPortYield>
 8002ab0:	e00c      	b.n	8002acc <xQueueGenericSend+0x154>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ab2:	69b8      	ldr	r0, [r7, #24]
 8002ab4:	f000 f9d6 	bl	8002e64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ab8:	f7ff f99c 	bl	8001df4 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 8002abc:	e78b      	b.n	80029d6 <xQueueGenericSend+0x5e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002abe:	69b8      	ldr	r0, [r7, #24]
 8002ac0:	f000 f9d0 	bl	8002e64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ac4:	f7ff f996 	bl	8001df4 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	e000      	b.n	8002ace <xQueueGenericSend+0x156>
		}
	}
 8002acc:	e783      	b.n	80029d6 <xQueueGenericSend+0x5e>
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3720      	adds	r7, #32
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop

08002ad8 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle xQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
 8002ae4:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d102      	bne.n	8002af6 <xQueueGenericSendFromISR+0x1e>
 8002af0:	f000 fc02 	bl	80032f8 <ulPortSetInterruptMask>
 8002af4:	e7fe      	b.n	8002af4 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d103      	bne.n	8002b04 <xQueueGenericSendFromISR+0x2c>
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <xQueueGenericSendFromISR+0x30>
 8002b04:	2301      	movs	r3, #1
 8002b06:	e000      	b.n	8002b0a <xQueueGenericSendFromISR+0x32>
 8002b08:	2300      	movs	r3, #0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d102      	bne.n	8002b14 <xQueueGenericSendFromISR+0x3c>
 8002b0e:	f000 fbf3 	bl	80032f8 <ulPortSetInterruptMask>
 8002b12:	e7fe      	b.n	8002b12 <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d103      	bne.n	8002b22 <xQueueGenericSendFromISR+0x4a>
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d101      	bne.n	8002b26 <xQueueGenericSendFromISR+0x4e>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <xQueueGenericSendFromISR+0x50>
 8002b26:	2300      	movs	r3, #0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d102      	bne.n	8002b32 <xQueueGenericSendFromISR+0x5a>
 8002b2c:	f000 fbe4 	bl	80032f8 <ulPortSetInterruptMask>
 8002b30:	e7fe      	b.n	8002b30 <xQueueGenericSendFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b32:	f000 fc4f 	bl	80033d4 <vPortValidateInterruptPriority>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002b36:	f000 fbdf 	bl	80032f8 <ulPortSetInterruptMask>
 8002b3a:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d302      	bcc.n	8002b4e <xQueueGenericSendFromISR+0x76>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d124      	bne.n	8002b98 <xQueueGenericSendFromISR+0xc0>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b4e:	69b8      	ldr	r0, [r7, #24]
 8002b50:	68b9      	ldr	r1, [r7, #8]
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	f000 f8f8 	bl	8002d48 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b60:	d112      	bne.n	8002b88 <xQueueGenericSendFromISR+0xb0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d013      	beq.n	8002b92 <xQueueGenericSendFromISR+0xba>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	3324      	adds	r3, #36	; 0x24
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fb86 	bl	8002280 <xTaskRemoveFromEventList>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00b      	beq.n	8002b92 <xQueueGenericSendFromISR+0xba>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d008      	beq.n	8002b92 <xQueueGenericSendFromISR+0xba>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	e004      	b.n	8002b92 <xQueueGenericSendFromISR+0xba>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 8002b92:	2301      	movs	r3, #1
 8002b94:	61fb      	str	r3, [r7, #28]
 8002b96:	e001      	b.n	8002b9c <xQueueGenericSendFromISR+0xc4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8002b9c:	6978      	ldr	r0, [r7, #20]
 8002b9e:	f000 fbb5 	bl	800330c <vPortClearInterruptMask>

	return xReturn;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3720      	adds	r7, #32
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle xQueue, const void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08a      	sub	sp, #40	; 0x28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
 8002bb8:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8002bc2:	6a3b      	ldr	r3, [r7, #32]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d102      	bne.n	8002bce <xQueueGenericReceive+0x22>
 8002bc8:	f000 fb96 	bl	80032f8 <ulPortSetInterruptMask>
 8002bcc:	e7fe      	b.n	8002bcc <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d103      	bne.n	8002bdc <xQueueGenericReceive+0x30>
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <xQueueGenericReceive+0x34>
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e000      	b.n	8002be2 <xQueueGenericReceive+0x36>
 8002be0:	2300      	movs	r3, #0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d102      	bne.n	8002bec <xQueueGenericReceive+0x40>
 8002be6:	f000 fb87 	bl	80032f8 <ulPortSetInterruptMask>
 8002bea:	e7fe      	b.n	8002bea <xQueueGenericReceive+0x3e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002bec:	f000 fb62 	bl	80032b4 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d03b      	beq.n	8002c70 <xQueueGenericReceive+0xc4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002bfe:	6a38      	ldr	r0, [r7, #32]
 8002c00:	68b9      	ldr	r1, [r7, #8]
 8002c02:	f000 f909 	bl	8002e18 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d11c      	bne.n	8002c46 <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c10:	1e5a      	subs	r2, r3, #1
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d104      	bne.n	8002c28 <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( signed char * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as xTaskHandle is a typedef. */
 8002c1e:	f7ff fd4b 	bl	80026b8 <xTaskGetCurrentTaskHandle>
 8002c22:	4602      	mov	r2, r0
 8002c24:	6a3b      	ldr	r3, [r7, #32]
 8002c26:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d01b      	beq.n	8002c68 <xQueueGenericReceive+0xbc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	3310      	adds	r3, #16
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff fb23 	bl	8002280 <xTaskRemoveFromEventList>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d113      	bne.n	8002c68 <xQueueGenericReceive+0xbc>
						{
							portYIELD_WITHIN_API();
 8002c40:	f000 fb28 	bl	8003294 <vPortYield>
 8002c44:	e010      	b.n	8002c68 <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	69fa      	ldr	r2, [r7, #28]
 8002c4a:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d009      	beq.n	8002c68 <xQueueGenericReceive+0xbc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	3324      	adds	r3, #36	; 0x24
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff fb11 	bl	8002280 <xTaskRemoveFromEventList>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <xQueueGenericReceive+0xbc>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 8002c64:	f000 fb16 	bl	8003294 <vPortYield>
						}
					}
				}

				taskEXIT_CRITICAL();
 8002c68:	f000 fb34 	bl	80032d4 <vPortExitCritical>
				return pdPASS;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e066      	b.n	8002d3e <xQueueGenericReceive+0x192>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d103      	bne.n	8002c7e <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c76:	f000 fb2d 	bl	80032d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	e05f      	b.n	8002d3e <xQueueGenericReceive+0x192>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d106      	bne.n	8002c92 <xQueueGenericReceive+0xe6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8002c84:	f107 0314 	add.w	r3, r7, #20
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff fb55 	bl	8002338 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
				{
					/* Entry time was already set. */
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c92:	f000 fb1f 	bl	80032d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c96:	f7ff f89f 	bl	8001dd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c9a:	f000 fb0b 	bl	80032b4 <vPortEnterCritical>
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ca6:	d102      	bne.n	8002cae <xQueueGenericReceive+0x102>
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	2200      	movs	r2, #0
 8002cac:	645a      	str	r2, [r3, #68]	; 0x44
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cb6:	d102      	bne.n	8002cbe <xQueueGenericReceive+0x112>
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	649a      	str	r2, [r3, #72]	; 0x48
 8002cbe:	f000 fb09 	bl	80032d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002cc2:	f107 0214 	add.w	r2, r7, #20
 8002cc6:	1d3b      	adds	r3, r7, #4
 8002cc8:	4610      	mov	r0, r2
 8002cca:	4619      	mov	r1, r3
 8002ccc:	f7ff fb4e 	bl	800236c <xTaskCheckForTimeOut>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d12b      	bne.n	8002d2e <xQueueGenericReceive+0x182>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cd6:	6a38      	ldr	r0, [r7, #32]
 8002cd8:	f000 f910 	bl	8002efc <prvIsQueueEmpty>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d01f      	beq.n	8002d22 <xQueueGenericReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d108      	bne.n	8002cfc <xQueueGenericReceive+0x150>
					{
						portENTER_CRITICAL();
 8002cea:	f000 fae3 	bl	80032b4 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff fd0e 	bl	8002714 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 8002cf8:	f000 faec 	bl	80032d4 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
 8002cfe:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4610      	mov	r0, r2
 8002d06:	4619      	mov	r1, r3
 8002d08:	f7ff fa5c 	bl	80021c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002d0c:	6a38      	ldr	r0, [r7, #32]
 8002d0e:	f000 f8a9 	bl	8002e64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002d12:	f7ff f86f 	bl	8001df4 <xTaskResumeAll>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10f      	bne.n	8002d3c <xQueueGenericReceive+0x190>
				{
					portYIELD_WITHIN_API();
 8002d1c:	f000 faba 	bl	8003294 <vPortYield>
 8002d20:	e00c      	b.n	8002d3c <xQueueGenericReceive+0x190>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002d22:	6a38      	ldr	r0, [r7, #32]
 8002d24:	f000 f89e 	bl	8002e64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d28:	f7ff f864 	bl	8001df4 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 8002d2c:	e75e      	b.n	8002bec <xQueueGenericReceive+0x40>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8002d2e:	6a38      	ldr	r0, [r7, #32]
 8002d30:	f000 f898 	bl	8002e64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d34:	f7ff f85e 	bl	8001df4 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	e000      	b.n	8002d3e <xQueueGenericReceive+0x192>
		}
	}
 8002d3c:	e756      	b.n	8002bec <xQueueGenericReceive+0x40>
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3728      	adds	r7, #40	; 0x28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop

08002d48 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10c      	bne.n	8002d76 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d151      	bne.n	8002e08 <prvCopyDataToQueue+0xc0>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff fd2d 	bl	80027c8 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	605a      	str	r2, [r3, #4]
 8002d74:	e048      	b.n	8002e08 <prvCopyDataToQueue+0xc0>
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d11a      	bne.n	8002db2 <prvCopyDataToQueue+0x6a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	4610      	mov	r0, r2
 8002d86:	68b9      	ldr	r1, [r7, #8]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	f7fd fa27 	bl	80001dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	441a      	add	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d32f      	bcc.n	8002e08 <prvCopyDataToQueue+0xc0>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	609a      	str	r2, [r3, #8]
 8002db0:	e02a      	b.n	8002e08 <prvCopyDataToQueue+0xc0>
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	4610      	mov	r0, r2
 8002dbc:	68b9      	ldr	r1, [r7, #8]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	f7fd fa0c 	bl	80001dc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	425b      	negs	r3, r3
 8002dce:	441a      	add	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	68da      	ldr	r2, [r3, #12]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d207      	bcs.n	8002df0 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	425b      	negs	r3, r3
 8002dea:	441a      	add	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	60da      	str	r2, [r3, #12]
		}

		if( xPosition == queueOVERWRITE )
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d108      	bne.n	8002e08 <prvCopyDataToQueue+0xc0>
		{
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d004      	beq.n	8002e08 <prvCopyDataToQueue+0xc0>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e02:	1e5a      	subs	r2, r3, #1
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0c:	1c5a      	adds	r2, r3, #1
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void * const pvBuffer )
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d019      	beq.n	8002e5e <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	441a      	add	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d303      	bcc.n	8002e4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	60da      	str	r2, [r3, #12]
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	6838      	ldr	r0, [r7, #0]
 8002e56:	4611      	mov	r1, r2
 8002e58:	461a      	mov	r2, r3
 8002e5a:	f7fd f9bf 	bl	80001dc <memcpy>
	}
}
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQUEUE *pxQueue )
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002e6c:	f000 fa22 	bl	80032b4 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8002e70:	e014      	b.n	8002e9c <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00a      	beq.n	8002e90 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	3324      	adds	r3, #36	; 0x24
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff f9fe 	bl	8002280 <xTaskRemoveFromEventList>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <prvUnlockQueue+0x2e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 8002e8a:	f7ff fabf 	bl	800240c <vTaskMissedYield>
 8002e8e:	e000      	b.n	8002e92 <prvUnlockQueue+0x2e>
					}
				}
				else
				{
					break;
 8002e90:	e008      	b.n	8002ea4 <prvUnlockQueue+0x40>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e96:	1e5a      	subs	r2, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	dce6      	bgt.n	8002e72 <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002eaa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8002eac:	f000 fa12 	bl	80032d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002eb0:	f000 fa00 	bl	80032b4 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8002eb4:	e014      	b.n	8002ee0 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00f      	beq.n	8002ede <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	3310      	adds	r3, #16
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff f9dc 	bl	8002280 <xTaskRemoveFromEventList>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
 8002ece:	f7ff fa9d 	bl	800240c <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	1e5a      	subs	r2, r3, #1
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	645a      	str	r2, [r3, #68]	; 0x44
 8002edc:	e000      	b.n	8002ee0 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
 8002ede:	e003      	b.n	8002ee8 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	dce6      	bgt.n	8002eb6 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002eee:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002ef0:	f000 f9f0 	bl	80032d4 <vPortExitCritical>
}
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop

08002efc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQUEUE *pxQueue )
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8002f04:	f000 f9d6 	bl	80032b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE )  0 )
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d102      	bne.n	8002f16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002f10:	2301      	movs	r3, #1
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	e001      	b.n	8002f1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002f16:	2300      	movs	r3, #0
 8002f18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f1a:	f000 f9db 	bl	80032d4 <vPortExitCritical>

	return xReturn;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQUEUE *pxQueue )
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8002f30:	f000 f9c0 	bl	80032b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d102      	bne.n	8002f46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002f40:	2301      	movs	r3, #1
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	e001      	b.n	8002f4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002f46:	2300      	movs	r3, #0
 8002f48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f4a:	f000 f9c3 	bl	80032d4 <vPortExitCritical>

	return xReturn;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( xQueueHandle xQueue, portTickType xTicksToWait )
	{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
	xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002f66:	f000 f9a5 	bl	80032b4 <vPortEnterCritical>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f72:	d102      	bne.n	8002f7a <vQueueWaitForMessageRestricted+0x22>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	645a      	str	r2, [r3, #68]	; 0x44
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f82:	d102      	bne.n	8002f8a <vQueueWaitForMessageRestricted+0x32>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	649a      	str	r2, [r3, #72]	; 0x48
 8002f8a:	f000 f9a3 	bl	80032d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d105      	bne.n	8002fa2 <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	3324      	adds	r3, #36	; 0x24
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	6839      	ldr	r1, [r7, #0]
 8002f9e:	f7ff f947 	bl	8002230 <vTaskPlaceOnEventListRestricted>
		}
		prvUnlockQueue( pxQueue );
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f7ff ff5e 	bl	8002e64 <prvUnlockQueue>
	}
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop

08002fb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList * const pxList )
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f103 0208 	add.w	r2, r3, #8
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fc8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f103 0208 	add.w	r2, r3, #8
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f103 0208 	add.w	r2, r3, #8
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
}
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop

08002ff0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem * const pxItem )
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	611a      	str	r2, [r3, #16]
}
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList * const pxList, xListItem * const pxNewListItem )
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
xListItem * pxIndex;

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry. */
	pxIndex = pxList->pxIndex;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	1c5a      	adds	r2, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	601a      	str	r2, [r3, #0]
}
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop

08003050 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList * const pxList, xListItem * const pxNewListItem )
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003066:	d103      	bne.n	8003070 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	e00c      	b.n	800308a <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3308      	adds	r3, #8
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	e002      	b.n	800307e <vListInsert+0x2e>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	429a      	cmp	r2, r3
 8003088:	d9f6      	bls.n	8003078 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	601a      	str	r2, [r3, #0]
}
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem * const pxItemToRemove )
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6892      	ldr	r2, [r2, #8]
 80030d0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6852      	ldr	r2, [r2, #4]
 80030da:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d103      	bne.n	80030f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	1e5a      	subs	r2, r3, #1
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	3b04      	subs	r3, #4
 8003124:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800312c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	3b04      	subs	r3, #4
 8003132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	3b04      	subs	r3, #4
 800313e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) portTASK_RETURN_ADDRESS;	/* LR */
 8003140:	4a0c      	ldr	r2, [pc, #48]	; (8003174 <pxPortInitialiseStack+0x60>)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	3b14      	subs	r3, #20
 800314a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	3b04      	subs	r3, #4
 8003156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f06f 0202 	mvn.w	r2, #2
 800315e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	3b20      	subs	r3, #32
 8003164:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003166:	68fb      	ldr	r3, [r7, #12]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	08003179 	.word	0x08003179

08003178 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800317c:	4b05      	ldr	r3, [pc, #20]	; (8003194 <prvTaskExitError+0x1c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003184:	d002      	beq.n	800318c <prvTaskExitError+0x14>
 8003186:	f000 f8b7 	bl	80032f8 <ulPortSetInterruptMask>
 800318a:	e7fe      	b.n	800318a <prvTaskExitError+0x12>
	portDISABLE_INTERRUPTS();
 800318c:	f000 f8b4 	bl	80032f8 <ulPortSetInterruptMask>
	for( ;; );
 8003190:	e7fe      	b.n	8003190 <prvTaskExitError+0x18>
 8003192:	bf00      	nop
 8003194:	20000008 	.word	0x20000008

08003198 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003198:	4b05      	ldr	r3, [pc, #20]	; (80031b0 <pxCurrentTCBConst2>)
 800319a:	6819      	ldr	r1, [r3, #0]
 800319c:	6808      	ldr	r0, [r1, #0]
 800319e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031a2:	f380 8809 	msr	PSP, r0
 80031a6:	f04f 0000 	mov.w	r0, #0
 80031aa:	f380 8811 	msr	BASEPRI, r0
 80031ae:	4770      	bx	lr

080031b0 <pxCurrentTCBConst2>:
 80031b0:	2000047c 	.word	0x2000047c

080031b4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80031b4:	4803      	ldr	r0, [pc, #12]	; (80031c4 <prvPortStartFirstTask+0x10>)
 80031b6:	6800      	ldr	r0, [r0, #0]
 80031b8:	6800      	ldr	r0, [r0, #0]
 80031ba:	f380 8808 	msr	MSP, r0
 80031be:	b662      	cpsie	i
 80031c0:	df00      	svc	0
 80031c2:	bf00      	nop
 80031c4:	e000ed08 	.word	0xe000ed08

080031c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile unsigned long ulOriginalPriority;
		volatile char * const pcFirstUserPriorityRegister = ( volatile char * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80031ce:	4b2b      	ldr	r3, [pc, #172]	; (800327c <xPortStartScheduler+0xb4>)
 80031d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pcFirstUserPriorityRegister;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pcFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	22ff      	movs	r2, #255	; 0xff
 80031de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pcFirstUserPriorityRegister;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	4b23      	ldr	r3, [pc, #140]	; (8003280 <xPortStartScheduler+0xb8>)
 80031f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80031f6:	4b23      	ldr	r3, [pc, #140]	; (8003284 <xPortStartScheduler+0xbc>)
 80031f8:	2207      	movs	r2, #7
 80031fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031fc:	e009      	b.n	8003212 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80031fe:	4b21      	ldr	r3, [pc, #132]	; (8003284 <xPortStartScheduler+0xbc>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	1e5a      	subs	r2, r3, #1
 8003204:	4b1f      	ldr	r3, [pc, #124]	; (8003284 <xPortStartScheduler+0xbc>)
 8003206:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( unsigned char ) 0x01;
 8003208:	79fb      	ldrb	r3, [r7, #7]
 800320a:	b2db      	uxtb	r3, r3
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	b2db      	uxtb	r3, r3
 8003210:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	b2db      	uxtb	r3, r3
 8003216:	b2db      	uxtb	r3, r3
 8003218:	b25b      	sxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	dbef      	blt.n	80031fe <xPortStartScheduler+0x36>
			ucMaxPriorityValue <<= ( unsigned char ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800321e:	4b19      	ldr	r3, [pc, #100]	; (8003284 <xPortStartScheduler+0xbc>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	021a      	lsls	r2, r3, #8
 8003224:	4b17      	ldr	r3, [pc, #92]	; (8003284 <xPortStartScheduler+0xbc>)
 8003226:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003228:	4b16      	ldr	r3, [pc, #88]	; (8003284 <xPortStartScheduler+0xbc>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003230:	4b14      	ldr	r3, [pc, #80]	; (8003284 <xPortStartScheduler+0xbc>)
 8003232:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pcFirstUserPriorityRegister = ulOriginalPriority;
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	b2da      	uxtb	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800323c:	4b12      	ldr	r3, [pc, #72]	; (8003288 <xPortStartScheduler+0xc0>)
 800323e:	4a12      	ldr	r2, [pc, #72]	; (8003288 <xPortStartScheduler+0xc0>)
 8003240:	6812      	ldr	r2, [r2, #0]
 8003242:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003246:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003248:	4b0f      	ldr	r3, [pc, #60]	; (8003288 <xPortStartScheduler+0xc0>)
 800324a:	4a0f      	ldr	r2, [pc, #60]	; (8003288 <xPortStartScheduler+0xc0>)
 800324c:	6812      	ldr	r2, [r2, #0]
 800324e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8003252:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003254:	f000 f89a 	bl	800338c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003258:	4b0c      	ldr	r3, [pc, #48]	; (800328c <xPortStartScheduler+0xc4>)
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800325e:	f000 f8af 	bl	80033c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003262:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <xPortStartScheduler+0xc8>)
 8003264:	4a0a      	ldr	r2, [pc, #40]	; (8003290 <xPortStartScheduler+0xc8>)
 8003266:	6812      	ldr	r2, [r2, #0]
 8003268:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800326c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800326e:	f7ff ffa1 	bl	80031b4 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	e000e400 	.word	0xe000e400
 8003280:	20000578 	.word	0x20000578
 8003284:	2000057c 	.word	0x2000057c
 8003288:	e000ed20 	.word	0xe000ed20
 800328c:	20000008 	.word	0x20000008
 8003290:	e000ef34 	.word	0xe000ef34

08003294 <vPortYield>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003298:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <vPortYield+0x1c>)
 800329a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800329e:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 80032a0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80032a4:	f3bf 8f6f 	isb	sy
}
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	e000ed04 	.word	0xe000ed04

080032b4 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80032b8:	f000 f81e 	bl	80032f8 <ulPortSetInterruptMask>
	uxCriticalNesting++;
 80032bc:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <vPortEnterCritical+0x1c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	4b03      	ldr	r3, [pc, #12]	; (80032d0 <vPortEnterCritical+0x1c>)
 80032c4:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 80032c6:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80032ca:	f3bf 8f6f 	isb	sy
}
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	20000008 	.word	0x20000008

080032d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 80032d8:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <vPortExitCritical+0x20>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	1e5a      	subs	r2, r3, #1
 80032de:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <vPortExitCritical+0x20>)
 80032e0:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 80032e2:	4b04      	ldr	r3, [pc, #16]	; (80032f4 <vPortExitCritical+0x20>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d102      	bne.n	80032f0 <vPortExitCritical+0x1c>
	{
		portENABLE_INTERRUPTS();
 80032ea:	2000      	movs	r0, #0
 80032ec:	f000 f80e 	bl	800330c <vPortClearInterruptMask>
	}
}
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20000008 	.word	0x20000008

080032f8 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
 80032f8:	f3ef 8011 	mrs	r0, BASEPRI
 80032fc:	f04f 0150 	mov.w	r1, #80	; 0x50
 8003300:	f381 8811 	msr	BASEPRI, r1
 8003304:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	bf00      	nop

0800330c <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
 800330c:	f380 8811 	msr	BASEPRI, r0
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop

08003314 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003314:	f3ef 8009 	mrs	r0, PSP
 8003318:	4b11      	ldr	r3, [pc, #68]	; (8003360 <pxCurrentTCBConst>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	f01e 0f10 	tst.w	lr, #16
 8003320:	bf08      	it	eq
 8003322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800332a:	6010      	str	r0, [r2, #0]
 800332c:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003330:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003334:	f380 8811 	msr	BASEPRI, r0
 8003338:	f7fe feca 	bl	80020d0 <vTaskSwitchContext>
 800333c:	f04f 0000 	mov.w	r0, #0
 8003340:	f380 8811 	msr	BASEPRI, r0
 8003344:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003348:	6819      	ldr	r1, [r3, #0]
 800334a:	6808      	ldr	r0, [r1, #0]
 800334c:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003350:	f01e 0f10 	tst.w	lr, #16
 8003354:	bf08      	it	eq
 8003356:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800335a:	f380 8809 	msr	PSP, r0
 800335e:	4770      	bx	lr

08003360 <pxCurrentTCBConst>:
 8003360:	2000047c 	.word	0x2000047c

08003364 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 8003368:	f7ff ffc6 	bl	80032f8 <ulPortSetInterruptMask>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800336c:	f7fe fdda 	bl	8001f24 <xTaskIncrementTick>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003376:	4b04      	ldr	r3, [pc, #16]	; (8003388 <SysTick_Handler+0x24>)
 8003378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800337c:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 800337e:	2000      	movs	r0, #0
 8003380:	f7ff ffc4 	bl	800330c <vPortClearInterruptMask>
}
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	e000ed04 	.word	0xe000ed04

0800338c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
 8003390:	4b07      	ldr	r3, [pc, #28]	; (80033b0 <vPortSetupTimerInterrupt+0x24>)
 8003392:	4a08      	ldr	r2, [pc, #32]	; (80033b4 <vPortSetupTimerInterrupt+0x28>)
 8003394:	6811      	ldr	r1, [r2, #0]
 8003396:	4a08      	ldr	r2, [pc, #32]	; (80033b8 <vPortSetupTimerInterrupt+0x2c>)
 8003398:	fba2 0201 	umull	r0, r2, r2, r1
 800339c:	0992      	lsrs	r2, r2, #6
 800339e:	3a01      	subs	r2, #1
 80033a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80033a2:	4b06      	ldr	r3, [pc, #24]	; (80033bc <vPortSetupTimerInterrupt+0x30>)
 80033a4:	2207      	movs	r2, #7
 80033a6:	601a      	str	r2, [r3, #0]
}
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	e000e014 	.word	0xe000e014
 80033b4:	20000000 	.word	0x20000000
 80033b8:	10624dd3 	.word	0x10624dd3
 80033bc:	e000e010 	.word	0xe000e010

080033c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80033c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80033d0 <vPortEnableVFP+0x10>
 80033c4:	6801      	ldr	r1, [r0, #0]
 80033c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80033ca:	6001      	str	r1, [r0, #0]
 80033cc:	4770      	bx	lr
 80033ce:	0000      	.short	0x0000
 80033d0:	e000ed88 	.word	0xe000ed88

080033d4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
	unsigned long ulCurrentInterrupt;
	unsigned char ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80033da:	f3ef 8305 	mrs	r3, IPSR
 80033de:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b0f      	cmp	r3, #15
 80033e4:	d90c      	bls.n	8003400 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80033e6:	4a0d      	ldr	r2, [pc, #52]	; (800341c <vPortValidateInterruptPriority+0x48>)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4413      	add	r3, r2
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80033f0:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <vPortValidateInterruptPriority+0x4c>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	78fa      	ldrb	r2, [r7, #3]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d202      	bcs.n	8003400 <vPortValidateInterruptPriority+0x2c>
 80033fa:	f7ff ff7d 	bl	80032f8 <ulPortSetInterruptMask>
 80033fe:	e7fe      	b.n	80033fe <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003400:	4b08      	ldr	r3, [pc, #32]	; (8003424 <vPortValidateInterruptPriority+0x50>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003408:	4b07      	ldr	r3, [pc, #28]	; (8003428 <vPortValidateInterruptPriority+0x54>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	429a      	cmp	r2, r3
 800340e:	d902      	bls.n	8003416 <vPortValidateInterruptPriority+0x42>
 8003410:	f7ff ff72 	bl	80032f8 <ulPortSetInterruptMask>
 8003414:	e7fe      	b.n	8003414 <vPortValidateInterruptPriority+0x40>
	}
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	e000e3f0 	.word	0xe000e3f0
 8003420:	20000578 	.word	0x20000578
 8003424:	e000ed0c 	.word	0xe000ed0c
 8003428:	2000057c 	.word	0x2000057c

0800342c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
 8003432:	2300      	movs	r3, #0
 8003434:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003436:	f000 fa45 	bl	80038c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800343a:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <xTimerCreateTimerTask+0x4c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00f      	beq.n	8003462 <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 8003442:	2302      	movs	r3, #2
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	2300      	movs	r3, #0
 8003448:	9301      	str	r3, [sp, #4]
 800344a:	2300      	movs	r3, #0
 800344c:	9302      	str	r3, [sp, #8]
 800344e:	2300      	movs	r3, #0
 8003450:	9303      	str	r3, [sp, #12]
 8003452:	480a      	ldr	r0, [pc, #40]	; (800347c <xTimerCreateTimerTask+0x50>)
 8003454:	490a      	ldr	r1, [pc, #40]	; (8003480 <xTimerCreateTimerTask+0x54>)
 8003456:	f44f 7282 	mov.w	r2, #260	; 0x104
 800345a:	2300      	movs	r3, #0
 800345c:	f7fe fab0 	bl	80019c0 <xTaskGenericCreate>
 8003460:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d102      	bne.n	800346e <xTimerCreateTimerTask+0x42>
 8003468:	f7ff ff46 	bl	80032f8 <ulPortSetInterruptMask>
 800346c:	e7fe      	b.n	800346c <xTimerCreateTimerTask+0x40>
	return xReturn;
 800346e:	687b      	ldr	r3, [r7, #4]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	200005b0 	.word	0x200005b0
 800347c:	08003581 	.word	0x08003581
 8003480:	08005b9c 	.word	0x08005b9c

08003484 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
 8003490:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
 8003492:	2300      	movs	r3, #0
 8003494:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003496:	4b1d      	ldr	r3, [pc, #116]	; (800350c <xTimerGenericCommand+0x88>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d030      	beq.n	8003500 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d11c      	bne.n	80034ea <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80034b0:	f7ff f912 	bl	80026d8 <xTaskGetSchedulerState>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d10b      	bne.n	80034d2 <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
 80034ba:	4b14      	ldr	r3, [pc, #80]	; (800350c <xTimerGenericCommand+0x88>)
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	f107 0310 	add.w	r3, r7, #16
 80034c2:	4610      	mov	r0, r2
 80034c4:	4619      	mov	r1, r3
 80034c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034c8:	2300      	movs	r3, #0
 80034ca:	f7ff fa55 	bl	8002978 <xQueueGenericSend>
 80034ce:	61f8      	str	r0, [r7, #28]
 80034d0:	e016      	b.n	8003500 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80034d2:	4b0e      	ldr	r3, [pc, #56]	; (800350c <xTimerGenericCommand+0x88>)
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	f107 0310 	add.w	r3, r7, #16
 80034da:	4610      	mov	r0, r2
 80034dc:	4619      	mov	r1, r3
 80034de:	2200      	movs	r2, #0
 80034e0:	2300      	movs	r3, #0
 80034e2:	f7ff fa49 	bl	8002978 <xQueueGenericSend>
 80034e6:	61f8      	str	r0, [r7, #28]
 80034e8:	e00a      	b.n	8003500 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80034ea:	4b08      	ldr	r3, [pc, #32]	; (800350c <xTimerGenericCommand+0x88>)
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	f107 0310 	add.w	r3, r7, #16
 80034f2:	4610      	mov	r0, r2
 80034f4:	4619      	mov	r1, r3
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	2300      	movs	r3, #0
 80034fa:	f7ff faed 	bl	8002ad8 <xQueueGenericSendFromISR>
 80034fe:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
 8003500:	69fb      	ldr	r3, [r7, #28]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3720      	adds	r7, #32
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	200005b0 	.word	0x200005b0

08003510 <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af02      	add	r7, sp, #8
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800351a:	4b18      	ldr	r3, [pc, #96]	; (800357c <prvProcessExpiredTimer+0x6c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	60fb      	str	r3, [r7, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	3304      	adds	r3, #4
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff fdc9 	bl	80030c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d11b      	bne.n	800356e <prvProcessExpiredTimer+0x5e>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	699a      	ldr	r2, [r3, #24]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4413      	add	r3, r2
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	4619      	mov	r1, r3
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f000 f8a9 	bl	800369c <prvInsertTimerInActiveList>
 800354a:	4603      	mov	r3, r0
 800354c:	2b01      	cmp	r3, #1
 800354e:	d10e      	bne.n	800356e <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8003550:	2300      	movs	r3, #0
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	2100      	movs	r1, #0
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	2300      	movs	r3, #0
 800355c:	f7ff ff92 	bl	8003484 <xTimerGenericCommand>
 8003560:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d102      	bne.n	800356e <prvProcessExpiredTimer+0x5e>
 8003568:	f7ff fec6 	bl	80032f8 <ulPortSetInterruptMask>
 800356c:	e7fe      	b.n	800356c <prvProcessExpiredTimer+0x5c>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	4798      	blx	r3
}
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	200005a8 	.word	0x200005a8

08003580 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003588:	f107 0308 	add.w	r3, r7, #8
 800358c:	4618      	mov	r0, r3
 800358e:	f000 f83f 	bl	8003610 <prvGetNextExpireTime>
 8003592:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	4619      	mov	r1, r3
 800359a:	f000 f803 	bl	80035a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800359e:	f000 f8bf 	bl	8003720 <prvProcessReceivedCommands>
	}
 80035a2:	e7f1      	b.n	8003588 <prvTimerTask+0x8>

080035a4 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
 80035ae:	f7fe fc13 	bl	8001dd8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80035b2:	f107 0308 	add.w	r3, r7, #8
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 f84e 	bl	8003658 <prvSampleTimeNow>
 80035bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d11e      	bne.n	8003602 <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10a      	bne.n	80035e0 <prvProcessTimerOrBlockTask+0x3c>
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d806      	bhi.n	80035e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80035d2:	f7fe fc0f 	bl	8001df4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	68f9      	ldr	r1, [r7, #12]
 80035da:	f7ff ff99 	bl	8003510 <prvProcessExpiredTimer>
 80035de:	e012      	b.n	8003606 <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 80035e0:	4b0a      	ldr	r3, [pc, #40]	; (800360c <prvProcessTimerOrBlockTask+0x68>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	1acb      	subs	r3, r1, r3
 80035ea:	4610      	mov	r0, r2
 80035ec:	4619      	mov	r1, r3
 80035ee:	f7ff fcb3 	bl	8002f58 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 80035f2:	f7fe fbff 	bl	8001df4 <xTaskResumeAll>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d104      	bne.n	8003606 <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 80035fc:	f7ff fe4a 	bl	8003294 <vPortYield>
 8003600:	e001      	b.n	8003606 <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 8003602:	f7fe fbf7 	bl	8001df4 <xTaskResumeAll>
		}
	}
}
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	200005b0 	.word	0x200005b0

08003610 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003618:	4b0e      	ldr	r3, [pc, #56]	; (8003654 <prvGetNextExpireTime+0x44>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	bf14      	ite	ne
 8003622:	2300      	movne	r3, #0
 8003624:	2301      	moveq	r3, #1
 8003626:	b2db      	uxtb	r3, r3
 8003628:	461a      	mov	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d105      	bne.n	8003642 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003636:	4b07      	ldr	r3, [pc, #28]	; (8003654 <prvGetNextExpireTime+0x44>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	60fb      	str	r3, [r7, #12]
 8003640:	e001      	b.n	8003646 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
 8003642:	2300      	movs	r3, #0
 8003644:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003646:	68fb      	ldr	r3, [r7, #12]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3714      	adds	r7, #20
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	200005a8 	.word	0x200005a8

08003658 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003660:	f7fe fc4e 	bl	8001f00 <xTaskGetTickCount>
 8003664:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003666:	4b0c      	ldr	r3, [pc, #48]	; (8003698 <prvSampleTimeNow+0x40>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	429a      	cmp	r2, r3
 800366e:	d208      	bcs.n	8003682 <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
 8003670:	4b09      	ldr	r3, [pc, #36]	; (8003698 <prvSampleTimeNow+0x40>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f000 f8cb 	bl	8003810 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	e002      	b.n	8003688 <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003688:	4b03      	ldr	r3, [pc, #12]	; (8003698 <prvSampleTimeNow+0x40>)
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800368e:	68fb      	ldr	r3, [r7, #12]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	200005b4 	.word	0x200005b4

0800369c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
 80036a8:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
 80036aa:	2300      	movs	r3, #0
 80036ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d812      	bhi.n	80036e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	1ad2      	subs	r2, r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d302      	bcc.n	80036d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80036d0:	2301      	movs	r3, #1
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	e01b      	b.n	800370e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80036d6:	4b10      	ldr	r3, [pc, #64]	; (8003718 <prvInsertTimerInActiveList+0x7c>)
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	3304      	adds	r3, #4
 80036de:	4610      	mov	r0, r2
 80036e0:	4619      	mov	r1, r3
 80036e2:	f7ff fcb5 	bl	8003050 <vListInsert>
 80036e6:	e012      	b.n	800370e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d206      	bcs.n	80036fe <prvInsertTimerInActiveList+0x62>
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d302      	bcc.n	80036fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80036f8:	2301      	movs	r3, #1
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	e007      	b.n	800370e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80036fe:	4b07      	ldr	r3, [pc, #28]	; (800371c <prvInsertTimerInActiveList+0x80>)
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	3304      	adds	r3, #4
 8003706:	4610      	mov	r0, r2
 8003708:	4619      	mov	r1, r3
 800370a:	f7ff fca1 	bl	8003050 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800370e:	697b      	ldr	r3, [r7, #20]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3718      	adds	r7, #24
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	200005ac 	.word	0x200005ac
 800371c:	200005a8 	.word	0x200005a8

08003720 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08a      	sub	sp, #40	; 0x28
 8003724:	af02      	add	r7, sp, #8
xTIMER_MESSAGE xMessage;
xTIMER *pxTimer;
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003726:	e060      	b.n	80037ea <prvProcessReceivedCommands+0xca>
	{
		pxTimer = xMessage.pxTimer;
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	61fb      	str	r3, [r7, #28]

		if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d004      	beq.n	800373e <prvProcessReceivedCommands+0x1e>
		{
			/* The timer is in a list, remove it. */
			( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	3304      	adds	r3, #4
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff fcc1 	bl	80030c0 <uxListRemove>
		it must be present in the function call.  prvSampleTimeNow() must be 
		called after the message is received from xTimerQueue so there is no 
		possibility of a higher priority task adding a message to the message
		queue with a time that is ahead of the timer daemon task (because it
		pre-empted the timer daemon task after the xTimeNow value was set). */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800373e:	1d3b      	adds	r3, r7, #4
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff ff89 	bl	8003658 <prvSampleTimeNow>
 8003746:	61b8      	str	r0, [r7, #24]

		switch( xMessage.xMessageID )
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2b03      	cmp	r3, #3
 800374c:	d84c      	bhi.n	80037e8 <prvProcessReceivedCommands+0xc8>
 800374e:	a201      	add	r2, pc, #4	; (adr r2, 8003754 <prvProcessReceivedCommands+0x34>)
 8003750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003754:	08003765 	.word	0x08003765
 8003758:	080037e9 	.word	0x080037e9
 800375c:	080037b7 	.word	0x080037b7
 8003760:	080037e1 	.word	0x080037e1
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	441a      	add	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	69f8      	ldr	r0, [r7, #28]
 8003770:	4611      	mov	r1, r2
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	f7ff ff92 	bl	800369c <prvInsertTimerInActiveList>
 8003778:	4603      	mov	r3, r0
 800377a:	2b01      	cmp	r3, #1
 800377c:	d11a      	bne.n	80037b4 <prvProcessReceivedCommands+0x94>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	69f8      	ldr	r0, [r7, #28]
 8003784:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d112      	bne.n	80037b4 <prvProcessReceivedCommands+0x94>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	4413      	add	r3, r2
 8003796:	2200      	movs	r2, #0
 8003798:	9200      	str	r2, [sp, #0]
 800379a:	69f8      	ldr	r0, [r7, #28]
 800379c:	2100      	movs	r1, #0
 800379e:	461a      	mov	r2, r3
 80037a0:	2300      	movs	r3, #0
 80037a2:	f7ff fe6f 	bl	8003484 <xTimerGenericCommand>
 80037a6:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d102      	bne.n	80037b4 <prvProcessReceivedCommands+0x94>
 80037ae:	f7ff fda3 	bl	80032f8 <ulPortSetInterruptMask>
 80037b2:	e7fe      	b.n	80037b2 <prvProcessReceivedCommands+0x92>
						( void ) xResult;
					}
				}
				break;
 80037b4:	e019      	b.n	80037ea <prvProcessReceivedCommands+0xca>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d102      	bne.n	80037ca <prvProcessReceivedCommands+0xaa>
 80037c4:	f7ff fd98 	bl	80032f8 <ulPortSetInterruptMask>
 80037c8:	e7fe      	b.n	80037c8 <prvProcessReceivedCommands+0xa8>
				longer or shorter than the old one.  The command time is 
				therefore set to the current time, and as the period cannot be
				zero the next expiry time can only be in the future, meaning
				(unlike for the xTimerStart() case above) there is no fail case
				that needs to be handled here. */
				( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	699a      	ldr	r2, [r3, #24]
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	4413      	add	r3, r2
 80037d2:	69f8      	ldr	r0, [r7, #28]
 80037d4:	4619      	mov	r1, r3
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	f7ff ff5f 	bl	800369c <prvInsertTimerInActiveList>
				break;
 80037de:	e004      	b.n	80037ea <prvProcessReceivedCommands+0xca>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
 80037e0:	69f8      	ldr	r0, [r7, #28]
 80037e2:	f000 f8e5 	bl	80039b0 <vPortFree>
				break;
 80037e6:	e000      	b.n	80037ea <prvProcessReceivedCommands+0xca>

			default	:
				/* Don't expect to get here. */
				break;
 80037e8:	bf00      	nop
xTIMER_MESSAGE xMessage;
xTIMER *pxTimer;
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80037ea:	4b08      	ldr	r3, [pc, #32]	; (800380c <prvProcessReceivedCommands+0xec>)
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	f107 0308 	add.w	r3, r7, #8
 80037f2:	4610      	mov	r0, r2
 80037f4:	4619      	mov	r1, r3
 80037f6:	2200      	movs	r2, #0
 80037f8:	2300      	movs	r3, #0
 80037fa:	f7ff f9d7 	bl	8002bac <xQueueGenericReceive>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d191      	bne.n	8003728 <prvProcessReceivedCommands+0x8>
			default	:
				/* Don't expect to get here. */
				break;
		}
	}
}
 8003804:	3720      	adds	r7, #32
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	200005b0 	.word	0x200005b0

08003810 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b08a      	sub	sp, #40	; 0x28
 8003814:	af02      	add	r7, sp, #8
 8003816:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003818:	e03d      	b.n	8003896 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800381a:	4b28      	ldr	r3, [pc, #160]	; (80038bc <prvSwitchTimerLists+0xac>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003824:	4b25      	ldr	r3, [pc, #148]	; (80038bc <prvSwitchTimerLists+0xac>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	61bb      	str	r3, [r7, #24]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	3304      	adds	r3, #4
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff fc44 	bl	80030c0 <uxListRemove>

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	69b8      	ldr	r0, [r7, #24]
 800383e:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d126      	bne.n	8003896 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	699a      	ldr	r2, [r3, #24]
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	4413      	add	r3, r2
 8003850:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	429a      	cmp	r2, r3
 8003858:	d90e      	bls.n	8003878 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003866:	4b15      	ldr	r3, [pc, #84]	; (80038bc <prvSwitchTimerLists+0xac>)
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	3304      	adds	r3, #4
 800386e:	4610      	mov	r0, r2
 8003870:	4619      	mov	r1, r3
 8003872:	f7ff fbed 	bl	8003050 <vListInsert>
 8003876:	e00e      	b.n	8003896 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8003878:	2300      	movs	r3, #0
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	69b8      	ldr	r0, [r7, #24]
 800387e:	2100      	movs	r1, #0
 8003880:	69fa      	ldr	r2, [r7, #28]
 8003882:	2300      	movs	r3, #0
 8003884:	f7ff fdfe 	bl	8003484 <xTimerGenericCommand>
 8003888:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d102      	bne.n	8003896 <prvSwitchTimerLists+0x86>
 8003890:	f7ff fd32 	bl	80032f8 <ulPortSetInterruptMask>
 8003894:	e7fe      	b.n	8003894 <prvSwitchTimerLists+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003896:	4b09      	ldr	r3, [pc, #36]	; (80038bc <prvSwitchTimerLists+0xac>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1bc      	bne.n	800381a <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
 80038a0:	4b06      	ldr	r3, [pc, #24]	; (80038bc <prvSwitchTimerLists+0xac>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
 80038a6:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <prvSwitchTimerLists+0xb0>)
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	4b04      	ldr	r3, [pc, #16]	; (80038bc <prvSwitchTimerLists+0xac>)
 80038ac:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80038ae:	4b04      	ldr	r3, [pc, #16]	; (80038c0 <prvSwitchTimerLists+0xb0>)
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	601a      	str	r2, [r3, #0]
}
 80038b4:	3720      	adds	r7, #32
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	200005a8 	.word	0x200005a8
 80038c0:	200005ac 	.word	0x200005ac

080038c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80038c8:	f7ff fcf4 	bl	80032b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80038cc:	4b0d      	ldr	r3, [pc, #52]	; (8003904 <prvCheckForValidListAndQueue+0x40>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d113      	bne.n	80038fc <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 80038d4:	480c      	ldr	r0, [pc, #48]	; (8003908 <prvCheckForValidListAndQueue+0x44>)
 80038d6:	f7ff fb6b 	bl	8002fb0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80038da:	480c      	ldr	r0, [pc, #48]	; (800390c <prvCheckForValidListAndQueue+0x48>)
 80038dc:	f7ff fb68 	bl	8002fb0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80038e0:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <prvCheckForValidListAndQueue+0x4c>)
 80038e2:	4a09      	ldr	r2, [pc, #36]	; (8003908 <prvCheckForValidListAndQueue+0x44>)
 80038e4:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80038e6:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <prvCheckForValidListAndQueue+0x50>)
 80038e8:	4a08      	ldr	r2, [pc, #32]	; (800390c <prvCheckForValidListAndQueue+0x48>)
 80038ea:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
 80038ec:	200a      	movs	r0, #10
 80038ee:	210c      	movs	r1, #12
 80038f0:	2200      	movs	r2, #0
 80038f2:	f7fe ffff 	bl	80028f4 <xQueueGenericCreate>
 80038f6:	4602      	mov	r2, r0
 80038f8:	4b02      	ldr	r3, [pc, #8]	; (8003904 <prvCheckForValidListAndQueue+0x40>)
 80038fa:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
 80038fc:	f7ff fcea 	bl	80032d4 <vPortExitCritical>
}
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	200005b0 	.word	0x200005b0
 8003908:	20000580 	.word	0x20000580
 800390c:	20000594 	.word	0x20000594
 8003910:	200005a8 	.word	0x200005a8
 8003914:	200005ac 	.word	0x200005ac

08003918 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8003920:	2300      	movs	r3, #0
 8003922:	60fb      	str	r3, [r7, #12]
static unsigned char *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	2b00      	cmp	r3, #0
 800392c:	d004      	beq.n	8003938 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f023 0307 	bic.w	r3, r3, #7
 8003934:	3308      	adds	r3, #8
 8003936:	607b      	str	r3, [r7, #4]
		}
	#endif

	vTaskSuspendAll();
 8003938:	f7fe fa4e 	bl	8001dd8 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 800393c:	4b18      	ldr	r3, [pc, #96]	; (80039a0 <pvPortMalloc+0x88>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d105      	bne.n	8003950 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
 8003944:	4b17      	ldr	r3, [pc, #92]	; (80039a4 <pvPortMalloc+0x8c>)
 8003946:	f023 0307 	bic.w	r3, r3, #7
 800394a:	461a      	mov	r2, r3
 800394c:	4b14      	ldr	r3, [pc, #80]	; (80039a0 <pvPortMalloc+0x88>)
 800394e:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8003950:	4b15      	ldr	r3, [pc, #84]	; (80039a8 <pvPortMalloc+0x90>)
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	441a      	add	r2, r3
 8003958:	4b14      	ldr	r3, [pc, #80]	; (80039ac <pvPortMalloc+0x94>)
 800395a:	429a      	cmp	r2, r3
 800395c:	d813      	bhi.n	8003986 <pvPortMalloc+0x6e>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 800395e:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <pvPortMalloc+0x90>)
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	441a      	add	r2, r3
 8003966:	4b10      	ldr	r3, [pc, #64]	; (80039a8 <pvPortMalloc+0x90>)
 8003968:	681b      	ldr	r3, [r3, #0]
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800396a:	429a      	cmp	r2, r3
 800396c:	d90b      	bls.n	8003986 <pvPortMalloc+0x6e>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 800396e:	4b0c      	ldr	r3, [pc, #48]	; (80039a0 <pvPortMalloc+0x88>)
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	4b0d      	ldr	r3, [pc, #52]	; (80039a8 <pvPortMalloc+0x90>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4413      	add	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 800397a:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <pvPortMalloc+0x90>)
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	441a      	add	r2, r3
 8003982:	4b09      	ldr	r3, [pc, #36]	; (80039a8 <pvPortMalloc+0x90>)
 8003984:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}	
	xTaskResumeAll();
 8003986:	f7fe fa35 	bl	8001df4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <pvPortMalloc+0x7c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8003990:	f7fd ff08 	bl	80017a4 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 8003994:	68fb      	ldr	r3, [r7, #12]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	200131bc 	.word	0x200131bc
 80039a4:	200005c0 	.word	0x200005c0
 80039a8:	200131b8 	.word	0x200131b8
 80039ac:	00012bf7 	.word	0x00012bf7

080039b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d002      	beq.n	80039c4 <vPortFree+0x14>
 80039be:	f7ff fc9b 	bl	80032f8 <ulPortSetInterruptMask>
 80039c2:	e7fe      	b.n	80039c2 <vPortFree+0x12>
}
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop

080039cc <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	4603      	mov	r3, r0
 80039d4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 80039d6:	79fa      	ldrb	r2, [r7, #7]
 80039d8:	4b10      	ldr	r3, [pc, #64]	; (8003a1c <STM_EVAL_LEDInit+0x50>)
 80039da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039de:	4618      	mov	r0, r3
 80039e0:	2101      	movs	r1, #1
 80039e2:	f001 fc07 	bl	80051f4 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 80039e6:	79fa      	ldrb	r2, [r7, #7]
 80039e8:	4b0d      	ldr	r3, [pc, #52]	; (8003a20 <STM_EVAL_LEDInit+0x54>)
 80039ea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80039ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80039f0:	2301      	movs	r3, #1
 80039f2:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80039f4:	2300      	movs	r3, #0
 80039f6:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80039f8:	2301      	movs	r3, #1
 80039fa:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80039fc:	2302      	movs	r3, #2
 80039fe:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8003a00:	79fa      	ldrb	r2, [r7, #7]
 8003a02:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <STM_EVAL_LEDInit+0x58>)
 8003a04:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003a08:	f107 0308 	add.w	r3, r7, #8
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	4619      	mov	r1, r3
 8003a10:	f001 f9b2 	bl	8004d78 <GPIO_Init>
}
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	08005dec 	.word	0x08005dec
 8003a20:	08005de4 	.word	0x08005de4
 8003a24:	2000000c 	.word	0x2000000c

08003a28 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a36:	d013      	beq.n	8003a60 <NVIC_PriorityGroupConfig+0x38>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003a3e:	d00f      	beq.n	8003a60 <NVIC_PriorityGroupConfig+0x38>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003a46:	d00b      	beq.n	8003a60 <NVIC_PriorityGroupConfig+0x38>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a4e:	d007      	beq.n	8003a60 <NVIC_PriorityGroupConfig+0x38>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a56:	d003      	beq.n	8003a60 <NVIC_PriorityGroupConfig+0x38>
 8003a58:	4806      	ldr	r0, [pc, #24]	; (8003a74 <NVIC_PriorityGroupConfig+0x4c>)
 8003a5a:	2173      	movs	r1, #115	; 0x73
 8003a5c:	f7fd feb6 	bl	80017cc <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8003a60:	4a05      	ldr	r2, [pc, #20]	; (8003a78 <NVIC_PriorityGroupConfig+0x50>)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a6c:	60d3      	str	r3, [r2, #12]
}
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	08005ba4 	.word	0x08005ba4
 8003a78:	e000ed00 	.word	0xe000ed00

08003a7c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8003a84:	2300      	movs	r3, #0
 8003a86:	73fb      	strb	r3, [r7, #15]
 8003a88:	2300      	movs	r3, #0
 8003a8a:	73bb      	strb	r3, [r7, #14]
 8003a8c:	230f      	movs	r3, #15
 8003a8e:	737b      	strb	r3, [r7, #13]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	78db      	ldrb	r3, [r3, #3]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d007      	beq.n	8003aa8 <NVIC_Init+0x2c>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	78db      	ldrb	r3, [r3, #3]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d003      	beq.n	8003aa8 <NVIC_Init+0x2c>
 8003aa0:	4830      	ldr	r0, [pc, #192]	; (8003b64 <NVIC_Init+0xe8>)
 8003aa2:	2187      	movs	r1, #135	; 0x87
 8003aa4:	f7fd fe92 	bl	80017cc <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	785b      	ldrb	r3, [r3, #1]
 8003aac:	2b0f      	cmp	r3, #15
 8003aae:	d903      	bls.n	8003ab8 <NVIC_Init+0x3c>
 8003ab0:	482c      	ldr	r0, [pc, #176]	; (8003b64 <NVIC_Init+0xe8>)
 8003ab2:	2188      	movs	r1, #136	; 0x88
 8003ab4:	f7fd fe8a 	bl	80017cc <assert_failed>
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	789b      	ldrb	r3, [r3, #2]
 8003abc:	2b0f      	cmp	r3, #15
 8003abe:	d903      	bls.n	8003ac8 <NVIC_Init+0x4c>
 8003ac0:	4828      	ldr	r0, [pc, #160]	; (8003b64 <NVIC_Init+0xe8>)
 8003ac2:	2189      	movs	r1, #137	; 0x89
 8003ac4:	f7fd fe82 	bl	80017cc <assert_failed>
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	78db      	ldrb	r3, [r3, #3]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d037      	beq.n	8003b40 <NVIC_Init+0xc4>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8003ad0:	4b25      	ldr	r3, [pc, #148]	; (8003b68 <NVIC_Init+0xec>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ada:	0a1b      	lsrs	r3, r3, #8
 8003adc:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
 8003ae0:	f1c3 0304 	rsb	r3, r3, #4
 8003ae4:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8003ae6:	7b7a      	ldrb	r2, [r7, #13]
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
 8003aea:	fa42 f303 	asr.w	r3, r2, r3
 8003aee:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	785b      	ldrb	r3, [r3, #1]
 8003af4:	461a      	mov	r2, r3
 8003af6:	7bbb      	ldrb	r3, [r7, #14]
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	789a      	ldrb	r2, [r3, #2]
 8003b02:	7b7b      	ldrb	r3, [r7, #13]
 8003b04:	4013      	ands	r3, r2
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8003b0e:	7bfb      	ldrb	r3, [r7, #15]
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8003b14:	4a15      	ldr	r2, [pc, #84]	; (8003b6c <NVIC_Init+0xf0>)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	7bfa      	ldrb	r2, [r7, #15]
 8003b1e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003b22:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <NVIC_Init+0xf0>)
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	7812      	ldrb	r2, [r2, #0]
 8003b28:	0952      	lsrs	r2, r2, #5
 8003b2a:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003b2c:	6879      	ldr	r1, [r7, #4]
 8003b2e:	7809      	ldrb	r1, [r1, #0]
 8003b30:	f001 011f 	and.w	r1, r1, #31
 8003b34:	2001      	movs	r0, #1
 8003b36:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003b3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003b3e:	e00e      	b.n	8003b5e <NVIC_Init+0xe2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003b40:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <NVIC_Init+0xf0>)
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	7812      	ldrb	r2, [r2, #0]
 8003b46:	0952      	lsrs	r2, r2, #5
 8003b48:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	7809      	ldrb	r1, [r1, #0]
 8003b4e:	f001 011f 	and.w	r1, r1, #31
 8003b52:	2001      	movs	r0, #1
 8003b54:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003b58:	3220      	adds	r2, #32
 8003b5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	08005ba4 	.word	0x08005ba4
 8003b68:	e000ed00 	.word	0xe000ed00
 8003b6c:	e000e100 	.word	0xe000e100

08003b70 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	4b72      	ldr	r3, [pc, #456]	; (8003d44 <DMA_DeInit+0x1d4>)
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d03f      	beq.n	8003c00 <DMA_DeInit+0x90>
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	4b71      	ldr	r3, [pc, #452]	; (8003d48 <DMA_DeInit+0x1d8>)
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d03b      	beq.n	8003c00 <DMA_DeInit+0x90>
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	4b70      	ldr	r3, [pc, #448]	; (8003d4c <DMA_DeInit+0x1dc>)
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d037      	beq.n	8003c00 <DMA_DeInit+0x90>
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	4b6f      	ldr	r3, [pc, #444]	; (8003d50 <DMA_DeInit+0x1e0>)
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d033      	beq.n	8003c00 <DMA_DeInit+0x90>
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	4b6e      	ldr	r3, [pc, #440]	; (8003d54 <DMA_DeInit+0x1e4>)
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d02f      	beq.n	8003c00 <DMA_DeInit+0x90>
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	4b6d      	ldr	r3, [pc, #436]	; (8003d58 <DMA_DeInit+0x1e8>)
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d02b      	beq.n	8003c00 <DMA_DeInit+0x90>
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	4b6c      	ldr	r3, [pc, #432]	; (8003d5c <DMA_DeInit+0x1ec>)
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d027      	beq.n	8003c00 <DMA_DeInit+0x90>
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	4b6b      	ldr	r3, [pc, #428]	; (8003d60 <DMA_DeInit+0x1f0>)
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d023      	beq.n	8003c00 <DMA_DeInit+0x90>
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	4b6a      	ldr	r3, [pc, #424]	; (8003d64 <DMA_DeInit+0x1f4>)
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d01f      	beq.n	8003c00 <DMA_DeInit+0x90>
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	4b69      	ldr	r3, [pc, #420]	; (8003d68 <DMA_DeInit+0x1f8>)
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d01b      	beq.n	8003c00 <DMA_DeInit+0x90>
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	4b68      	ldr	r3, [pc, #416]	; (8003d6c <DMA_DeInit+0x1fc>)
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d017      	beq.n	8003c00 <DMA_DeInit+0x90>
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	4b67      	ldr	r3, [pc, #412]	; (8003d70 <DMA_DeInit+0x200>)
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d013      	beq.n	8003c00 <DMA_DeInit+0x90>
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	4b66      	ldr	r3, [pc, #408]	; (8003d74 <DMA_DeInit+0x204>)
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d00f      	beq.n	8003c00 <DMA_DeInit+0x90>
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	4b65      	ldr	r3, [pc, #404]	; (8003d78 <DMA_DeInit+0x208>)
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d00b      	beq.n	8003c00 <DMA_DeInit+0x90>
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	4b64      	ldr	r3, [pc, #400]	; (8003d7c <DMA_DeInit+0x20c>)
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d007      	beq.n	8003c00 <DMA_DeInit+0x90>
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	4b63      	ldr	r3, [pc, #396]	; (8003d80 <DMA_DeInit+0x210>)
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d003      	beq.n	8003c00 <DMA_DeInit+0x90>
 8003bf8:	4862      	ldr	r0, [pc, #392]	; (8003d84 <DMA_DeInit+0x214>)
 8003bfa:	21bf      	movs	r1, #191	; 0xbf
 8003bfc:	f7fd fde6 	bl	80017cc <assert_failed>

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f023 0201 	bic.w	r2, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2221      	movs	r2, #33	; 0x21
 8003c2e:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	4b44      	ldr	r3, [pc, #272]	; (8003d44 <DMA_DeInit+0x1d4>)
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d103      	bne.n	8003c40 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8003c38:	4b53      	ldr	r3, [pc, #332]	; (8003d88 <DMA_DeInit+0x218>)
 8003c3a:	223d      	movs	r2, #61	; 0x3d
 8003c3c:	609a      	str	r2, [r3, #8]
 8003c3e:	e07e      	b.n	8003d3e <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	4b41      	ldr	r3, [pc, #260]	; (8003d48 <DMA_DeInit+0x1d8>)
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d104      	bne.n	8003c52 <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8003c48:	4b4f      	ldr	r3, [pc, #316]	; (8003d88 <DMA_DeInit+0x218>)
 8003c4a:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8003c4e:	609a      	str	r2, [r3, #8]
 8003c50:	e075      	b.n	8003d3e <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	4b3d      	ldr	r3, [pc, #244]	; (8003d4c <DMA_DeInit+0x1dc>)
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d104      	bne.n	8003c64 <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8003c5a:	4b4b      	ldr	r3, [pc, #300]	; (8003d88 <DMA_DeInit+0x218>)
 8003c5c:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8003c60:	609a      	str	r2, [r3, #8]
 8003c62:	e06c      	b.n	8003d3e <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	4b3a      	ldr	r3, [pc, #232]	; (8003d50 <DMA_DeInit+0x1e0>)
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d104      	bne.n	8003c76 <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8003c6c:	4b46      	ldr	r3, [pc, #280]	; (8003d88 <DMA_DeInit+0x218>)
 8003c6e:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8003c72:	609a      	str	r2, [r3, #8]
 8003c74:	e063      	b.n	8003d3e <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	4b36      	ldr	r3, [pc, #216]	; (8003d54 <DMA_DeInit+0x1e4>)
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d103      	bne.n	8003c86 <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8003c7e:	4b42      	ldr	r3, [pc, #264]	; (8003d88 <DMA_DeInit+0x218>)
 8003c80:	4a42      	ldr	r2, [pc, #264]	; (8003d8c <DMA_DeInit+0x21c>)
 8003c82:	60da      	str	r2, [r3, #12]
 8003c84:	e05b      	b.n	8003d3e <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	4b33      	ldr	r3, [pc, #204]	; (8003d58 <DMA_DeInit+0x1e8>)
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d103      	bne.n	8003c96 <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8003c8e:	4b3e      	ldr	r3, [pc, #248]	; (8003d88 <DMA_DeInit+0x218>)
 8003c90:	4a3f      	ldr	r2, [pc, #252]	; (8003d90 <DMA_DeInit+0x220>)
 8003c92:	60da      	str	r2, [r3, #12]
 8003c94:	e053      	b.n	8003d3e <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	4b30      	ldr	r3, [pc, #192]	; (8003d5c <DMA_DeInit+0x1ec>)
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d103      	bne.n	8003ca6 <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8003c9e:	4b3a      	ldr	r3, [pc, #232]	; (8003d88 <DMA_DeInit+0x218>)
 8003ca0:	4a3c      	ldr	r2, [pc, #240]	; (8003d94 <DMA_DeInit+0x224>)
 8003ca2:	60da      	str	r2, [r3, #12]
 8003ca4:	e04b      	b.n	8003d3e <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	4b2d      	ldr	r3, [pc, #180]	; (8003d60 <DMA_DeInit+0x1f0>)
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d104      	bne.n	8003cb8 <DMA_DeInit+0x148>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8003cae:	4b36      	ldr	r3, [pc, #216]	; (8003d88 <DMA_DeInit+0x218>)
 8003cb0:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8003cb4:	60da      	str	r2, [r3, #12]
 8003cb6:	e042      	b.n	8003d3e <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	4b2a      	ldr	r3, [pc, #168]	; (8003d64 <DMA_DeInit+0x1f4>)
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d103      	bne.n	8003cc8 <DMA_DeInit+0x158>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8003cc0:	4b35      	ldr	r3, [pc, #212]	; (8003d98 <DMA_DeInit+0x228>)
 8003cc2:	223d      	movs	r2, #61	; 0x3d
 8003cc4:	609a      	str	r2, [r3, #8]
 8003cc6:	e03a      	b.n	8003d3e <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	4b27      	ldr	r3, [pc, #156]	; (8003d68 <DMA_DeInit+0x1f8>)
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d104      	bne.n	8003cda <DMA_DeInit+0x16a>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8003cd0:	4b31      	ldr	r3, [pc, #196]	; (8003d98 <DMA_DeInit+0x228>)
 8003cd2:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8003cd6:	609a      	str	r2, [r3, #8]
 8003cd8:	e031      	b.n	8003d3e <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	4b23      	ldr	r3, [pc, #140]	; (8003d6c <DMA_DeInit+0x1fc>)
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d104      	bne.n	8003cec <DMA_DeInit+0x17c>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8003ce2:	4b2d      	ldr	r3, [pc, #180]	; (8003d98 <DMA_DeInit+0x228>)
 8003ce4:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8003ce8:	609a      	str	r2, [r3, #8]
 8003cea:	e028      	b.n	8003d3e <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	4b20      	ldr	r3, [pc, #128]	; (8003d70 <DMA_DeInit+0x200>)
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d104      	bne.n	8003cfe <DMA_DeInit+0x18e>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8003cf4:	4b28      	ldr	r3, [pc, #160]	; (8003d98 <DMA_DeInit+0x228>)
 8003cf6:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8003cfa:	609a      	str	r2, [r3, #8]
 8003cfc:	e01f      	b.n	8003d3e <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	4b1c      	ldr	r3, [pc, #112]	; (8003d74 <DMA_DeInit+0x204>)
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d103      	bne.n	8003d0e <DMA_DeInit+0x19e>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8003d06:	4b24      	ldr	r3, [pc, #144]	; (8003d98 <DMA_DeInit+0x228>)
 8003d08:	4a20      	ldr	r2, [pc, #128]	; (8003d8c <DMA_DeInit+0x21c>)
 8003d0a:	60da      	str	r2, [r3, #12]
 8003d0c:	e017      	b.n	8003d3e <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	4b19      	ldr	r3, [pc, #100]	; (8003d78 <DMA_DeInit+0x208>)
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d103      	bne.n	8003d1e <DMA_DeInit+0x1ae>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8003d16:	4b20      	ldr	r3, [pc, #128]	; (8003d98 <DMA_DeInit+0x228>)
 8003d18:	4a1d      	ldr	r2, [pc, #116]	; (8003d90 <DMA_DeInit+0x220>)
 8003d1a:	60da      	str	r2, [r3, #12]
 8003d1c:	e00f      	b.n	8003d3e <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	4b16      	ldr	r3, [pc, #88]	; (8003d7c <DMA_DeInit+0x20c>)
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d103      	bne.n	8003d2e <DMA_DeInit+0x1be>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8003d26:	4b1c      	ldr	r3, [pc, #112]	; (8003d98 <DMA_DeInit+0x228>)
 8003d28:	4a1a      	ldr	r2, [pc, #104]	; (8003d94 <DMA_DeInit+0x224>)
 8003d2a:	60da      	str	r2, [r3, #12]
 8003d2c:	e007      	b.n	8003d3e <DMA_DeInit+0x1ce>
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	4b13      	ldr	r3, [pc, #76]	; (8003d80 <DMA_DeInit+0x210>)
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d103      	bne.n	8003d3e <DMA_DeInit+0x1ce>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8003d36:	4b18      	ldr	r3, [pc, #96]	; (8003d98 <DMA_DeInit+0x228>)
 8003d38:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8003d3c:	60da      	str	r2, [r3, #12]
    }
  }
}
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40026010 	.word	0x40026010
 8003d48:	40026028 	.word	0x40026028
 8003d4c:	40026040 	.word	0x40026040
 8003d50:	40026058 	.word	0x40026058
 8003d54:	40026070 	.word	0x40026070
 8003d58:	40026088 	.word	0x40026088
 8003d5c:	400260a0 	.word	0x400260a0
 8003d60:	400260b8 	.word	0x400260b8
 8003d64:	40026410 	.word	0x40026410
 8003d68:	40026428 	.word	0x40026428
 8003d6c:	40026440 	.word	0x40026440
 8003d70:	40026458 	.word	0x40026458
 8003d74:	40026470 	.word	0x40026470
 8003d78:	40026488 	.word	0x40026488
 8003d7c:	400264a0 	.word	0x400264a0
 8003d80:	400264b8 	.word	0x400264b8
 8003d84:	08005bec 	.word	0x08005bec
 8003d88:	40026000 	.word	0x40026000
 8003d8c:	2000003d 	.word	0x2000003d
 8003d90:	20000f40 	.word	0x20000f40
 8003d94:	203d0000 	.word	0x203d0000
 8003d98:	40026400 	.word	0x40026400

08003d9c <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003da6:	2300      	movs	r3, #0
 8003da8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	4b98      	ldr	r3, [pc, #608]	; (8004010 <DMA_Init+0x274>)
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d040      	beq.n	8003e34 <DMA_Init+0x98>
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	4b97      	ldr	r3, [pc, #604]	; (8004014 <DMA_Init+0x278>)
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d03c      	beq.n	8003e34 <DMA_Init+0x98>
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	4b96      	ldr	r3, [pc, #600]	; (8004018 <DMA_Init+0x27c>)
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d038      	beq.n	8003e34 <DMA_Init+0x98>
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	4b95      	ldr	r3, [pc, #596]	; (800401c <DMA_Init+0x280>)
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d034      	beq.n	8003e34 <DMA_Init+0x98>
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	4b94      	ldr	r3, [pc, #592]	; (8004020 <DMA_Init+0x284>)
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d030      	beq.n	8003e34 <DMA_Init+0x98>
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	4b93      	ldr	r3, [pc, #588]	; (8004024 <DMA_Init+0x288>)
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d02c      	beq.n	8003e34 <DMA_Init+0x98>
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	4b92      	ldr	r3, [pc, #584]	; (8004028 <DMA_Init+0x28c>)
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d028      	beq.n	8003e34 <DMA_Init+0x98>
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	4b91      	ldr	r3, [pc, #580]	; (800402c <DMA_Init+0x290>)
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d024      	beq.n	8003e34 <DMA_Init+0x98>
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	4b90      	ldr	r3, [pc, #576]	; (8004030 <DMA_Init+0x294>)
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d020      	beq.n	8003e34 <DMA_Init+0x98>
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	4b8f      	ldr	r3, [pc, #572]	; (8004034 <DMA_Init+0x298>)
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d01c      	beq.n	8003e34 <DMA_Init+0x98>
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	4b8e      	ldr	r3, [pc, #568]	; (8004038 <DMA_Init+0x29c>)
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d018      	beq.n	8003e34 <DMA_Init+0x98>
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	4b8d      	ldr	r3, [pc, #564]	; (800403c <DMA_Init+0x2a0>)
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d014      	beq.n	8003e34 <DMA_Init+0x98>
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	4b8c      	ldr	r3, [pc, #560]	; (8004040 <DMA_Init+0x2a4>)
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d010      	beq.n	8003e34 <DMA_Init+0x98>
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	4b8b      	ldr	r3, [pc, #556]	; (8004044 <DMA_Init+0x2a8>)
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d00c      	beq.n	8003e34 <DMA_Init+0x98>
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	4b8a      	ldr	r3, [pc, #552]	; (8004048 <DMA_Init+0x2ac>)
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d008      	beq.n	8003e34 <DMA_Init+0x98>
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	4b89      	ldr	r3, [pc, #548]	; (800404c <DMA_Init+0x2b0>)
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d004      	beq.n	8003e34 <DMA_Init+0x98>
 8003e2a:	4889      	ldr	r0, [pc, #548]	; (8004050 <DMA_Init+0x2b4>)
 8003e2c:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8003e30:	f7fd fccc 	bl	80017cc <assert_failed>
  assert_param(IS_DMA_CHANNEL(DMA_InitStruct->DMA_Channel));
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d027      	beq.n	8003e8c <DMA_Init+0xf0>
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e44:	d022      	beq.n	8003e8c <DMA_Init+0xf0>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e4e:	d01d      	beq.n	8003e8c <DMA_Init+0xf0>
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003e58:	d018      	beq.n	8003e8c <DMA_Init+0xf0>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e62:	d013      	beq.n	8003e8c <DMA_Init+0xf0>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8003e6c:	d00e      	beq.n	8003e8c <DMA_Init+0xf0>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003e76:	d009      	beq.n	8003e8c <DMA_Init+0xf0>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8003e80:	d004      	beq.n	8003e8c <DMA_Init+0xf0>
 8003e82:	4873      	ldr	r0, [pc, #460]	; (8004050 <DMA_Init+0x2b4>)
 8003e84:	f240 113d 	movw	r1, #317	; 0x13d
 8003e88:	f7fd fca0 	bl	80017cc <assert_failed>
  assert_param(IS_DMA_DIRECTION(DMA_InitStruct->DMA_DIR));
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00c      	beq.n	8003eae <DMA_Init+0x112>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	2b40      	cmp	r3, #64	; 0x40
 8003e9a:	d008      	beq.n	8003eae <DMA_Init+0x112>
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	2b80      	cmp	r3, #128	; 0x80
 8003ea2:	d004      	beq.n	8003eae <DMA_Init+0x112>
 8003ea4:	486a      	ldr	r0, [pc, #424]	; (8004050 <DMA_Init+0x2b4>)
 8003ea6:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8003eaa:	f7fd fc8f 	bl	80017cc <assert_failed>
  assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d004      	beq.n	8003ec0 <DMA_Init+0x124>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ebe:	d304      	bcc.n	8003eca <DMA_Init+0x12e>
 8003ec0:	4863      	ldr	r0, [pc, #396]	; (8004050 <DMA_Init+0x2b4>)
 8003ec2:	f240 113f 	movw	r1, #319	; 0x13f
 8003ec6:	f7fd fc81 	bl	80017cc <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ed2:	d008      	beq.n	8003ee6 <DMA_Init+0x14a>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d004      	beq.n	8003ee6 <DMA_Init+0x14a>
 8003edc:	485c      	ldr	r0, [pc, #368]	; (8004050 <DMA_Init+0x2b4>)
 8003ede:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003ee2:	f7fd fc73 	bl	80017cc <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eee:	d008      	beq.n	8003f02 <DMA_Init+0x166>
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d004      	beq.n	8003f02 <DMA_Init+0x166>
 8003ef8:	4855      	ldr	r0, [pc, #340]	; (8004050 <DMA_Init+0x2b4>)
 8003efa:	f240 1141 	movw	r1, #321	; 0x141
 8003efe:	f7fd fc65 	bl	80017cc <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00e      	beq.n	8003f28 <DMA_Init+0x18c>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f12:	d009      	beq.n	8003f28 <DMA_Init+0x18c>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	69db      	ldr	r3, [r3, #28]
 8003f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f1c:	d004      	beq.n	8003f28 <DMA_Init+0x18c>
 8003f1e:	484c      	ldr	r0, [pc, #304]	; (8004050 <DMA_Init+0x2b4>)
 8003f20:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8003f24:	f7fd fc52 	bl	80017cc <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00e      	beq.n	8003f4e <DMA_Init+0x1b2>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f38:	d009      	beq.n	8003f4e <DMA_Init+0x1b2>
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f42:	d004      	beq.n	8003f4e <DMA_Init+0x1b2>
 8003f44:	4842      	ldr	r0, [pc, #264]	; (8004050 <DMA_Init+0x2b4>)
 8003f46:	f240 1143 	movw	r1, #323	; 0x143
 8003f4a:	f7fd fc3f 	bl	80017cc <assert_failed>
  assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d009      	beq.n	8003f6a <DMA_Init+0x1ce>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f5e:	d004      	beq.n	8003f6a <DMA_Init+0x1ce>
 8003f60:	483b      	ldr	r0, [pc, #236]	; (8004050 <DMA_Init+0x2b4>)
 8003f62:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8003f66:	f7fd fc31 	bl	80017cc <assert_failed>
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d013      	beq.n	8003f9a <DMA_Init+0x1fe>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f7a:	d00e      	beq.n	8003f9a <DMA_Init+0x1fe>
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f84:	d009      	beq.n	8003f9a <DMA_Init+0x1fe>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f8e:	d004      	beq.n	8003f9a <DMA_Init+0x1fe>
 8003f90:	482f      	ldr	r0, [pc, #188]	; (8004050 <DMA_Init+0x2b4>)
 8003f92:	f240 1145 	movw	r1, #325	; 0x145
 8003f96:	f7fd fc19 	bl	80017cc <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(DMA_InitStruct->DMA_FIFOMode));
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d008      	beq.n	8003fb4 <DMA_Init+0x218>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d004      	beq.n	8003fb4 <DMA_Init+0x218>
 8003faa:	4829      	ldr	r0, [pc, #164]	; (8004050 <DMA_Init+0x2b4>)
 8003fac:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8003fb0:	f7fd fc0c 	bl	80017cc <assert_failed>
  assert_param(IS_DMA_FIFO_THRESHOLD(DMA_InitStruct->DMA_FIFOThreshold));
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d010      	beq.n	8003fde <DMA_Init+0x242>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d00c      	beq.n	8003fde <DMA_Init+0x242>
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d008      	beq.n	8003fde <DMA_Init+0x242>
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd0:	2b03      	cmp	r3, #3
 8003fd2:	d004      	beq.n	8003fde <DMA_Init+0x242>
 8003fd4:	481e      	ldr	r0, [pc, #120]	; (8004050 <DMA_Init+0x2b4>)
 8003fd6:	f240 1147 	movw	r1, #327	; 0x147
 8003fda:	f7fd fbf7 	bl	80017cc <assert_failed>
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d036      	beq.n	8004054 <DMA_Init+0x2b8>
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fee:	d031      	beq.n	8004054 <DMA_Init+0x2b8>
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ff8:	d02c      	beq.n	8004054 <DMA_Init+0x2b8>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004002:	d027      	beq.n	8004054 <DMA_Init+0x2b8>
 8004004:	4812      	ldr	r0, [pc, #72]	; (8004050 <DMA_Init+0x2b4>)
 8004006:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800400a:	f7fd fbdf 	bl	80017cc <assert_failed>
 800400e:	e021      	b.n	8004054 <DMA_Init+0x2b8>
 8004010:	40026010 	.word	0x40026010
 8004014:	40026028 	.word	0x40026028
 8004018:	40026040 	.word	0x40026040
 800401c:	40026058 	.word	0x40026058
 8004020:	40026070 	.word	0x40026070
 8004024:	40026088 	.word	0x40026088
 8004028:	400260a0 	.word	0x400260a0
 800402c:	400260b8 	.word	0x400260b8
 8004030:	40026410 	.word	0x40026410
 8004034:	40026428 	.word	0x40026428
 8004038:	40026440 	.word	0x40026440
 800403c:	40026458 	.word	0x40026458
 8004040:	40026470 	.word	0x40026470
 8004044:	40026488 	.word	0x40026488
 8004048:	400264a0 	.word	0x400264a0
 800404c:	400264b8 	.word	0x400264b8
 8004050:	08005bec 	.word	0x08005bec
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004058:	2b00      	cmp	r3, #0
 800405a:	d013      	beq.n	8004084 <DMA_Init+0x2e8>
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004060:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004064:	d00e      	beq.n	8004084 <DMA_Init+0x2e8>
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800406e:	d009      	beq.n	8004084 <DMA_Init+0x2e8>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004074:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004078:	d004      	beq.n	8004084 <DMA_Init+0x2e8>
 800407a:	4828      	ldr	r0, [pc, #160]	; (800411c <DMA_Init+0x380>)
 800407c:	f240 1149 	movw	r1, #329	; 0x149
 8004080:	f7fd fba4 	bl	80017cc <assert_failed>

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	4b24      	ldr	r3, [pc, #144]	; (8004120 <DMA_Init+0x384>)
 800408e:	4013      	ands	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80040a0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80040ac:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80040b8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040be:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80040c4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ca:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f023 0307 	bic.w	r3, r3, #7
 80040e4:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ee:	4313      	orrs	r3, r2
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	60da      	str	r2, [r3, #12]
}
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	08005bec 	.word	0x08005bec
 8004120:	f01c803f 	.word	0xf01c803f

08004124 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	460b      	mov	r3, r1
 800419a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	4b31      	ldr	r3, [pc, #196]	; (8004264 <DMA_Cmd+0xd4>)
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d040      	beq.n	8004226 <DMA_Cmd+0x96>
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	4b30      	ldr	r3, [pc, #192]	; (8004268 <DMA_Cmd+0xd8>)
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d03c      	beq.n	8004226 <DMA_Cmd+0x96>
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	4b2f      	ldr	r3, [pc, #188]	; (800426c <DMA_Cmd+0xdc>)
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d038      	beq.n	8004226 <DMA_Cmd+0x96>
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	4b2e      	ldr	r3, [pc, #184]	; (8004270 <DMA_Cmd+0xe0>)
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d034      	beq.n	8004226 <DMA_Cmd+0x96>
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	4b2d      	ldr	r3, [pc, #180]	; (8004274 <DMA_Cmd+0xe4>)
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d030      	beq.n	8004226 <DMA_Cmd+0x96>
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	4b2c      	ldr	r3, [pc, #176]	; (8004278 <DMA_Cmd+0xe8>)
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d02c      	beq.n	8004226 <DMA_Cmd+0x96>
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	4b2b      	ldr	r3, [pc, #172]	; (800427c <DMA_Cmd+0xec>)
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d028      	beq.n	8004226 <DMA_Cmd+0x96>
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	4b2a      	ldr	r3, [pc, #168]	; (8004280 <DMA_Cmd+0xf0>)
 80041d8:	429a      	cmp	r2, r3
 80041da:	d024      	beq.n	8004226 <DMA_Cmd+0x96>
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	4b29      	ldr	r3, [pc, #164]	; (8004284 <DMA_Cmd+0xf4>)
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d020      	beq.n	8004226 <DMA_Cmd+0x96>
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	4b28      	ldr	r3, [pc, #160]	; (8004288 <DMA_Cmd+0xf8>)
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d01c      	beq.n	8004226 <DMA_Cmd+0x96>
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	4b27      	ldr	r3, [pc, #156]	; (800428c <DMA_Cmd+0xfc>)
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d018      	beq.n	8004226 <DMA_Cmd+0x96>
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	4b26      	ldr	r3, [pc, #152]	; (8004290 <DMA_Cmd+0x100>)
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d014      	beq.n	8004226 <DMA_Cmd+0x96>
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	4b25      	ldr	r3, [pc, #148]	; (8004294 <DMA_Cmd+0x104>)
 8004200:	429a      	cmp	r2, r3
 8004202:	d010      	beq.n	8004226 <DMA_Cmd+0x96>
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	4b24      	ldr	r3, [pc, #144]	; (8004298 <DMA_Cmd+0x108>)
 8004208:	429a      	cmp	r2, r3
 800420a:	d00c      	beq.n	8004226 <DMA_Cmd+0x96>
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	4b23      	ldr	r3, [pc, #140]	; (800429c <DMA_Cmd+0x10c>)
 8004210:	429a      	cmp	r2, r3
 8004212:	d008      	beq.n	8004226 <DMA_Cmd+0x96>
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	4b22      	ldr	r3, [pc, #136]	; (80042a0 <DMA_Cmd+0x110>)
 8004218:	429a      	cmp	r2, r3
 800421a:	d004      	beq.n	8004226 <DMA_Cmd+0x96>
 800421c:	4821      	ldr	r0, [pc, #132]	; (80042a4 <DMA_Cmd+0x114>)
 800421e:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004222:	f7fd fad3 	bl	80017cc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8004226:	78fb      	ldrb	r3, [r7, #3]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d007      	beq.n	800423c <DMA_Cmd+0xac>
 800422c:	78fb      	ldrb	r3, [r7, #3]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d004      	beq.n	800423c <DMA_Cmd+0xac>
 8004232:	481c      	ldr	r0, [pc, #112]	; (80042a4 <DMA_Cmd+0x114>)
 8004234:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8004238:	f7fd fac8 	bl	80017cc <assert_failed>

  if (NewState != DISABLE)
 800423c:	78fb      	ldrb	r3, [r7, #3]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d006      	beq.n	8004250 <DMA_Cmd+0xc0>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f043 0201 	orr.w	r2, r3, #1
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	e005      	b.n	800425c <DMA_Cmd+0xcc>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f023 0201 	bic.w	r2, r3, #1
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	601a      	str	r2, [r3, #0]
  }
}
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	40026010 	.word	0x40026010
 8004268:	40026028 	.word	0x40026028
 800426c:	40026040 	.word	0x40026040
 8004270:	40026058 	.word	0x40026058
 8004274:	40026070 	.word	0x40026070
 8004278:	40026088 	.word	0x40026088
 800427c:	400260a0 	.word	0x400260a0
 8004280:	400260b8 	.word	0x400260b8
 8004284:	40026410 	.word	0x40026410
 8004288:	40026428 	.word	0x40026428
 800428c:	40026440 	.word	0x40026440
 8004290:	40026458 	.word	0x40026458
 8004294:	40026470 	.word	0x40026470
 8004298:	40026488 	.word	0x40026488
 800429c:	400264a0 	.word	0x400264a0
 80042a0:	400264b8 	.word	0x400264b8
 80042a4:	08005bec 	.word	0x08005bec

080042a8 <DMA_SetCurrDataCounter>:
  *         DMAy_SxPAR register is considered as Peripheral.
  *      
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	460b      	mov	r3, r1
 80042b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	4b25      	ldr	r3, [pc, #148]	; (800434c <DMA_SetCurrDataCounter+0xa4>)
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d040      	beq.n	800433e <DMA_SetCurrDataCounter+0x96>
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	4b24      	ldr	r3, [pc, #144]	; (8004350 <DMA_SetCurrDataCounter+0xa8>)
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d03c      	beq.n	800433e <DMA_SetCurrDataCounter+0x96>
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	4b23      	ldr	r3, [pc, #140]	; (8004354 <DMA_SetCurrDataCounter+0xac>)
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d038      	beq.n	800433e <DMA_SetCurrDataCounter+0x96>
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	4b22      	ldr	r3, [pc, #136]	; (8004358 <DMA_SetCurrDataCounter+0xb0>)
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d034      	beq.n	800433e <DMA_SetCurrDataCounter+0x96>
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	4b21      	ldr	r3, [pc, #132]	; (800435c <DMA_SetCurrDataCounter+0xb4>)
 80042d8:	429a      	cmp	r2, r3
 80042da:	d030      	beq.n	800433e <DMA_SetCurrDataCounter+0x96>
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	4b20      	ldr	r3, [pc, #128]	; (8004360 <DMA_SetCurrDataCounter+0xb8>)
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d02c      	beq.n	800433e <DMA_SetCurrDataCounter+0x96>
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	4b1f      	ldr	r3, [pc, #124]	; (8004364 <DMA_SetCurrDataCounter+0xbc>)
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d028      	beq.n	800433e <DMA_SetCurrDataCounter+0x96>
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	4b1e      	ldr	r3, [pc, #120]	; (8004368 <DMA_SetCurrDataCounter+0xc0>)
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d024      	beq.n	800433e <DMA_SetCurrDataCounter+0x96>
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	4b1d      	ldr	r3, [pc, #116]	; (800436c <DMA_SetCurrDataCounter+0xc4>)
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d020      	beq.n	800433e <DMA_SetCurrDataCounter+0x96>
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	4b1c      	ldr	r3, [pc, #112]	; (8004370 <DMA_SetCurrDataCounter+0xc8>)
 8004300:	429a      	cmp	r2, r3
 8004302:	d01c      	beq.n	800433e <DMA_SetCurrDataCounter+0x96>
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	4b1b      	ldr	r3, [pc, #108]	; (8004374 <DMA_SetCurrDataCounter+0xcc>)
 8004308:	429a      	cmp	r2, r3
 800430a:	d018      	beq.n	800433e <DMA_SetCurrDataCounter+0x96>
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	4b1a      	ldr	r3, [pc, #104]	; (8004378 <DMA_SetCurrDataCounter+0xd0>)
 8004310:	429a      	cmp	r2, r3
 8004312:	d014      	beq.n	800433e <DMA_SetCurrDataCounter+0x96>
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	4b19      	ldr	r3, [pc, #100]	; (800437c <DMA_SetCurrDataCounter+0xd4>)
 8004318:	429a      	cmp	r2, r3
 800431a:	d010      	beq.n	800433e <DMA_SetCurrDataCounter+0x96>
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	4b18      	ldr	r3, [pc, #96]	; (8004380 <DMA_SetCurrDataCounter+0xd8>)
 8004320:	429a      	cmp	r2, r3
 8004322:	d00c      	beq.n	800433e <DMA_SetCurrDataCounter+0x96>
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	4b17      	ldr	r3, [pc, #92]	; (8004384 <DMA_SetCurrDataCounter+0xdc>)
 8004328:	429a      	cmp	r2, r3
 800432a:	d008      	beq.n	800433e <DMA_SetCurrDataCounter+0x96>
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	4b16      	ldr	r3, [pc, #88]	; (8004388 <DMA_SetCurrDataCounter+0xe0>)
 8004330:	429a      	cmp	r2, r3
 8004332:	d004      	beq.n	800433e <DMA_SetCurrDataCounter+0x96>
 8004334:	4815      	ldr	r0, [pc, #84]	; (800438c <DMA_SetCurrDataCounter+0xe4>)
 8004336:	f240 2175 	movw	r1, #629	; 0x275
 800433a:	f7fd fa47 	bl	80017cc <assert_failed>

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 800433e:	887a      	ldrh	r2, [r7, #2]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	605a      	str	r2, [r3, #4]
}
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	40026010 	.word	0x40026010
 8004350:	40026028 	.word	0x40026028
 8004354:	40026040 	.word	0x40026040
 8004358:	40026058 	.word	0x40026058
 800435c:	40026070 	.word	0x40026070
 8004360:	40026088 	.word	0x40026088
 8004364:	400260a0 	.word	0x400260a0
 8004368:	400260b8 	.word	0x400260b8
 800436c:	40026410 	.word	0x40026410
 8004370:	40026428 	.word	0x40026428
 8004374:	40026440 	.word	0x40026440
 8004378:	40026458 	.word	0x40026458
 800437c:	40026470 	.word	0x40026470
 8004380:	40026488 	.word	0x40026488
 8004384:	400264a0 	.word	0x400264a0
 8004388:	400264b8 	.word	0x400264b8
 800438c:	08005bec 	.word	0x08005bec

08004390 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8004398:	2300      	movs	r3, #0
 800439a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	4b2a      	ldr	r3, [pc, #168]	; (8004448 <DMA_GetCmdStatus+0xb8>)
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d040      	beq.n	8004426 <DMA_GetCmdStatus+0x96>
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	4b29      	ldr	r3, [pc, #164]	; (800444c <DMA_GetCmdStatus+0xbc>)
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d03c      	beq.n	8004426 <DMA_GetCmdStatus+0x96>
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	4b28      	ldr	r3, [pc, #160]	; (8004450 <DMA_GetCmdStatus+0xc0>)
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d038      	beq.n	8004426 <DMA_GetCmdStatus+0x96>
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	4b27      	ldr	r3, [pc, #156]	; (8004454 <DMA_GetCmdStatus+0xc4>)
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d034      	beq.n	8004426 <DMA_GetCmdStatus+0x96>
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	4b26      	ldr	r3, [pc, #152]	; (8004458 <DMA_GetCmdStatus+0xc8>)
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d030      	beq.n	8004426 <DMA_GetCmdStatus+0x96>
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	4b25      	ldr	r3, [pc, #148]	; (800445c <DMA_GetCmdStatus+0xcc>)
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d02c      	beq.n	8004426 <DMA_GetCmdStatus+0x96>
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	4b24      	ldr	r3, [pc, #144]	; (8004460 <DMA_GetCmdStatus+0xd0>)
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d028      	beq.n	8004426 <DMA_GetCmdStatus+0x96>
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	4b23      	ldr	r3, [pc, #140]	; (8004464 <DMA_GetCmdStatus+0xd4>)
 80043d8:	429a      	cmp	r2, r3
 80043da:	d024      	beq.n	8004426 <DMA_GetCmdStatus+0x96>
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	4b22      	ldr	r3, [pc, #136]	; (8004468 <DMA_GetCmdStatus+0xd8>)
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d020      	beq.n	8004426 <DMA_GetCmdStatus+0x96>
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	4b21      	ldr	r3, [pc, #132]	; (800446c <DMA_GetCmdStatus+0xdc>)
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d01c      	beq.n	8004426 <DMA_GetCmdStatus+0x96>
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	4b20      	ldr	r3, [pc, #128]	; (8004470 <DMA_GetCmdStatus+0xe0>)
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d018      	beq.n	8004426 <DMA_GetCmdStatus+0x96>
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	4b1f      	ldr	r3, [pc, #124]	; (8004474 <DMA_GetCmdStatus+0xe4>)
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d014      	beq.n	8004426 <DMA_GetCmdStatus+0x96>
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	4b1e      	ldr	r3, [pc, #120]	; (8004478 <DMA_GetCmdStatus+0xe8>)
 8004400:	429a      	cmp	r2, r3
 8004402:	d010      	beq.n	8004426 <DMA_GetCmdStatus+0x96>
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	4b1d      	ldr	r3, [pc, #116]	; (800447c <DMA_GetCmdStatus+0xec>)
 8004408:	429a      	cmp	r2, r3
 800440a:	d00c      	beq.n	8004426 <DMA_GetCmdStatus+0x96>
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	4b1c      	ldr	r3, [pc, #112]	; (8004480 <DMA_GetCmdStatus+0xf0>)
 8004410:	429a      	cmp	r2, r3
 8004412:	d008      	beq.n	8004426 <DMA_GetCmdStatus+0x96>
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	4b1b      	ldr	r3, [pc, #108]	; (8004484 <DMA_GetCmdStatus+0xf4>)
 8004418:	429a      	cmp	r2, r3
 800441a:	d004      	beq.n	8004426 <DMA_GetCmdStatus+0x96>
 800441c:	481a      	ldr	r0, [pc, #104]	; (8004488 <DMA_GetCmdStatus+0xf8>)
 800441e:	f240 31a2 	movw	r1, #930	; 0x3a2
 8004422:	f7fd f9d3 	bl	80017cc <assert_failed>

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d002      	beq.n	8004438 <DMA_GetCmdStatus+0xa8>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8004432:	2301      	movs	r3, #1
 8004434:	73fb      	strb	r3, [r7, #15]
 8004436:	e001      	b.n	800443c <DMA_GetCmdStatus+0xac>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8004438:	2300      	movs	r3, #0
 800443a:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800443c:	7bfb      	ldrb	r3, [r7, #15]
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40026010 	.word	0x40026010
 800444c:	40026028 	.word	0x40026028
 8004450:	40026040 	.word	0x40026040
 8004454:	40026058 	.word	0x40026058
 8004458:	40026070 	.word	0x40026070
 800445c:	40026088 	.word	0x40026088
 8004460:	400260a0 	.word	0x400260a0
 8004464:	400260b8 	.word	0x400260b8
 8004468:	40026410 	.word	0x40026410
 800446c:	40026428 	.word	0x40026428
 8004470:	40026440 	.word	0x40026440
 8004474:	40026458 	.word	0x40026458
 8004478:	40026470 	.word	0x40026470
 800447c:	40026488 	.word	0x40026488
 8004480:	400264a0 	.word	0x400264a0
 8004484:	400264b8 	.word	0x400264b8
 8004488:	08005bec 	.word	0x08005bec

0800448c <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	4613      	mov	r3, r2
 8004498:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	4b45      	ldr	r3, [pc, #276]	; (80045b4 <DMA_ITConfig+0x128>)
 800449e:	429a      	cmp	r2, r3
 80044a0:	d040      	beq.n	8004524 <DMA_ITConfig+0x98>
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	4b44      	ldr	r3, [pc, #272]	; (80045b8 <DMA_ITConfig+0x12c>)
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d03c      	beq.n	8004524 <DMA_ITConfig+0x98>
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	4b43      	ldr	r3, [pc, #268]	; (80045bc <DMA_ITConfig+0x130>)
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d038      	beq.n	8004524 <DMA_ITConfig+0x98>
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	4b42      	ldr	r3, [pc, #264]	; (80045c0 <DMA_ITConfig+0x134>)
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d034      	beq.n	8004524 <DMA_ITConfig+0x98>
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	4b41      	ldr	r3, [pc, #260]	; (80045c4 <DMA_ITConfig+0x138>)
 80044be:	429a      	cmp	r2, r3
 80044c0:	d030      	beq.n	8004524 <DMA_ITConfig+0x98>
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	4b40      	ldr	r3, [pc, #256]	; (80045c8 <DMA_ITConfig+0x13c>)
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d02c      	beq.n	8004524 <DMA_ITConfig+0x98>
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4b3f      	ldr	r3, [pc, #252]	; (80045cc <DMA_ITConfig+0x140>)
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d028      	beq.n	8004524 <DMA_ITConfig+0x98>
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	4b3e      	ldr	r3, [pc, #248]	; (80045d0 <DMA_ITConfig+0x144>)
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d024      	beq.n	8004524 <DMA_ITConfig+0x98>
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	4b3d      	ldr	r3, [pc, #244]	; (80045d4 <DMA_ITConfig+0x148>)
 80044de:	429a      	cmp	r2, r3
 80044e0:	d020      	beq.n	8004524 <DMA_ITConfig+0x98>
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	4b3c      	ldr	r3, [pc, #240]	; (80045d8 <DMA_ITConfig+0x14c>)
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d01c      	beq.n	8004524 <DMA_ITConfig+0x98>
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4b3b      	ldr	r3, [pc, #236]	; (80045dc <DMA_ITConfig+0x150>)
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d018      	beq.n	8004524 <DMA_ITConfig+0x98>
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	4b3a      	ldr	r3, [pc, #232]	; (80045e0 <DMA_ITConfig+0x154>)
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d014      	beq.n	8004524 <DMA_ITConfig+0x98>
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	4b39      	ldr	r3, [pc, #228]	; (80045e4 <DMA_ITConfig+0x158>)
 80044fe:	429a      	cmp	r2, r3
 8004500:	d010      	beq.n	8004524 <DMA_ITConfig+0x98>
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	4b38      	ldr	r3, [pc, #224]	; (80045e8 <DMA_ITConfig+0x15c>)
 8004506:	429a      	cmp	r2, r3
 8004508:	d00c      	beq.n	8004524 <DMA_ITConfig+0x98>
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	4b37      	ldr	r3, [pc, #220]	; (80045ec <DMA_ITConfig+0x160>)
 800450e:	429a      	cmp	r2, r3
 8004510:	d008      	beq.n	8004524 <DMA_ITConfig+0x98>
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	4b36      	ldr	r3, [pc, #216]	; (80045f0 <DMA_ITConfig+0x164>)
 8004516:	429a      	cmp	r2, r3
 8004518:	d004      	beq.n	8004524 <DMA_ITConfig+0x98>
 800451a:	4836      	ldr	r0, [pc, #216]	; (80045f4 <DMA_ITConfig+0x168>)
 800451c:	f240 414f 	movw	r1, #1103	; 0x44f
 8004520:	f7fd f954 	bl	80017cc <assert_failed>
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f023 039e 	bic.w	r3, r3, #158	; 0x9e
 800452a:	2b00      	cmp	r3, #0
 800452c:	d102      	bne.n	8004534 <DMA_ITConfig+0xa8>
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d104      	bne.n	800453e <DMA_ITConfig+0xb2>
 8004534:	482f      	ldr	r0, [pc, #188]	; (80045f4 <DMA_ITConfig+0x168>)
 8004536:	f44f 618a 	mov.w	r1, #1104	; 0x450
 800453a:	f7fd f947 	bl	80017cc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d007      	beq.n	8004554 <DMA_ITConfig+0xc8>
 8004544:	79fb      	ldrb	r3, [r7, #7]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d004      	beq.n	8004554 <DMA_ITConfig+0xc8>
 800454a:	482a      	ldr	r0, [pc, #168]	; (80045f4 <DMA_ITConfig+0x168>)
 800454c:	f240 4151 	movw	r1, #1105	; 0x451
 8004550:	f7fd f93c 	bl	80017cc <assert_failed>

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00f      	beq.n	800457e <DMA_ITConfig+0xf2>
  {
    if (NewState != DISABLE)
 800455e:	79fb      	ldrb	r3, [r7, #7]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d006      	beq.n	8004572 <DMA_ITConfig+0xe6>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	615a      	str	r2, [r3, #20]
 8004570:	e005      	b.n	800457e <DMA_ITConfig+0xf2>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b80      	cmp	r3, #128	; 0x80
 8004582:	d014      	beq.n	80045ae <DMA_ITConfig+0x122>
  {
    if (NewState != DISABLE)
 8004584:	79fb      	ldrb	r3, [r7, #7]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d008      	beq.n	800459c <DMA_ITConfig+0x110>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f003 031e 	and.w	r3, r3, #30
 8004594:	431a      	orrs	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	e008      	b.n	80045ae <DMA_ITConfig+0x122>
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f003 031e 	and.w	r3, r3, #30
 80045a6:	43db      	mvns	r3, r3
 80045a8:	401a      	ands	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	601a      	str	r2, [r3, #0]
    }    
  }
}
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	40026010 	.word	0x40026010
 80045b8:	40026028 	.word	0x40026028
 80045bc:	40026040 	.word	0x40026040
 80045c0:	40026058 	.word	0x40026058
 80045c4:	40026070 	.word	0x40026070
 80045c8:	40026088 	.word	0x40026088
 80045cc:	400260a0 	.word	0x400260a0
 80045d0:	400260b8 	.word	0x400260b8
 80045d4:	40026410 	.word	0x40026410
 80045d8:	40026428 	.word	0x40026428
 80045dc:	40026440 	.word	0x40026440
 80045e0:	40026458 	.word	0x40026458
 80045e4:	40026470 	.word	0x40026470
 80045e8:	40026488 	.word	0x40026488
 80045ec:	400264a0 	.word	0x400264a0
 80045f0:	400264b8 	.word	0x400264b8
 80045f4:	08005bec 	.word	0x08005bec

080045f8 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8004602:	2300      	movs	r3, #0
 8004604:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]
 800460a:	2300      	movs	r3, #0
 800460c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	4b97      	ldr	r3, [pc, #604]	; (8004870 <DMA_GetITStatus+0x278>)
 8004612:	429a      	cmp	r2, r3
 8004614:	d040      	beq.n	8004698 <DMA_GetITStatus+0xa0>
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	4b96      	ldr	r3, [pc, #600]	; (8004874 <DMA_GetITStatus+0x27c>)
 800461a:	429a      	cmp	r2, r3
 800461c:	d03c      	beq.n	8004698 <DMA_GetITStatus+0xa0>
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	4b95      	ldr	r3, [pc, #596]	; (8004878 <DMA_GetITStatus+0x280>)
 8004622:	429a      	cmp	r2, r3
 8004624:	d038      	beq.n	8004698 <DMA_GetITStatus+0xa0>
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	4b94      	ldr	r3, [pc, #592]	; (800487c <DMA_GetITStatus+0x284>)
 800462a:	429a      	cmp	r2, r3
 800462c:	d034      	beq.n	8004698 <DMA_GetITStatus+0xa0>
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	4b93      	ldr	r3, [pc, #588]	; (8004880 <DMA_GetITStatus+0x288>)
 8004632:	429a      	cmp	r2, r3
 8004634:	d030      	beq.n	8004698 <DMA_GetITStatus+0xa0>
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	4b92      	ldr	r3, [pc, #584]	; (8004884 <DMA_GetITStatus+0x28c>)
 800463a:	429a      	cmp	r2, r3
 800463c:	d02c      	beq.n	8004698 <DMA_GetITStatus+0xa0>
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	4b91      	ldr	r3, [pc, #580]	; (8004888 <DMA_GetITStatus+0x290>)
 8004642:	429a      	cmp	r2, r3
 8004644:	d028      	beq.n	8004698 <DMA_GetITStatus+0xa0>
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	4b90      	ldr	r3, [pc, #576]	; (800488c <DMA_GetITStatus+0x294>)
 800464a:	429a      	cmp	r2, r3
 800464c:	d024      	beq.n	8004698 <DMA_GetITStatus+0xa0>
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	4b8f      	ldr	r3, [pc, #572]	; (8004890 <DMA_GetITStatus+0x298>)
 8004652:	429a      	cmp	r2, r3
 8004654:	d020      	beq.n	8004698 <DMA_GetITStatus+0xa0>
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	4b8e      	ldr	r3, [pc, #568]	; (8004894 <DMA_GetITStatus+0x29c>)
 800465a:	429a      	cmp	r2, r3
 800465c:	d01c      	beq.n	8004698 <DMA_GetITStatus+0xa0>
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	4b8d      	ldr	r3, [pc, #564]	; (8004898 <DMA_GetITStatus+0x2a0>)
 8004662:	429a      	cmp	r2, r3
 8004664:	d018      	beq.n	8004698 <DMA_GetITStatus+0xa0>
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	4b8c      	ldr	r3, [pc, #560]	; (800489c <DMA_GetITStatus+0x2a4>)
 800466a:	429a      	cmp	r2, r3
 800466c:	d014      	beq.n	8004698 <DMA_GetITStatus+0xa0>
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	4b8b      	ldr	r3, [pc, #556]	; (80048a0 <DMA_GetITStatus+0x2a8>)
 8004672:	429a      	cmp	r2, r3
 8004674:	d010      	beq.n	8004698 <DMA_GetITStatus+0xa0>
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	4b8a      	ldr	r3, [pc, #552]	; (80048a4 <DMA_GetITStatus+0x2ac>)
 800467a:	429a      	cmp	r2, r3
 800467c:	d00c      	beq.n	8004698 <DMA_GetITStatus+0xa0>
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	4b89      	ldr	r3, [pc, #548]	; (80048a8 <DMA_GetITStatus+0x2b0>)
 8004682:	429a      	cmp	r2, r3
 8004684:	d008      	beq.n	8004698 <DMA_GetITStatus+0xa0>
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	4b88      	ldr	r3, [pc, #544]	; (80048ac <DMA_GetITStatus+0x2b4>)
 800468a:	429a      	cmp	r2, r3
 800468c:	d004      	beq.n	8004698 <DMA_GetITStatus+0xa0>
 800468e:	4888      	ldr	r0, [pc, #544]	; (80048b0 <DMA_GetITStatus+0x2b8>)
 8004690:	f240 4187 	movw	r1, #1159	; 0x487
 8004694:	f7fd f89a 	bl	80017cc <assert_failed>
  assert_param(IS_DMA_GET_IT(DMA_IT));
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	4b86      	ldr	r3, [pc, #536]	; (80048b4 <DMA_GetITStatus+0x2bc>)
 800469c:	429a      	cmp	r2, r3
 800469e:	f000 80a9 	beq.w	80047f4 <DMA_GetITStatus+0x1fc>
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	4b84      	ldr	r3, [pc, #528]	; (80048b8 <DMA_GetITStatus+0x2c0>)
 80046a6:	429a      	cmp	r2, r3
 80046a8:	f000 80a4 	beq.w	80047f4 <DMA_GetITStatus+0x1fc>
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	4b83      	ldr	r3, [pc, #524]	; (80048bc <DMA_GetITStatus+0x2c4>)
 80046b0:	429a      	cmp	r2, r3
 80046b2:	f000 809f 	beq.w	80047f4 <DMA_GetITStatus+0x1fc>
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	4b81      	ldr	r3, [pc, #516]	; (80048c0 <DMA_GetITStatus+0x2c8>)
 80046ba:	429a      	cmp	r2, r3
 80046bc:	f000 809a 	beq.w	80047f4 <DMA_GetITStatus+0x1fc>
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	4b80      	ldr	r3, [pc, #512]	; (80048c4 <DMA_GetITStatus+0x2cc>)
 80046c4:	429a      	cmp	r2, r3
 80046c6:	f000 8095 	beq.w	80047f4 <DMA_GetITStatus+0x1fc>
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	4b7e      	ldr	r3, [pc, #504]	; (80048c8 <DMA_GetITStatus+0x2d0>)
 80046ce:	429a      	cmp	r2, r3
 80046d0:	f000 8090 	beq.w	80047f4 <DMA_GetITStatus+0x1fc>
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	4b7d      	ldr	r3, [pc, #500]	; (80048cc <DMA_GetITStatus+0x2d4>)
 80046d8:	429a      	cmp	r2, r3
 80046da:	f000 808b 	beq.w	80047f4 <DMA_GetITStatus+0x1fc>
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	4b7b      	ldr	r3, [pc, #492]	; (80048d0 <DMA_GetITStatus+0x2d8>)
 80046e2:	429a      	cmp	r2, r3
 80046e4:	f000 8086 	beq.w	80047f4 <DMA_GetITStatus+0x1fc>
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	4b7a      	ldr	r3, [pc, #488]	; (80048d4 <DMA_GetITStatus+0x2dc>)
 80046ec:	429a      	cmp	r2, r3
 80046ee:	f000 8081 	beq.w	80047f4 <DMA_GetITStatus+0x1fc>
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	4b78      	ldr	r3, [pc, #480]	; (80048d8 <DMA_GetITStatus+0x2e0>)
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d07c      	beq.n	80047f4 <DMA_GetITStatus+0x1fc>
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	4b77      	ldr	r3, [pc, #476]	; (80048dc <DMA_GetITStatus+0x2e4>)
 80046fe:	429a      	cmp	r2, r3
 8004700:	d078      	beq.n	80047f4 <DMA_GetITStatus+0x1fc>
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	4b76      	ldr	r3, [pc, #472]	; (80048e0 <DMA_GetITStatus+0x2e8>)
 8004706:	429a      	cmp	r2, r3
 8004708:	d074      	beq.n	80047f4 <DMA_GetITStatus+0x1fc>
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	4b75      	ldr	r3, [pc, #468]	; (80048e4 <DMA_GetITStatus+0x2ec>)
 800470e:	429a      	cmp	r2, r3
 8004710:	d070      	beq.n	80047f4 <DMA_GetITStatus+0x1fc>
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	4b74      	ldr	r3, [pc, #464]	; (80048e8 <DMA_GetITStatus+0x2f0>)
 8004716:	429a      	cmp	r2, r3
 8004718:	d06c      	beq.n	80047f4 <DMA_GetITStatus+0x1fc>
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	4b73      	ldr	r3, [pc, #460]	; (80048ec <DMA_GetITStatus+0x2f4>)
 800471e:	429a      	cmp	r2, r3
 8004720:	d068      	beq.n	80047f4 <DMA_GetITStatus+0x1fc>
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	4b72      	ldr	r3, [pc, #456]	; (80048f0 <DMA_GetITStatus+0x2f8>)
 8004726:	429a      	cmp	r2, r3
 8004728:	d064      	beq.n	80047f4 <DMA_GetITStatus+0x1fc>
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	4b71      	ldr	r3, [pc, #452]	; (80048f4 <DMA_GetITStatus+0x2fc>)
 800472e:	429a      	cmp	r2, r3
 8004730:	d060      	beq.n	80047f4 <DMA_GetITStatus+0x1fc>
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	4b70      	ldr	r3, [pc, #448]	; (80048f8 <DMA_GetITStatus+0x300>)
 8004736:	429a      	cmp	r2, r3
 8004738:	d05c      	beq.n	80047f4 <DMA_GetITStatus+0x1fc>
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	4b6f      	ldr	r3, [pc, #444]	; (80048fc <DMA_GetITStatus+0x304>)
 800473e:	429a      	cmp	r2, r3
 8004740:	d058      	beq.n	80047f4 <DMA_GetITStatus+0x1fc>
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	4b6e      	ldr	r3, [pc, #440]	; (8004900 <DMA_GetITStatus+0x308>)
 8004746:	429a      	cmp	r2, r3
 8004748:	d054      	beq.n	80047f4 <DMA_GetITStatus+0x1fc>
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	4b6d      	ldr	r3, [pc, #436]	; (8004904 <DMA_GetITStatus+0x30c>)
 800474e:	429a      	cmp	r2, r3
 8004750:	d050      	beq.n	80047f4 <DMA_GetITStatus+0x1fc>
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	4b6c      	ldr	r3, [pc, #432]	; (8004908 <DMA_GetITStatus+0x310>)
 8004756:	429a      	cmp	r2, r3
 8004758:	d04c      	beq.n	80047f4 <DMA_GetITStatus+0x1fc>
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	4b6b      	ldr	r3, [pc, #428]	; (800490c <DMA_GetITStatus+0x314>)
 800475e:	429a      	cmp	r2, r3
 8004760:	d048      	beq.n	80047f4 <DMA_GetITStatus+0x1fc>
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	4b6a      	ldr	r3, [pc, #424]	; (8004910 <DMA_GetITStatus+0x318>)
 8004766:	429a      	cmp	r2, r3
 8004768:	d044      	beq.n	80047f4 <DMA_GetITStatus+0x1fc>
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	4b69      	ldr	r3, [pc, #420]	; (8004914 <DMA_GetITStatus+0x31c>)
 800476e:	429a      	cmp	r2, r3
 8004770:	d040      	beq.n	80047f4 <DMA_GetITStatus+0x1fc>
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	4b68      	ldr	r3, [pc, #416]	; (8004918 <DMA_GetITStatus+0x320>)
 8004776:	429a      	cmp	r2, r3
 8004778:	d03c      	beq.n	80047f4 <DMA_GetITStatus+0x1fc>
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	4b67      	ldr	r3, [pc, #412]	; (800491c <DMA_GetITStatus+0x324>)
 800477e:	429a      	cmp	r2, r3
 8004780:	d038      	beq.n	80047f4 <DMA_GetITStatus+0x1fc>
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	4b66      	ldr	r3, [pc, #408]	; (8004920 <DMA_GetITStatus+0x328>)
 8004786:	429a      	cmp	r2, r3
 8004788:	d034      	beq.n	80047f4 <DMA_GetITStatus+0x1fc>
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	4b65      	ldr	r3, [pc, #404]	; (8004924 <DMA_GetITStatus+0x32c>)
 800478e:	429a      	cmp	r2, r3
 8004790:	d030      	beq.n	80047f4 <DMA_GetITStatus+0x1fc>
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	4b64      	ldr	r3, [pc, #400]	; (8004928 <DMA_GetITStatus+0x330>)
 8004796:	429a      	cmp	r2, r3
 8004798:	d02c      	beq.n	80047f4 <DMA_GetITStatus+0x1fc>
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	4b63      	ldr	r3, [pc, #396]	; (800492c <DMA_GetITStatus+0x334>)
 800479e:	429a      	cmp	r2, r3
 80047a0:	d028      	beq.n	80047f4 <DMA_GetITStatus+0x1fc>
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	4b62      	ldr	r3, [pc, #392]	; (8004930 <DMA_GetITStatus+0x338>)
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d024      	beq.n	80047f4 <DMA_GetITStatus+0x1fc>
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	4b61      	ldr	r3, [pc, #388]	; (8004934 <DMA_GetITStatus+0x33c>)
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d020      	beq.n	80047f4 <DMA_GetITStatus+0x1fc>
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	4b60      	ldr	r3, [pc, #384]	; (8004938 <DMA_GetITStatus+0x340>)
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d01c      	beq.n	80047f4 <DMA_GetITStatus+0x1fc>
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	4b5f      	ldr	r3, [pc, #380]	; (800493c <DMA_GetITStatus+0x344>)
 80047be:	429a      	cmp	r2, r3
 80047c0:	d018      	beq.n	80047f4 <DMA_GetITStatus+0x1fc>
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	4b5e      	ldr	r3, [pc, #376]	; (8004940 <DMA_GetITStatus+0x348>)
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d014      	beq.n	80047f4 <DMA_GetITStatus+0x1fc>
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	4b5d      	ldr	r3, [pc, #372]	; (8004944 <DMA_GetITStatus+0x34c>)
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d010      	beq.n	80047f4 <DMA_GetITStatus+0x1fc>
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	4b5c      	ldr	r3, [pc, #368]	; (8004948 <DMA_GetITStatus+0x350>)
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d00c      	beq.n	80047f4 <DMA_GetITStatus+0x1fc>
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	4b5b      	ldr	r3, [pc, #364]	; (800494c <DMA_GetITStatus+0x354>)
 80047de:	429a      	cmp	r2, r3
 80047e0:	d008      	beq.n	80047f4 <DMA_GetITStatus+0x1fc>
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	4b5a      	ldr	r3, [pc, #360]	; (8004950 <DMA_GetITStatus+0x358>)
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d004      	beq.n	80047f4 <DMA_GetITStatus+0x1fc>
 80047ea:	4831      	ldr	r0, [pc, #196]	; (80048b0 <DMA_GetITStatus+0x2b8>)
 80047ec:	f44f 6191 	mov.w	r1, #1160	; 0x488
 80047f0:	f7fc ffec 	bl	80017cc <assert_failed>
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	4b57      	ldr	r3, [pc, #348]	; (8004954 <DMA_GetITStatus+0x35c>)
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d802      	bhi.n	8004802 <DMA_GetITStatus+0x20a>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80047fc:	4b56      	ldr	r3, [pc, #344]	; (8004958 <DMA_GetITStatus+0x360>)
 80047fe:	613b      	str	r3, [r7, #16]
 8004800:	e001      	b.n	8004806 <DMA_GetITStatus+0x20e>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8004802:	4b56      	ldr	r3, [pc, #344]	; (800495c <DMA_GetITStatus+0x364>)
 8004804:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800480c:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00a      	beq.n	800482a <DMA_GetITStatus+0x232>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	0adb      	lsrs	r3, r3, #11
 8004818:	f003 031e 	and.w	r3, r3, #30
 800481c:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	4013      	ands	r3, r2
 8004826:	60bb      	str	r3, [r7, #8]
 8004828:	e004      	b.n	8004834 <DMA_GetITStatus+0x23c>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004832:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <DMA_GetITStatus+0x24e>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	e002      	b.n	800484c <DMA_GetITStatus+0x254>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8004852:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8004856:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	4013      	ands	r3, r2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d07e      	beq.n	8004960 <DMA_GetITStatus+0x368>
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d07b      	beq.n	8004960 <DMA_GetITStatus+0x368>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8004868:	2301      	movs	r3, #1
 800486a:	75fb      	strb	r3, [r7, #23]
 800486c:	e07a      	b.n	8004964 <DMA_GetITStatus+0x36c>
 800486e:	bf00      	nop
 8004870:	40026010 	.word	0x40026010
 8004874:	40026028 	.word	0x40026028
 8004878:	40026040 	.word	0x40026040
 800487c:	40026058 	.word	0x40026058
 8004880:	40026070 	.word	0x40026070
 8004884:	40026088 	.word	0x40026088
 8004888:	400260a0 	.word	0x400260a0
 800488c:	400260b8 	.word	0x400260b8
 8004890:	40026410 	.word	0x40026410
 8004894:	40026428 	.word	0x40026428
 8004898:	40026440 	.word	0x40026440
 800489c:	40026458 	.word	0x40026458
 80048a0:	40026470 	.word	0x40026470
 80048a4:	40026488 	.word	0x40026488
 80048a8:	400264a0 	.word	0x400264a0
 80048ac:	400264b8 	.word	0x400264b8
 80048b0:	08005bec 	.word	0x08005bec
 80048b4:	10008020 	.word	0x10008020
 80048b8:	10004010 	.word	0x10004010
 80048bc:	10002008 	.word	0x10002008
 80048c0:	10001004 	.word	0x10001004
 80048c4:	90000001 	.word	0x90000001
 80048c8:	10008800 	.word	0x10008800
 80048cc:	10004400 	.word	0x10004400
 80048d0:	10002200 	.word	0x10002200
 80048d4:	10001100 	.word	0x10001100
 80048d8:	90000040 	.word	0x90000040
 80048dc:	10208000 	.word	0x10208000
 80048e0:	10104000 	.word	0x10104000
 80048e4:	10082000 	.word	0x10082000
 80048e8:	10041000 	.word	0x10041000
 80048ec:	90010000 	.word	0x90010000
 80048f0:	18008000 	.word	0x18008000
 80048f4:	14004000 	.word	0x14004000
 80048f8:	12002000 	.word	0x12002000
 80048fc:	11001000 	.word	0x11001000
 8004900:	90400000 	.word	0x90400000
 8004904:	20008020 	.word	0x20008020
 8004908:	20004010 	.word	0x20004010
 800490c:	20002008 	.word	0x20002008
 8004910:	20001004 	.word	0x20001004
 8004914:	a0000001 	.word	0xa0000001
 8004918:	20008800 	.word	0x20008800
 800491c:	20004400 	.word	0x20004400
 8004920:	20002200 	.word	0x20002200
 8004924:	20001100 	.word	0x20001100
 8004928:	a0000040 	.word	0xa0000040
 800492c:	20208000 	.word	0x20208000
 8004930:	20104000 	.word	0x20104000
 8004934:	20082000 	.word	0x20082000
 8004938:	20041000 	.word	0x20041000
 800493c:	a0010000 	.word	0xa0010000
 8004940:	28008000 	.word	0x28008000
 8004944:	24004000 	.word	0x24004000
 8004948:	22002000 	.word	0x22002000
 800494c:	21001000 	.word	0x21001000
 8004950:	a0400000 	.word	0xa0400000
 8004954:	4002640f 	.word	0x4002640f
 8004958:	40026000 	.word	0x40026000
 800495c:	40026400 	.word	0x40026400
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8004960:	2300      	movs	r3, #0
 8004962:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8004964:	7dfb      	ldrb	r3, [r7, #23]
}
 8004966:	4618      	mov	r0, r3
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop

08004970 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  DMA_TypeDef* DMAy;

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	4b3d      	ldr	r3, [pc, #244]	; (8004a74 <DMA_ClearITPendingBit+0x104>)
 800497e:	429a      	cmp	r2, r3
 8004980:	d040      	beq.n	8004a04 <DMA_ClearITPendingBit+0x94>
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	4b3c      	ldr	r3, [pc, #240]	; (8004a78 <DMA_ClearITPendingBit+0x108>)
 8004986:	429a      	cmp	r2, r3
 8004988:	d03c      	beq.n	8004a04 <DMA_ClearITPendingBit+0x94>
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	4b3b      	ldr	r3, [pc, #236]	; (8004a7c <DMA_ClearITPendingBit+0x10c>)
 800498e:	429a      	cmp	r2, r3
 8004990:	d038      	beq.n	8004a04 <DMA_ClearITPendingBit+0x94>
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	4b3a      	ldr	r3, [pc, #232]	; (8004a80 <DMA_ClearITPendingBit+0x110>)
 8004996:	429a      	cmp	r2, r3
 8004998:	d034      	beq.n	8004a04 <DMA_ClearITPendingBit+0x94>
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	4b39      	ldr	r3, [pc, #228]	; (8004a84 <DMA_ClearITPendingBit+0x114>)
 800499e:	429a      	cmp	r2, r3
 80049a0:	d030      	beq.n	8004a04 <DMA_ClearITPendingBit+0x94>
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	4b38      	ldr	r3, [pc, #224]	; (8004a88 <DMA_ClearITPendingBit+0x118>)
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d02c      	beq.n	8004a04 <DMA_ClearITPendingBit+0x94>
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	4b37      	ldr	r3, [pc, #220]	; (8004a8c <DMA_ClearITPendingBit+0x11c>)
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d028      	beq.n	8004a04 <DMA_ClearITPendingBit+0x94>
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	4b36      	ldr	r3, [pc, #216]	; (8004a90 <DMA_ClearITPendingBit+0x120>)
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d024      	beq.n	8004a04 <DMA_ClearITPendingBit+0x94>
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	4b35      	ldr	r3, [pc, #212]	; (8004a94 <DMA_ClearITPendingBit+0x124>)
 80049be:	429a      	cmp	r2, r3
 80049c0:	d020      	beq.n	8004a04 <DMA_ClearITPendingBit+0x94>
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	4b34      	ldr	r3, [pc, #208]	; (8004a98 <DMA_ClearITPendingBit+0x128>)
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d01c      	beq.n	8004a04 <DMA_ClearITPendingBit+0x94>
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	4b33      	ldr	r3, [pc, #204]	; (8004a9c <DMA_ClearITPendingBit+0x12c>)
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d018      	beq.n	8004a04 <DMA_ClearITPendingBit+0x94>
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	4b32      	ldr	r3, [pc, #200]	; (8004aa0 <DMA_ClearITPendingBit+0x130>)
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d014      	beq.n	8004a04 <DMA_ClearITPendingBit+0x94>
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	4b31      	ldr	r3, [pc, #196]	; (8004aa4 <DMA_ClearITPendingBit+0x134>)
 80049de:	429a      	cmp	r2, r3
 80049e0:	d010      	beq.n	8004a04 <DMA_ClearITPendingBit+0x94>
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	4b30      	ldr	r3, [pc, #192]	; (8004aa8 <DMA_ClearITPendingBit+0x138>)
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d00c      	beq.n	8004a04 <DMA_ClearITPendingBit+0x94>
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	4b2f      	ldr	r3, [pc, #188]	; (8004aac <DMA_ClearITPendingBit+0x13c>)
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d008      	beq.n	8004a04 <DMA_ClearITPendingBit+0x94>
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	4b2e      	ldr	r3, [pc, #184]	; (8004ab0 <DMA_ClearITPendingBit+0x140>)
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d004      	beq.n	8004a04 <DMA_ClearITPendingBit+0x94>
 80049fa:	482e      	ldr	r0, [pc, #184]	; (8004ab4 <DMA_ClearITPendingBit+0x144>)
 80049fc:	f240 41d7 	movw	r1, #1239	; 0x4d7
 8004a00:	f7fc fee4 	bl	80017cc <assert_failed>
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a0a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a0e:	d00c      	beq.n	8004a2a <DMA_ClearITPendingBit+0xba>
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d007      	beq.n	8004a2a <DMA_ClearITPendingBit+0xba>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d004      	beq.n	8004a2a <DMA_ClearITPendingBit+0xba>
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	4b25      	ldr	r3, [pc, #148]	; (8004ab8 <DMA_ClearITPendingBit+0x148>)
 8004a24:	4013      	ands	r3, r2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d004      	beq.n	8004a34 <DMA_ClearITPendingBit+0xc4>
 8004a2a:	4822      	ldr	r0, [pc, #136]	; (8004ab4 <DMA_ClearITPendingBit+0x144>)
 8004a2c:	f44f 619b 	mov.w	r1, #1240	; 0x4d8
 8004a30:	f7fc fecc 	bl	80017cc <assert_failed>

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	4b21      	ldr	r3, [pc, #132]	; (8004abc <DMA_ClearITPendingBit+0x14c>)
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d802      	bhi.n	8004a42 <DMA_ClearITPendingBit+0xd2>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8004a3c:	4b20      	ldr	r3, [pc, #128]	; (8004ac0 <DMA_ClearITPendingBit+0x150>)
 8004a3e:	60fb      	str	r3, [r7, #12]
 8004a40:	e001      	b.n	8004a46 <DMA_ClearITPendingBit+0xd6>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8004a42:	4b20      	ldr	r3, [pc, #128]	; (8004ac4 <DMA_ClearITPendingBit+0x154>)
 8004a44:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d007      	beq.n	8004a60 <DMA_ClearITPendingBit+0xf0>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8004a56:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	60d3      	str	r3, [r2, #12]
 8004a5e:	e006      	b.n	8004a6e <DMA_ClearITPendingBit+0xfe>
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8004a66:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	6093      	str	r3, [r2, #8]
  }   
}
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	40026010 	.word	0x40026010
 8004a78:	40026028 	.word	0x40026028
 8004a7c:	40026040 	.word	0x40026040
 8004a80:	40026058 	.word	0x40026058
 8004a84:	40026070 	.word	0x40026070
 8004a88:	40026088 	.word	0x40026088
 8004a8c:	400260a0 	.word	0x400260a0
 8004a90:	400260b8 	.word	0x400260b8
 8004a94:	40026410 	.word	0x40026410
 8004a98:	40026428 	.word	0x40026428
 8004a9c:	40026440 	.word	0x40026440
 8004aa0:	40026458 	.word	0x40026458
 8004aa4:	40026470 	.word	0x40026470
 8004aa8:	40026488 	.word	0x40026488
 8004aac:	400264a0 	.word	0x400264a0
 8004ab0:	400264b8 	.word	0x400264b8
 8004ab4:	08005bec 	.word	0x08005bec
 8004ab8:	40820082 	.word	0x40820082
 8004abc:	4002640f 	.word	0x4002640f
 8004ac0:	40026000 	.word	0x40026000
 8004ac4:	40026400 	.word	0x40026400

08004ac8 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	791b      	ldrb	r3, [r3, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d007      	beq.n	8004aec <EXTI_Init+0x24>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	791b      	ldrb	r3, [r3, #4]
 8004ae0:	2b04      	cmp	r3, #4
 8004ae2:	d003      	beq.n	8004aec <EXTI_Init+0x24>
 8004ae4:	4848      	ldr	r0, [pc, #288]	; (8004c08 <EXTI_Init+0x140>)
 8004ae6:	217c      	movs	r1, #124	; 0x7c
 8004ae8:	f7fc fe70 	bl	80017cc <assert_failed>
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	795b      	ldrb	r3, [r3, #5]
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d00b      	beq.n	8004b0c <EXTI_Init+0x44>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	795b      	ldrb	r3, [r3, #5]
 8004af8:	2b0c      	cmp	r3, #12
 8004afa:	d007      	beq.n	8004b0c <EXTI_Init+0x44>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	795b      	ldrb	r3, [r3, #5]
 8004b00:	2b10      	cmp	r3, #16
 8004b02:	d003      	beq.n	8004b0c <EXTI_Init+0x44>
 8004b04:	4840      	ldr	r0, [pc, #256]	; (8004c08 <EXTI_Init+0x140>)
 8004b06:	217d      	movs	r1, #125	; 0x7d
 8004b08:	f7fc fe60 	bl	80017cc <assert_failed>
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	0ddb      	lsrs	r3, r3, #23
 8004b12:	05db      	lsls	r3, r3, #23
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d103      	bne.n	8004b20 <EXTI_Init+0x58>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d103      	bne.n	8004b28 <EXTI_Init+0x60>
 8004b20:	4839      	ldr	r0, [pc, #228]	; (8004c08 <EXTI_Init+0x140>)
 8004b22:	217e      	movs	r1, #126	; 0x7e
 8004b24:	f7fc fe52 	bl	80017cc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	799b      	ldrb	r3, [r3, #6]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d007      	beq.n	8004b40 <EXTI_Init+0x78>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	799b      	ldrb	r3, [r3, #6]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d003      	beq.n	8004b40 <EXTI_Init+0x78>
 8004b38:	4833      	ldr	r0, [pc, #204]	; (8004c08 <EXTI_Init+0x140>)
 8004b3a:	217f      	movs	r1, #127	; 0x7f
 8004b3c:	f7fc fe46 	bl	80017cc <assert_failed>

  tmp = (uint32_t)EXTI_BASE;
 8004b40:	4b32      	ldr	r3, [pc, #200]	; (8004c0c <EXTI_Init+0x144>)
 8004b42:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	799b      	ldrb	r3, [r3, #6]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d04d      	beq.n	8004be8 <EXTI_Init+0x120>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8004b4c:	4b2f      	ldr	r3, [pc, #188]	; (8004c0c <EXTI_Init+0x144>)
 8004b4e:	4a2f      	ldr	r2, [pc, #188]	; (8004c0c <EXTI_Init+0x144>)
 8004b50:	6811      	ldr	r1, [r2, #0]
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	6812      	ldr	r2, [r2, #0]
 8004b56:	43d2      	mvns	r2, r2
 8004b58:	400a      	ands	r2, r1
 8004b5a:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8004b5c:	4b2b      	ldr	r3, [pc, #172]	; (8004c0c <EXTI_Init+0x144>)
 8004b5e:	4a2b      	ldr	r2, [pc, #172]	; (8004c0c <EXTI_Init+0x144>)
 8004b60:	6851      	ldr	r1, [r2, #4]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6812      	ldr	r2, [r2, #0]
 8004b66:	43d2      	mvns	r2, r2
 8004b68:	400a      	ands	r2, r1
 8004b6a:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	791b      	ldrb	r3, [r3, #4]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	4413      	add	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	6811      	ldr	r1, [r2, #0]
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6812      	ldr	r2, [r2, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8004b84:	4b21      	ldr	r3, [pc, #132]	; (8004c0c <EXTI_Init+0x144>)
 8004b86:	4a21      	ldr	r2, [pc, #132]	; (8004c0c <EXTI_Init+0x144>)
 8004b88:	6891      	ldr	r1, [r2, #8]
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	6812      	ldr	r2, [r2, #0]
 8004b8e:	43d2      	mvns	r2, r2
 8004b90:	400a      	ands	r2, r1
 8004b92:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8004b94:	4b1d      	ldr	r3, [pc, #116]	; (8004c0c <EXTI_Init+0x144>)
 8004b96:	4a1d      	ldr	r2, [pc, #116]	; (8004c0c <EXTI_Init+0x144>)
 8004b98:	68d1      	ldr	r1, [r2, #12]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6812      	ldr	r2, [r2, #0]
 8004b9e:	43d2      	mvns	r2, r2
 8004ba0:	400a      	ands	r2, r1
 8004ba2:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	795b      	ldrb	r3, [r3, #5]
 8004ba8:	2b10      	cmp	r3, #16
 8004baa:	d10e      	bne.n	8004bca <EXTI_Init+0x102>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8004bac:	4b17      	ldr	r3, [pc, #92]	; (8004c0c <EXTI_Init+0x144>)
 8004bae:	4a17      	ldr	r2, [pc, #92]	; (8004c0c <EXTI_Init+0x144>)
 8004bb0:	6891      	ldr	r1, [r2, #8]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6812      	ldr	r2, [r2, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8004bba:	4b14      	ldr	r3, [pc, #80]	; (8004c0c <EXTI_Init+0x144>)
 8004bbc:	4a13      	ldr	r2, [pc, #76]	; (8004c0c <EXTI_Init+0x144>)
 8004bbe:	68d1      	ldr	r1, [r2, #12]
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6812      	ldr	r2, [r2, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	60da      	str	r2, [r3, #12]
 8004bc8:	e01b      	b.n	8004c02 <EXTI_Init+0x13a>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8004bca:	4b10      	ldr	r3, [pc, #64]	; (8004c0c <EXTI_Init+0x144>)
 8004bcc:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	795b      	ldrb	r3, [r3, #5]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	6811      	ldr	r1, [r2, #0]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	6812      	ldr	r2, [r2, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	e00c      	b.n	8004c02 <EXTI_Init+0x13a>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	791b      	ldrb	r3, [r3, #4]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	4413      	add	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	6811      	ldr	r1, [r2, #0]
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6812      	ldr	r2, [r2, #0]
 8004bfc:	43d2      	mvns	r2, r2
 8004bfe:	400a      	ands	r2, r1
 8004c00:	601a      	str	r2, [r3, #0]
  }
}
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	08005c3c 	.word	0x08005c3c
 8004c0c:	40013c00 	.word	0x40013c00

08004c10 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	0ddb      	lsrs	r3, r3, #23
 8004c1c:	05db      	lsls	r3, r3, #23
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d102      	bne.n	8004c28 <EXTI_ClearFlag+0x18>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d103      	bne.n	8004c30 <EXTI_ClearFlag+0x20>
 8004c28:	4804      	ldr	r0, [pc, #16]	; (8004c3c <EXTI_ClearFlag+0x2c>)
 8004c2a:	21f6      	movs	r1, #246	; 0xf6
 8004c2c:	f7fc fdce 	bl	80017cc <assert_failed>
  
  EXTI->PR = EXTI_Line;
 8004c30:	4b03      	ldr	r3, [pc, #12]	; (8004c40 <EXTI_ClearFlag+0x30>)
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	615a      	str	r2, [r3, #20]
}
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	08005c3c 	.word	0x08005c3c
 8004c40:	40013c00 	.word	0x40013c00

08004c44 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8004c50:	2300      	movs	r3, #0
 8004c52:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d055      	beq.n	8004d06 <EXTI_GetITStatus+0xc2>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d052      	beq.n	8004d06 <EXTI_GetITStatus+0xc2>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d04f      	beq.n	8004d06 <EXTI_GetITStatus+0xc2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d04c      	beq.n	8004d06 <EXTI_GetITStatus+0xc2>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b10      	cmp	r3, #16
 8004c70:	d049      	beq.n	8004d06 <EXTI_GetITStatus+0xc2>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b20      	cmp	r3, #32
 8004c76:	d046      	beq.n	8004d06 <EXTI_GetITStatus+0xc2>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b40      	cmp	r3, #64	; 0x40
 8004c7c:	d043      	beq.n	8004d06 <EXTI_GetITStatus+0xc2>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b80      	cmp	r3, #128	; 0x80
 8004c82:	d040      	beq.n	8004d06 <EXTI_GetITStatus+0xc2>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c8a:	d03c      	beq.n	8004d06 <EXTI_GetITStatus+0xc2>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c92:	d038      	beq.n	8004d06 <EXTI_GetITStatus+0xc2>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c9a:	d034      	beq.n	8004d06 <EXTI_GetITStatus+0xc2>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ca2:	d030      	beq.n	8004d06 <EXTI_GetITStatus+0xc2>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004caa:	d02c      	beq.n	8004d06 <EXTI_GetITStatus+0xc2>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cb2:	d028      	beq.n	8004d06 <EXTI_GetITStatus+0xc2>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cba:	d024      	beq.n	8004d06 <EXTI_GetITStatus+0xc2>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cc2:	d020      	beq.n	8004d06 <EXTI_GetITStatus+0xc2>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cca:	d01c      	beq.n	8004d06 <EXTI_GetITStatus+0xc2>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cd2:	d018      	beq.n	8004d06 <EXTI_GetITStatus+0xc2>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004cda:	d014      	beq.n	8004d06 <EXTI_GetITStatus+0xc2>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ce2:	d010      	beq.n	8004d06 <EXTI_GetITStatus+0xc2>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cea:	d00c      	beq.n	8004d06 <EXTI_GetITStatus+0xc2>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cf2:	d008      	beq.n	8004d06 <EXTI_GetITStatus+0xc2>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cfa:	d004      	beq.n	8004d06 <EXTI_GetITStatus+0xc2>
 8004cfc:	480e      	ldr	r0, [pc, #56]	; (8004d38 <EXTI_GetITStatus+0xf4>)
 8004cfe:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004d02:	f7fc fd63 	bl	80017cc <assert_failed>
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8004d06:	4b0d      	ldr	r3, [pc, #52]	; (8004d3c <EXTI_GetITStatus+0xf8>)
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8004d10:	4b0a      	ldr	r3, [pc, #40]	; (8004d3c <EXTI_GetITStatus+0xf8>)
 8004d12:	695a      	ldr	r2, [r3, #20]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4013      	ands	r3, r2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d005      	beq.n	8004d28 <EXTI_GetITStatus+0xe4>
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d002      	beq.n	8004d28 <EXTI_GetITStatus+0xe4>
  {
    bitstatus = SET;
 8004d22:	2301      	movs	r3, #1
 8004d24:	73fb      	strb	r3, [r7, #15]
 8004d26:	e001      	b.n	8004d2c <EXTI_GetITStatus+0xe8>
  }
  else
  {
    bitstatus = RESET;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	08005c3c 	.word	0x08005c3c
 8004d3c:	40013c00 	.word	0x40013c00

08004d40 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	0ddb      	lsrs	r3, r3, #23
 8004d4c:	05db      	lsls	r3, r3, #23
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d102      	bne.n	8004d58 <EXTI_ClearITPendingBit+0x18>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d104      	bne.n	8004d62 <EXTI_ClearITPendingBit+0x22>
 8004d58:	4805      	ldr	r0, [pc, #20]	; (8004d70 <EXTI_ClearITPendingBit+0x30>)
 8004d5a:	f240 111d 	movw	r1, #285	; 0x11d
 8004d5e:	f7fc fd35 	bl	80017cc <assert_failed>
  
  EXTI->PR = EXTI_Line;
 8004d62:	4b04      	ldr	r3, [pc, #16]	; (8004d74 <EXTI_ClearITPendingBit+0x34>)
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	615a      	str	r2, [r3, #20]
}
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	08005c3c 	.word	0x08005c3c
 8004d74:	40013c00 	.word	0x40013c00

08004d78 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8004d82:	2300      	movs	r3, #0
 8004d84:	617b      	str	r3, [r7, #20]
 8004d86:	2300      	movs	r3, #0
 8004d88:	613b      	str	r3, [r7, #16]
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	4b7a      	ldr	r3, [pc, #488]	; (8004f7c <GPIO_Init+0x204>)
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d023      	beq.n	8004dde <GPIO_Init+0x66>
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	4b79      	ldr	r3, [pc, #484]	; (8004f80 <GPIO_Init+0x208>)
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d01f      	beq.n	8004dde <GPIO_Init+0x66>
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	4b78      	ldr	r3, [pc, #480]	; (8004f84 <GPIO_Init+0x20c>)
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d01b      	beq.n	8004dde <GPIO_Init+0x66>
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	4b77      	ldr	r3, [pc, #476]	; (8004f88 <GPIO_Init+0x210>)
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d017      	beq.n	8004dde <GPIO_Init+0x66>
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	4b76      	ldr	r3, [pc, #472]	; (8004f8c <GPIO_Init+0x214>)
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d013      	beq.n	8004dde <GPIO_Init+0x66>
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	4b75      	ldr	r3, [pc, #468]	; (8004f90 <GPIO_Init+0x218>)
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d00f      	beq.n	8004dde <GPIO_Init+0x66>
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	4b74      	ldr	r3, [pc, #464]	; (8004f94 <GPIO_Init+0x21c>)
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d00b      	beq.n	8004dde <GPIO_Init+0x66>
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	4b73      	ldr	r3, [pc, #460]	; (8004f98 <GPIO_Init+0x220>)
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d007      	beq.n	8004dde <GPIO_Init+0x66>
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	4b72      	ldr	r3, [pc, #456]	; (8004f9c <GPIO_Init+0x224>)
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d003      	beq.n	8004dde <GPIO_Init+0x66>
 8004dd6:	4872      	ldr	r0, [pc, #456]	; (8004fa0 <GPIO_Init+0x228>)
 8004dd8:	21bb      	movs	r1, #187	; 0xbb
 8004dda:	f7fc fcf7 	bl	80017cc <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d103      	bne.n	8004dee <GPIO_Init+0x76>
 8004de6:	486e      	ldr	r0, [pc, #440]	; (8004fa0 <GPIO_Init+0x228>)
 8004de8:	21bc      	movs	r1, #188	; 0xbc
 8004dea:	f7fc fcef 	bl	80017cc <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	791b      	ldrb	r3, [r3, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00f      	beq.n	8004e16 <GPIO_Init+0x9e>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	791b      	ldrb	r3, [r3, #4]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d00b      	beq.n	8004e16 <GPIO_Init+0x9e>
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	791b      	ldrb	r3, [r3, #4]
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d007      	beq.n	8004e16 <GPIO_Init+0x9e>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	791b      	ldrb	r3, [r3, #4]
 8004e0a:	2b03      	cmp	r3, #3
 8004e0c:	d003      	beq.n	8004e16 <GPIO_Init+0x9e>
 8004e0e:	4864      	ldr	r0, [pc, #400]	; (8004fa0 <GPIO_Init+0x228>)
 8004e10:	21bd      	movs	r1, #189	; 0xbd
 8004e12:	f7fc fcdb 	bl	80017cc <assert_failed>
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	79db      	ldrb	r3, [r3, #7]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00b      	beq.n	8004e36 <GPIO_Init+0xbe>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	79db      	ldrb	r3, [r3, #7]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d007      	beq.n	8004e36 <GPIO_Init+0xbe>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	79db      	ldrb	r3, [r3, #7]
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d003      	beq.n	8004e36 <GPIO_Init+0xbe>
 8004e2e:	485c      	ldr	r0, [pc, #368]	; (8004fa0 <GPIO_Init+0x228>)
 8004e30:	21be      	movs	r1, #190	; 0xbe
 8004e32:	f7fc fccb 	bl	80017cc <assert_failed>

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8004e36:	2300      	movs	r3, #0
 8004e38:	617b      	str	r3, [r7, #20]
 8004e3a:	e097      	b.n	8004f6c <GPIO_Init+0x1f4>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	fa02 f303 	lsl.w	r3, r2, r3
 8004e44:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	f040 8086 	bne.w	8004f66 <GPIO_Init+0x1ee>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	2103      	movs	r1, #3
 8004e64:	fa01 f303 	lsl.w	r3, r1, r3
 8004e68:	43db      	mvns	r3, r3
 8004e6a:	401a      	ands	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	791b      	ldrb	r3, [r3, #4]
 8004e78:	4619      	mov	r1, r3
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e82:	431a      	orrs	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	791b      	ldrb	r3, [r3, #4]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d003      	beq.n	8004e98 <GPIO_Init+0x120>
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	791b      	ldrb	r3, [r3, #4]
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d14e      	bne.n	8004f36 <GPIO_Init+0x1be>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	795b      	ldrb	r3, [r3, #5]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00f      	beq.n	8004ec0 <GPIO_Init+0x148>
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	795b      	ldrb	r3, [r3, #5]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d00b      	beq.n	8004ec0 <GPIO_Init+0x148>
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	795b      	ldrb	r3, [r3, #5]
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d007      	beq.n	8004ec0 <GPIO_Init+0x148>
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	795b      	ldrb	r3, [r3, #5]
 8004eb4:	2b03      	cmp	r3, #3
 8004eb6:	d003      	beq.n	8004ec0 <GPIO_Init+0x148>
 8004eb8:	4839      	ldr	r0, [pc, #228]	; (8004fa0 <GPIO_Init+0x228>)
 8004eba:	21d0      	movs	r1, #208	; 0xd0
 8004ebc:	f7fc fc86 	bl	80017cc <assert_failed>

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	2103      	movs	r1, #3
 8004eca:	fa01 f303 	lsl.w	r3, r1, r3
 8004ece:	43db      	mvns	r3, r3
 8004ed0:	401a      	ands	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	795b      	ldrb	r3, [r3, #5]
 8004ede:	4619      	mov	r1, r3
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	799b      	ldrb	r3, [r3, #6]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d007      	beq.n	8004f06 <GPIO_Init+0x18e>
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	799b      	ldrb	r3, [r3, #6]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d003      	beq.n	8004f06 <GPIO_Init+0x18e>
 8004efe:	4828      	ldr	r0, [pc, #160]	; (8004fa0 <GPIO_Init+0x228>)
 8004f00:	21d7      	movs	r1, #215	; 0xd7
 8004f02:	f7fc fc63 	bl	80017cc <assert_failed>

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685a      	ldr	r2, [r3, #4]
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	2101      	movs	r1, #1
 8004f10:	fa01 f303 	lsl.w	r3, r1, r3
 8004f14:	43db      	mvns	r3, r3
 8004f16:	401a      	ands	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	799b      	ldrb	r3, [r3, #6]
 8004f24:	4619      	mov	r1, r3
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	431a      	orrs	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68da      	ldr	r2, [r3, #12]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	2103      	movs	r1, #3
 8004f42:	fa01 f303 	lsl.w	r3, r1, r3
 8004f46:	43db      	mvns	r3, r3
 8004f48:	401a      	ands	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	79db      	ldrb	r3, [r3, #7]
 8004f56:	4619      	mov	r1, r3
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f60:	431a      	orrs	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	2b0f      	cmp	r3, #15
 8004f70:	f67f af64 	bls.w	8004e3c <GPIO_Init+0xc4>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8004f74:	3718      	adds	r7, #24
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	40020000 	.word	0x40020000
 8004f80:	40020400 	.word	0x40020400
 8004f84:	40020800 	.word	0x40020800
 8004f88:	40020c00 	.word	0x40020c00
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	40021400 	.word	0x40021400
 8004f94:	40021800 	.word	0x40021800
 8004f98:	40021c00 	.word	0x40021c00
 8004f9c:	40022000 	.word	0x40022000
 8004fa0:	08005c8c 	.word	0x08005c8c

08004fa4 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	4613      	mov	r3, r2
 8004fae:	460a      	mov	r2, r1
 8004fb0:	807a      	strh	r2, [r7, #2]
 8004fb2:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	4b83      	ldr	r3, [pc, #524]	; (80051cc <GPIO_PinAFConfig+0x228>)
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d024      	beq.n	800500e <GPIO_PinAFConfig+0x6a>
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	4b82      	ldr	r3, [pc, #520]	; (80051d0 <GPIO_PinAFConfig+0x22c>)
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d020      	beq.n	800500e <GPIO_PinAFConfig+0x6a>
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	4b81      	ldr	r3, [pc, #516]	; (80051d4 <GPIO_PinAFConfig+0x230>)
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d01c      	beq.n	800500e <GPIO_PinAFConfig+0x6a>
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	4b80      	ldr	r3, [pc, #512]	; (80051d8 <GPIO_PinAFConfig+0x234>)
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d018      	beq.n	800500e <GPIO_PinAFConfig+0x6a>
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	4b7f      	ldr	r3, [pc, #508]	; (80051dc <GPIO_PinAFConfig+0x238>)
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d014      	beq.n	800500e <GPIO_PinAFConfig+0x6a>
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	4b7e      	ldr	r3, [pc, #504]	; (80051e0 <GPIO_PinAFConfig+0x23c>)
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d010      	beq.n	800500e <GPIO_PinAFConfig+0x6a>
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	4b7d      	ldr	r3, [pc, #500]	; (80051e4 <GPIO_PinAFConfig+0x240>)
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d00c      	beq.n	800500e <GPIO_PinAFConfig+0x6a>
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	4b7c      	ldr	r3, [pc, #496]	; (80051e8 <GPIO_PinAFConfig+0x244>)
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d008      	beq.n	800500e <GPIO_PinAFConfig+0x6a>
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	4b7b      	ldr	r3, [pc, #492]	; (80051ec <GPIO_PinAFConfig+0x248>)
 8005000:	429a      	cmp	r2, r3
 8005002:	d004      	beq.n	800500e <GPIO_PinAFConfig+0x6a>
 8005004:	487a      	ldr	r0, [pc, #488]	; (80051f0 <GPIO_PinAFConfig+0x24c>)
 8005006:	f240 2117 	movw	r1, #535	; 0x217
 800500a:	f7fc fbdf 	bl	80017cc <assert_failed>
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
 800500e:	887b      	ldrh	r3, [r7, #2]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d031      	beq.n	8005078 <GPIO_PinAFConfig+0xd4>
 8005014:	887b      	ldrh	r3, [r7, #2]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d02e      	beq.n	8005078 <GPIO_PinAFConfig+0xd4>
 800501a:	887b      	ldrh	r3, [r7, #2]
 800501c:	2b02      	cmp	r3, #2
 800501e:	d02b      	beq.n	8005078 <GPIO_PinAFConfig+0xd4>
 8005020:	887b      	ldrh	r3, [r7, #2]
 8005022:	2b03      	cmp	r3, #3
 8005024:	d028      	beq.n	8005078 <GPIO_PinAFConfig+0xd4>
 8005026:	887b      	ldrh	r3, [r7, #2]
 8005028:	2b04      	cmp	r3, #4
 800502a:	d025      	beq.n	8005078 <GPIO_PinAFConfig+0xd4>
 800502c:	887b      	ldrh	r3, [r7, #2]
 800502e:	2b05      	cmp	r3, #5
 8005030:	d022      	beq.n	8005078 <GPIO_PinAFConfig+0xd4>
 8005032:	887b      	ldrh	r3, [r7, #2]
 8005034:	2b06      	cmp	r3, #6
 8005036:	d01f      	beq.n	8005078 <GPIO_PinAFConfig+0xd4>
 8005038:	887b      	ldrh	r3, [r7, #2]
 800503a:	2b07      	cmp	r3, #7
 800503c:	d01c      	beq.n	8005078 <GPIO_PinAFConfig+0xd4>
 800503e:	887b      	ldrh	r3, [r7, #2]
 8005040:	2b08      	cmp	r3, #8
 8005042:	d019      	beq.n	8005078 <GPIO_PinAFConfig+0xd4>
 8005044:	887b      	ldrh	r3, [r7, #2]
 8005046:	2b09      	cmp	r3, #9
 8005048:	d016      	beq.n	8005078 <GPIO_PinAFConfig+0xd4>
 800504a:	887b      	ldrh	r3, [r7, #2]
 800504c:	2b0a      	cmp	r3, #10
 800504e:	d013      	beq.n	8005078 <GPIO_PinAFConfig+0xd4>
 8005050:	887b      	ldrh	r3, [r7, #2]
 8005052:	2b0b      	cmp	r3, #11
 8005054:	d010      	beq.n	8005078 <GPIO_PinAFConfig+0xd4>
 8005056:	887b      	ldrh	r3, [r7, #2]
 8005058:	2b0c      	cmp	r3, #12
 800505a:	d00d      	beq.n	8005078 <GPIO_PinAFConfig+0xd4>
 800505c:	887b      	ldrh	r3, [r7, #2]
 800505e:	2b0d      	cmp	r3, #13
 8005060:	d00a      	beq.n	8005078 <GPIO_PinAFConfig+0xd4>
 8005062:	887b      	ldrh	r3, [r7, #2]
 8005064:	2b0e      	cmp	r3, #14
 8005066:	d007      	beq.n	8005078 <GPIO_PinAFConfig+0xd4>
 8005068:	887b      	ldrh	r3, [r7, #2]
 800506a:	2b0f      	cmp	r3, #15
 800506c:	d004      	beq.n	8005078 <GPIO_PinAFConfig+0xd4>
 800506e:	4860      	ldr	r0, [pc, #384]	; (80051f0 <GPIO_PinAFConfig+0x24c>)
 8005070:	f44f 7106 	mov.w	r1, #536	; 0x218
 8005074:	f7fc fbaa 	bl	80017cc <assert_failed>
  assert_param(IS_GPIO_AF(GPIO_AF));
 8005078:	787b      	ldrb	r3, [r7, #1]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d06d      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 800507e:	787b      	ldrb	r3, [r7, #1]
 8005080:	2b09      	cmp	r3, #9
 8005082:	d06a      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 8005084:	787b      	ldrb	r3, [r7, #1]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d067      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 800508a:	787b      	ldrb	r3, [r7, #1]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d064      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 8005090:	787b      	ldrb	r3, [r7, #1]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d061      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 8005096:	787b      	ldrb	r3, [r7, #1]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d05e      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 800509c:	787b      	ldrb	r3, [r7, #1]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d05b      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 80050a2:	787b      	ldrb	r3, [r7, #1]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d058      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 80050a8:	787b      	ldrb	r3, [r7, #1]
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d055      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 80050ae:	787b      	ldrb	r3, [r7, #1]
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d052      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 80050b4:	787b      	ldrb	r3, [r7, #1]
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d04f      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 80050ba:	787b      	ldrb	r3, [r7, #1]
 80050bc:	2b03      	cmp	r3, #3
 80050be:	d04c      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 80050c0:	787b      	ldrb	r3, [r7, #1]
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	d049      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 80050c6:	787b      	ldrb	r3, [r7, #1]
 80050c8:	2b04      	cmp	r3, #4
 80050ca:	d046      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 80050cc:	787b      	ldrb	r3, [r7, #1]
 80050ce:	2b04      	cmp	r3, #4
 80050d0:	d043      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 80050d2:	787b      	ldrb	r3, [r7, #1]
 80050d4:	2b05      	cmp	r3, #5
 80050d6:	d040      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 80050d8:	787b      	ldrb	r3, [r7, #1]
 80050da:	2b05      	cmp	r3, #5
 80050dc:	d03d      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 80050de:	787b      	ldrb	r3, [r7, #1]
 80050e0:	2b09      	cmp	r3, #9
 80050e2:	d03a      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 80050e4:	787b      	ldrb	r3, [r7, #1]
 80050e6:	2b06      	cmp	r3, #6
 80050e8:	d037      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 80050ea:	787b      	ldrb	r3, [r7, #1]
 80050ec:	2b09      	cmp	r3, #9
 80050ee:	d034      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 80050f0:	787b      	ldrb	r3, [r7, #1]
 80050f2:	2b07      	cmp	r3, #7
 80050f4:	d031      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 80050f6:	787b      	ldrb	r3, [r7, #1]
 80050f8:	2b07      	cmp	r3, #7
 80050fa:	d02e      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 80050fc:	787b      	ldrb	r3, [r7, #1]
 80050fe:	2b07      	cmp	r3, #7
 8005100:	d02b      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 8005102:	787b      	ldrb	r3, [r7, #1]
 8005104:	2b08      	cmp	r3, #8
 8005106:	d028      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 8005108:	787b      	ldrb	r3, [r7, #1]
 800510a:	2b08      	cmp	r3, #8
 800510c:	d025      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 800510e:	787b      	ldrb	r3, [r7, #1]
 8005110:	2b08      	cmp	r3, #8
 8005112:	d022      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 8005114:	787b      	ldrb	r3, [r7, #1]
 8005116:	2b09      	cmp	r3, #9
 8005118:	d01f      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 800511a:	787b      	ldrb	r3, [r7, #1]
 800511c:	2b09      	cmp	r3, #9
 800511e:	d01c      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 8005120:	787b      	ldrb	r3, [r7, #1]
 8005122:	2b0a      	cmp	r3, #10
 8005124:	d019      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 8005126:	787b      	ldrb	r3, [r7, #1]
 8005128:	2b0a      	cmp	r3, #10
 800512a:	d016      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 800512c:	787b      	ldrb	r3, [r7, #1]
 800512e:	2b0b      	cmp	r3, #11
 8005130:	d013      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 8005132:	787b      	ldrb	r3, [r7, #1]
 8005134:	2b0c      	cmp	r3, #12
 8005136:	d010      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 8005138:	787b      	ldrb	r3, [r7, #1]
 800513a:	2b0c      	cmp	r3, #12
 800513c:	d00d      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 800513e:	787b      	ldrb	r3, [r7, #1]
 8005140:	2b0c      	cmp	r3, #12
 8005142:	d00a      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 8005144:	787b      	ldrb	r3, [r7, #1]
 8005146:	2b0d      	cmp	r3, #13
 8005148:	d007      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 800514a:	787b      	ldrb	r3, [r7, #1]
 800514c:	2b0f      	cmp	r3, #15
 800514e:	d004      	beq.n	800515a <GPIO_PinAFConfig+0x1b6>
 8005150:	4827      	ldr	r0, [pc, #156]	; (80051f0 <GPIO_PinAFConfig+0x24c>)
 8005152:	f240 2119 	movw	r1, #537	; 0x219
 8005156:	f7fc fb39 	bl	80017cc <assert_failed>
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800515a:	787a      	ldrb	r2, [r7, #1]
 800515c:	887b      	ldrh	r3, [r7, #2]
 800515e:	f003 0307 	and.w	r3, r3, #7
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	fa02 f303 	lsl.w	r3, r2, r3
 8005168:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800516a:	887b      	ldrh	r3, [r7, #2]
 800516c:	08db      	lsrs	r3, r3, #3
 800516e:	b29b      	uxth	r3, r3
 8005170:	461a      	mov	r2, r3
 8005172:	887b      	ldrh	r3, [r7, #2]
 8005174:	08db      	lsrs	r3, r3, #3
 8005176:	b29b      	uxth	r3, r3
 8005178:	4619      	mov	r1, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	3108      	adds	r1, #8
 800517e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8005182:	887b      	ldrh	r3, [r7, #2]
 8005184:	f003 0307 	and.w	r3, r3, #7
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	200f      	movs	r0, #15
 800518c:	fa00 f303 	lsl.w	r3, r0, r3
 8005190:	43db      	mvns	r3, r3
 8005192:	4019      	ands	r1, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3208      	adds	r2, #8
 8005198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800519c:	887b      	ldrh	r3, [r7, #2]
 800519e:	08db      	lsrs	r3, r3, #3
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	461a      	mov	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3208      	adds	r2, #8
 80051a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80051b2:	887b      	ldrh	r3, [r7, #2]
 80051b4:	08db      	lsrs	r3, r3, #3
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	461a      	mov	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	3208      	adds	r2, #8
 80051be:	68b9      	ldr	r1, [r7, #8]
 80051c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	40020000 	.word	0x40020000
 80051d0:	40020400 	.word	0x40020400
 80051d4:	40020800 	.word	0x40020800
 80051d8:	40020c00 	.word	0x40020c00
 80051dc:	40021000 	.word	0x40021000
 80051e0:	40021400 	.word	0x40021400
 80051e4:	40021800 	.word	0x40021800
 80051e8:	40021c00 	.word	0x40021c00
 80051ec:	40022000 	.word	0x40022000
 80051f0:	08005c8c 	.word	0x08005c8c

080051f4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	460b      	mov	r3, r1
 80051fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	4b15      	ldr	r3, [pc, #84]	; (8005258 <RCC_AHB1PeriphClockCmd+0x64>)
 8005204:	4013      	ands	r3, r2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d102      	bne.n	8005210 <RCC_AHB1PeriphClockCmd+0x1c>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d104      	bne.n	800521a <RCC_AHB1PeriphClockCmd+0x26>
 8005210:	4812      	ldr	r0, [pc, #72]	; (800525c <RCC_AHB1PeriphClockCmd+0x68>)
 8005212:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8005216:	f7fc fad9 	bl	80017cc <assert_failed>

  assert_param(IS_FUNCTIONAL_STATE(NewState));
 800521a:	78fb      	ldrb	r3, [r7, #3]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d007      	beq.n	8005230 <RCC_AHB1PeriphClockCmd+0x3c>
 8005220:	78fb      	ldrb	r3, [r7, #3]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d004      	beq.n	8005230 <RCC_AHB1PeriphClockCmd+0x3c>
 8005226:	480d      	ldr	r0, [pc, #52]	; (800525c <RCC_AHB1PeriphClockCmd+0x68>)
 8005228:	f240 4142 	movw	r1, #1090	; 0x442
 800522c:	f7fc face 	bl	80017cc <assert_failed>
  if (NewState != DISABLE)
 8005230:	78fb      	ldrb	r3, [r7, #3]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d006      	beq.n	8005244 <RCC_AHB1PeriphClockCmd+0x50>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8005236:	4b0a      	ldr	r3, [pc, #40]	; (8005260 <RCC_AHB1PeriphClockCmd+0x6c>)
 8005238:	4a09      	ldr	r2, [pc, #36]	; (8005260 <RCC_AHB1PeriphClockCmd+0x6c>)
 800523a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	430a      	orrs	r2, r1
 8005240:	631a      	str	r2, [r3, #48]	; 0x30
 8005242:	e006      	b.n	8005252 <RCC_AHB1PeriphClockCmd+0x5e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8005244:	4b06      	ldr	r3, [pc, #24]	; (8005260 <RCC_AHB1PeriphClockCmd+0x6c>)
 8005246:	4a06      	ldr	r2, [pc, #24]	; (8005260 <RCC_AHB1PeriphClockCmd+0x6c>)
 8005248:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	43d2      	mvns	r2, r2
 800524e:	400a      	ands	r2, r1
 8005250:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	818bee00 	.word	0x818bee00
 800525c:	08005cdc 	.word	0x08005cdc
 8005260:	40023800 	.word	0x40023800

08005264 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	460b      	mov	r3, r1
 800526e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	4b15      	ldr	r3, [pc, #84]	; (80052c8 <RCC_APB2PeriphClockCmd+0x64>)
 8005274:	4013      	ands	r3, r2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d102      	bne.n	8005280 <RCC_APB2PeriphClockCmd+0x1c>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d104      	bne.n	800528a <RCC_APB2PeriphClockCmd+0x26>
 8005280:	4812      	ldr	r0, [pc, #72]	; (80052cc <RCC_APB2PeriphClockCmd+0x68>)
 8005282:	f240 41d5 	movw	r1, #1237	; 0x4d5
 8005286:	f7fc faa1 	bl	80017cc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 800528a:	78fb      	ldrb	r3, [r7, #3]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d007      	beq.n	80052a0 <RCC_APB2PeriphClockCmd+0x3c>
 8005290:	78fb      	ldrb	r3, [r7, #3]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d004      	beq.n	80052a0 <RCC_APB2PeriphClockCmd+0x3c>
 8005296:	480d      	ldr	r0, [pc, #52]	; (80052cc <RCC_APB2PeriphClockCmd+0x68>)
 8005298:	f240 41d6 	movw	r1, #1238	; 0x4d6
 800529c:	f7fc fa96 	bl	80017cc <assert_failed>

  if (NewState != DISABLE)
 80052a0:	78fb      	ldrb	r3, [r7, #3]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d006      	beq.n	80052b4 <RCC_APB2PeriphClockCmd+0x50>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80052a6:	4b0a      	ldr	r3, [pc, #40]	; (80052d0 <RCC_APB2PeriphClockCmd+0x6c>)
 80052a8:	4a09      	ldr	r2, [pc, #36]	; (80052d0 <RCC_APB2PeriphClockCmd+0x6c>)
 80052aa:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	645a      	str	r2, [r3, #68]	; 0x44
 80052b2:	e006      	b.n	80052c2 <RCC_APB2PeriphClockCmd+0x5e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80052b4:	4b06      	ldr	r3, [pc, #24]	; (80052d0 <RCC_APB2PeriphClockCmd+0x6c>)
 80052b6:	4a06      	ldr	r2, [pc, #24]	; (80052d0 <RCC_APB2PeriphClockCmd+0x6c>)
 80052b8:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	43d2      	mvns	r2, r2
 80052be:	400a      	ands	r2, r1
 80052c0:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	fff8a0cc 	.word	0xfff8a0cc
 80052cc:	08005cdc 	.word	0x08005cdc
 80052d0:	40023800 	.word	0x40023800

080052d4 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80052de:	2300      	movs	r3, #0
 80052e0:	81fb      	strh	r3, [r7, #14]
  
  /* check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	4b70      	ldr	r3, [pc, #448]	; (80054a8 <SPI_Init+0x1d4>)
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d00c      	beq.n	8005304 <SPI_Init+0x30>
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	4b6f      	ldr	r3, [pc, #444]	; (80054ac <SPI_Init+0x1d8>)
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d008      	beq.n	8005304 <SPI_Init+0x30>
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	4b6e      	ldr	r3, [pc, #440]	; (80054b0 <SPI_Init+0x1dc>)
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d004      	beq.n	8005304 <SPI_Init+0x30>
 80052fa:	486e      	ldr	r0, [pc, #440]	; (80054b4 <SPI_Init+0x1e0>)
 80052fc:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005300:	f7fc fa64 	bl	80017cc <assert_failed>
  
  /* Check the SPI parameters */
  assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d013      	beq.n	8005334 <SPI_Init+0x60>
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	881b      	ldrh	r3, [r3, #0]
 8005310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005314:	d00e      	beq.n	8005334 <SPI_Init+0x60>
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	881b      	ldrh	r3, [r3, #0]
 800531a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800531e:	d009      	beq.n	8005334 <SPI_Init+0x60>
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	881b      	ldrh	r3, [r3, #0]
 8005324:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005328:	d004      	beq.n	8005334 <SPI_Init+0x60>
 800532a:	4862      	ldr	r0, [pc, #392]	; (80054b4 <SPI_Init+0x1e0>)
 800532c:	f240 1109 	movw	r1, #265	; 0x109
 8005330:	f7fc fa4c 	bl	80017cc <assert_failed>
  assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	885b      	ldrh	r3, [r3, #2]
 8005338:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800533c:	d008      	beq.n	8005350 <SPI_Init+0x7c>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	885b      	ldrh	r3, [r3, #2]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d004      	beq.n	8005350 <SPI_Init+0x7c>
 8005346:	485b      	ldr	r0, [pc, #364]	; (80054b4 <SPI_Init+0x1e0>)
 8005348:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800534c:	f7fc fa3e 	bl	80017cc <assert_failed>
  assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	889b      	ldrh	r3, [r3, #4]
 8005354:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005358:	d008      	beq.n	800536c <SPI_Init+0x98>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	889b      	ldrh	r3, [r3, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d004      	beq.n	800536c <SPI_Init+0x98>
 8005362:	4854      	ldr	r0, [pc, #336]	; (80054b4 <SPI_Init+0x1e0>)
 8005364:	f240 110b 	movw	r1, #267	; 0x10b
 8005368:	f7fc fa30 	bl	80017cc <assert_failed>
  assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	88db      	ldrh	r3, [r3, #6]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d008      	beq.n	8005386 <SPI_Init+0xb2>
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	88db      	ldrh	r3, [r3, #6]
 8005378:	2b02      	cmp	r3, #2
 800537a:	d004      	beq.n	8005386 <SPI_Init+0xb2>
 800537c:	484d      	ldr	r0, [pc, #308]	; (80054b4 <SPI_Init+0x1e0>)
 800537e:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8005382:	f7fc fa23 	bl	80017cc <assert_failed>
  assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	891b      	ldrh	r3, [r3, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d008      	beq.n	80053a0 <SPI_Init+0xcc>
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	891b      	ldrh	r3, [r3, #8]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d004      	beq.n	80053a0 <SPI_Init+0xcc>
 8005396:	4847      	ldr	r0, [pc, #284]	; (80054b4 <SPI_Init+0x1e0>)
 8005398:	f240 110d 	movw	r1, #269	; 0x10d
 800539c:	f7fc fa16 	bl	80017cc <assert_failed>
  assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	895b      	ldrh	r3, [r3, #10]
 80053a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053a8:	d008      	beq.n	80053bc <SPI_Init+0xe8>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	895b      	ldrh	r3, [r3, #10]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d004      	beq.n	80053bc <SPI_Init+0xe8>
 80053b2:	4840      	ldr	r0, [pc, #256]	; (80054b4 <SPI_Init+0x1e0>)
 80053b4:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80053b8:	f7fc fa08 	bl	80017cc <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	899b      	ldrh	r3, [r3, #12]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d020      	beq.n	8005406 <SPI_Init+0x132>
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	899b      	ldrh	r3, [r3, #12]
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	d01c      	beq.n	8005406 <SPI_Init+0x132>
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	899b      	ldrh	r3, [r3, #12]
 80053d0:	2b10      	cmp	r3, #16
 80053d2:	d018      	beq.n	8005406 <SPI_Init+0x132>
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	899b      	ldrh	r3, [r3, #12]
 80053d8:	2b18      	cmp	r3, #24
 80053da:	d014      	beq.n	8005406 <SPI_Init+0x132>
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	899b      	ldrh	r3, [r3, #12]
 80053e0:	2b20      	cmp	r3, #32
 80053e2:	d010      	beq.n	8005406 <SPI_Init+0x132>
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	899b      	ldrh	r3, [r3, #12]
 80053e8:	2b28      	cmp	r3, #40	; 0x28
 80053ea:	d00c      	beq.n	8005406 <SPI_Init+0x132>
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	899b      	ldrh	r3, [r3, #12]
 80053f0:	2b30      	cmp	r3, #48	; 0x30
 80053f2:	d008      	beq.n	8005406 <SPI_Init+0x132>
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	899b      	ldrh	r3, [r3, #12]
 80053f8:	2b38      	cmp	r3, #56	; 0x38
 80053fa:	d004      	beq.n	8005406 <SPI_Init+0x132>
 80053fc:	482d      	ldr	r0, [pc, #180]	; (80054b4 <SPI_Init+0x1e0>)
 80053fe:	f240 110f 	movw	r1, #271	; 0x10f
 8005402:	f7fc f9e3 	bl	80017cc <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	89db      	ldrh	r3, [r3, #14]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d008      	beq.n	8005420 <SPI_Init+0x14c>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	89db      	ldrh	r3, [r3, #14]
 8005412:	2b80      	cmp	r3, #128	; 0x80
 8005414:	d004      	beq.n	8005420 <SPI_Init+0x14c>
 8005416:	4827      	ldr	r0, [pc, #156]	; (80054b4 <SPI_Init+0x1e0>)
 8005418:	f44f 7188 	mov.w	r1, #272	; 0x110
 800541c:	f7fc f9d6 	bl	80017cc <assert_failed>
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	8a1b      	ldrh	r3, [r3, #16]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d104      	bne.n	8005432 <SPI_Init+0x15e>
 8005428:	4822      	ldr	r0, [pc, #136]	; (80054b4 <SPI_Init+0x1e0>)
 800542a:	f240 1111 	movw	r1, #273	; 0x111
 800542e:	f7fc f9cd 	bl	80017cc <assert_failed>

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8005438:	89fb      	ldrh	r3, [r7, #14]
 800543a:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800543e:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	881a      	ldrh	r2, [r3, #0]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	885b      	ldrh	r3, [r3, #2]
 8005448:	4313      	orrs	r3, r2
 800544a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005450:	4313      	orrs	r3, r2
 8005452:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005458:	4313      	orrs	r3, r2
 800545a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005460:	4313      	orrs	r3, r2
 8005462:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005468:	4313      	orrs	r3, r2
 800546a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005470:	4313      	orrs	r3, r2
 8005472:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005478:	4313      	orrs	r3, r2
 800547a:	b29a      	uxth	r2, r3
 800547c:	89fb      	ldrh	r3, [r7, #14]
 800547e:	4313      	orrs	r3, r2
 8005480:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	89fa      	ldrh	r2, [r7, #14]
 8005486:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	8b9b      	ldrh	r3, [r3, #28]
 800548c:	b29b      	uxth	r3, r3
 800548e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005492:	b29a      	uxth	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	8a1a      	ldrh	r2, [r3, #16]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	821a      	strh	r2, [r3, #16]
}
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	40013000 	.word	0x40013000
 80054ac:	40003800 	.word	0x40003800
 80054b0:	40003c00 	.word	0x40003c00
 80054b4:	08005d2c 	.word	0x08005d2c

080054b8 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	460b      	mov	r3, r1
 80054c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	4b19      	ldr	r3, [pc, #100]	; (800552c <SPI_Cmd+0x74>)
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d00c      	beq.n	80054e6 <SPI_Cmd+0x2e>
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	4b18      	ldr	r3, [pc, #96]	; (8005530 <SPI_Cmd+0x78>)
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d008      	beq.n	80054e6 <SPI_Cmd+0x2e>
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	4b17      	ldr	r3, [pc, #92]	; (8005534 <SPI_Cmd+0x7c>)
 80054d8:	429a      	cmp	r2, r3
 80054da:	d004      	beq.n	80054e6 <SPI_Cmd+0x2e>
 80054dc:	4816      	ldr	r0, [pc, #88]	; (8005538 <SPI_Cmd+0x80>)
 80054de:	f240 2101 	movw	r1, #513	; 0x201
 80054e2:	f7fc f973 	bl	80017cc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 80054e6:	78fb      	ldrb	r3, [r7, #3]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d007      	beq.n	80054fc <SPI_Cmd+0x44>
 80054ec:	78fb      	ldrb	r3, [r7, #3]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d004      	beq.n	80054fc <SPI_Cmd+0x44>
 80054f2:	4811      	ldr	r0, [pc, #68]	; (8005538 <SPI_Cmd+0x80>)
 80054f4:	f240 2102 	movw	r1, #514	; 0x202
 80054f8:	f7fc f968 	bl	80017cc <assert_failed>
  if (NewState != DISABLE)
 80054fc:	78fb      	ldrb	r3, [r7, #3]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d008      	beq.n	8005514 <SPI_Cmd+0x5c>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	881b      	ldrh	r3, [r3, #0]
 8005506:	b29b      	uxth	r3, r3
 8005508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800550c:	b29a      	uxth	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	801a      	strh	r2, [r3, #0]
 8005512:	e007      	b.n	8005524 <SPI_Cmd+0x6c>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	b29b      	uxth	r3, r3
 800551a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800551e:	b29a      	uxth	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	801a      	strh	r2, [r3, #0]
  }
}
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	40013000 	.word	0x40013000
 8005530:	40003800 	.word	0x40003800
 8005534:	40003c00 	.word	0x40003c00
 8005538:	08005d2c 	.word	0x08005d2c

0800553c <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	4613      	mov	r3, r2
 8005546:	460a      	mov	r2, r1
 8005548:	807a      	strh	r2, [r7, #2]
 800554a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	4b25      	ldr	r3, [pc, #148]	; (80055e4 <SPI_I2S_DMACmd+0xa8>)
 8005550:	429a      	cmp	r2, r3
 8005552:	d014      	beq.n	800557e <SPI_I2S_DMACmd+0x42>
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	4b24      	ldr	r3, [pc, #144]	; (80055e8 <SPI_I2S_DMACmd+0xac>)
 8005558:	429a      	cmp	r2, r3
 800555a:	d010      	beq.n	800557e <SPI_I2S_DMACmd+0x42>
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	4b23      	ldr	r3, [pc, #140]	; (80055ec <SPI_I2S_DMACmd+0xb0>)
 8005560:	429a      	cmp	r2, r3
 8005562:	d00c      	beq.n	800557e <SPI_I2S_DMACmd+0x42>
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	4b22      	ldr	r3, [pc, #136]	; (80055f0 <SPI_I2S_DMACmd+0xb4>)
 8005568:	429a      	cmp	r2, r3
 800556a:	d008      	beq.n	800557e <SPI_I2S_DMACmd+0x42>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8005572:	d004      	beq.n	800557e <SPI_I2S_DMACmd+0x42>
 8005574:	481f      	ldr	r0, [pc, #124]	; (80055f4 <SPI_I2S_DMACmd+0xb8>)
 8005576:	f240 31d9 	movw	r1, #985	; 0x3d9
 800557a:	f7fc f927 	bl	80017cc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 800557e:	787b      	ldrb	r3, [r7, #1]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d007      	beq.n	8005594 <SPI_I2S_DMACmd+0x58>
 8005584:	787b      	ldrb	r3, [r7, #1]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d004      	beq.n	8005594 <SPI_I2S_DMACmd+0x58>
 800558a:	481a      	ldr	r0, [pc, #104]	; (80055f4 <SPI_I2S_DMACmd+0xb8>)
 800558c:	f240 31da 	movw	r1, #986	; 0x3da
 8005590:	f7fc f91c 	bl	80017cc <assert_failed>
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
 8005594:	887a      	ldrh	r2, [r7, #2]
 8005596:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800559a:	4013      	ands	r3, r2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d102      	bne.n	80055a6 <SPI_I2S_DMACmd+0x6a>
 80055a0:	887b      	ldrh	r3, [r7, #2]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d104      	bne.n	80055b0 <SPI_I2S_DMACmd+0x74>
 80055a6:	4813      	ldr	r0, [pc, #76]	; (80055f4 <SPI_I2S_DMACmd+0xb8>)
 80055a8:	f240 31db 	movw	r1, #987	; 0x3db
 80055ac:	f7fc f90e 	bl	80017cc <assert_failed>

  if (NewState != DISABLE)
 80055b0:	787b      	ldrb	r3, [r7, #1]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d008      	beq.n	80055c8 <SPI_I2S_DMACmd+0x8c>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	889b      	ldrh	r3, [r3, #4]
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	887b      	ldrh	r3, [r7, #2]
 80055be:	4313      	orrs	r3, r2
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	809a      	strh	r2, [r3, #4]
 80055c6:	e009      	b.n	80055dc <SPI_I2S_DMACmd+0xa0>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	889b      	ldrh	r3, [r3, #4]
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	887b      	ldrh	r3, [r7, #2]
 80055d0:	43db      	mvns	r3, r3
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	4013      	ands	r3, r2
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	809a      	strh	r2, [r3, #4]
  }
}
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	40013000 	.word	0x40013000
 80055e8:	40003800 	.word	0x40003800
 80055ec:	40003c00 	.word	0x40003c00
 80055f0:	40003400 	.word	0x40003400
 80055f4:	08005d2c 	.word	0x08005d2c

080055f8 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	460b      	mov	r3, r1
 8005602:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8005604:	2300      	movs	r3, #0
 8005606:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	4b25      	ldr	r3, [pc, #148]	; (80056a0 <SPI_I2S_GetFlagStatus+0xa8>)
 800560c:	429a      	cmp	r2, r3
 800560e:	d014      	beq.n	800563a <SPI_I2S_GetFlagStatus+0x42>
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	4b24      	ldr	r3, [pc, #144]	; (80056a4 <SPI_I2S_GetFlagStatus+0xac>)
 8005614:	429a      	cmp	r2, r3
 8005616:	d010      	beq.n	800563a <SPI_I2S_GetFlagStatus+0x42>
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	4b23      	ldr	r3, [pc, #140]	; (80056a8 <SPI_I2S_GetFlagStatus+0xb0>)
 800561c:	429a      	cmp	r2, r3
 800561e:	d00c      	beq.n	800563a <SPI_I2S_GetFlagStatus+0x42>
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	4b22      	ldr	r3, [pc, #136]	; (80056ac <SPI_I2S_GetFlagStatus+0xb4>)
 8005624:	429a      	cmp	r2, r3
 8005626:	d008      	beq.n	800563a <SPI_I2S_GetFlagStatus+0x42>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 800562e:	d004      	beq.n	800563a <SPI_I2S_GetFlagStatus+0x42>
 8005630:	481f      	ldr	r0, [pc, #124]	; (80056b0 <SPI_I2S_GetFlagStatus+0xb8>)
 8005632:	f240 4173 	movw	r1, #1139	; 0x473
 8005636:	f7fc f8c9 	bl	80017cc <assert_failed>
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
 800563a:	887b      	ldrh	r3, [r7, #2]
 800563c:	2b80      	cmp	r3, #128	; 0x80
 800563e:	d01d      	beq.n	800567c <SPI_I2S_GetFlagStatus+0x84>
 8005640:	887b      	ldrh	r3, [r7, #2]
 8005642:	2b40      	cmp	r3, #64	; 0x40
 8005644:	d01a      	beq.n	800567c <SPI_I2S_GetFlagStatus+0x84>
 8005646:	887b      	ldrh	r3, [r7, #2]
 8005648:	2b20      	cmp	r3, #32
 800564a:	d017      	beq.n	800567c <SPI_I2S_GetFlagStatus+0x84>
 800564c:	887b      	ldrh	r3, [r7, #2]
 800564e:	2b10      	cmp	r3, #16
 8005650:	d014      	beq.n	800567c <SPI_I2S_GetFlagStatus+0x84>
 8005652:	887b      	ldrh	r3, [r7, #2]
 8005654:	2b08      	cmp	r3, #8
 8005656:	d011      	beq.n	800567c <SPI_I2S_GetFlagStatus+0x84>
 8005658:	887b      	ldrh	r3, [r7, #2]
 800565a:	2b04      	cmp	r3, #4
 800565c:	d00e      	beq.n	800567c <SPI_I2S_GetFlagStatus+0x84>
 800565e:	887b      	ldrh	r3, [r7, #2]
 8005660:	2b02      	cmp	r3, #2
 8005662:	d00b      	beq.n	800567c <SPI_I2S_GetFlagStatus+0x84>
 8005664:	887b      	ldrh	r3, [r7, #2]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d008      	beq.n	800567c <SPI_I2S_GetFlagStatus+0x84>
 800566a:	887b      	ldrh	r3, [r7, #2]
 800566c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005670:	d004      	beq.n	800567c <SPI_I2S_GetFlagStatus+0x84>
 8005672:	480f      	ldr	r0, [pc, #60]	; (80056b0 <SPI_I2S_GetFlagStatus+0xb8>)
 8005674:	f240 4174 	movw	r1, #1140	; 0x474
 8005678:	f7fc f8a8 	bl	80017cc <assert_failed>
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	891b      	ldrh	r3, [r3, #8]
 8005680:	b29a      	uxth	r2, r3
 8005682:	887b      	ldrh	r3, [r7, #2]
 8005684:	4013      	ands	r3, r2
 8005686:	b29b      	uxth	r3, r3
 8005688:	2b00      	cmp	r3, #0
 800568a:	d002      	beq.n	8005692 <SPI_I2S_GetFlagStatus+0x9a>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800568c:	2301      	movs	r3, #1
 800568e:	73fb      	strb	r3, [r7, #15]
 8005690:	e001      	b.n	8005696 <SPI_I2S_GetFlagStatus+0x9e>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8005692:	2300      	movs	r3, #0
 8005694:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8005696:	7bfb      	ldrb	r3, [r7, #15]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	40013000 	.word	0x40013000
 80056a4:	40003800 	.word	0x40003800
 80056a8:	40003c00 	.word	0x40003c00
 80056ac:	40003400 	.word	0x40003400
 80056b0:	08005d2c 	.word	0x08005d2c

080056b4 <SPI_I2S_ClearFlag>:
  *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  *  
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	460b      	mov	r3, r1
 80056be:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	4b14      	ldr	r3, [pc, #80]	; (8005714 <SPI_I2S_ClearFlag+0x60>)
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d014      	beq.n	80056f2 <SPI_I2S_ClearFlag+0x3e>
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	4b13      	ldr	r3, [pc, #76]	; (8005718 <SPI_I2S_ClearFlag+0x64>)
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d010      	beq.n	80056f2 <SPI_I2S_ClearFlag+0x3e>
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	4b12      	ldr	r3, [pc, #72]	; (800571c <SPI_I2S_ClearFlag+0x68>)
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d00c      	beq.n	80056f2 <SPI_I2S_ClearFlag+0x3e>
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	4b11      	ldr	r3, [pc, #68]	; (8005720 <SPI_I2S_ClearFlag+0x6c>)
 80056dc:	429a      	cmp	r2, r3
 80056de:	d008      	beq.n	80056f2 <SPI_I2S_ClearFlag+0x3e>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80056e6:	d004      	beq.n	80056f2 <SPI_I2S_ClearFlag+0x3e>
 80056e8:	480e      	ldr	r0, [pc, #56]	; (8005724 <SPI_I2S_ClearFlag+0x70>)
 80056ea:	f240 419b 	movw	r1, #1179	; 0x49b
 80056ee:	f7fc f86d 	bl	80017cc <assert_failed>
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
 80056f2:	887b      	ldrh	r3, [r7, #2]
 80056f4:	2b10      	cmp	r3, #16
 80056f6:	d004      	beq.n	8005702 <SPI_I2S_ClearFlag+0x4e>
 80056f8:	480a      	ldr	r0, [pc, #40]	; (8005724 <SPI_I2S_ClearFlag+0x70>)
 80056fa:	f240 419c 	movw	r1, #1180	; 0x49c
 80056fe:	f7fc f865 	bl	80017cc <assert_failed>
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8005702:	887b      	ldrh	r3, [r7, #2]
 8005704:	43db      	mvns	r3, r3
 8005706:	b29a      	uxth	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	811a      	strh	r2, [r3, #8]
}
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	40013000 	.word	0x40013000
 8005718:	40003800 	.word	0x40003800
 800571c:	40003c00 	.word	0x40003c00
 8005720:	40003400 	.word	0x40003400
 8005724:	08005d2c 	.word	0x08005d2c

08005728 <SYSCFG_EXTILineConfig>:
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8005728:	b590      	push	{r4, r7, lr}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	4602      	mov	r2, r0
 8005730:	460b      	mov	r3, r1
 8005732:	71fa      	strb	r2, [r7, #7]
 8005734:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8005736:	2300      	movs	r3, #0
 8005738:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
 800573a:	79fb      	ldrb	r3, [r7, #7]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d01b      	beq.n	8005778 <SYSCFG_EXTILineConfig+0x50>
 8005740:	79fb      	ldrb	r3, [r7, #7]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d018      	beq.n	8005778 <SYSCFG_EXTILineConfig+0x50>
 8005746:	79fb      	ldrb	r3, [r7, #7]
 8005748:	2b02      	cmp	r3, #2
 800574a:	d015      	beq.n	8005778 <SYSCFG_EXTILineConfig+0x50>
 800574c:	79fb      	ldrb	r3, [r7, #7]
 800574e:	2b03      	cmp	r3, #3
 8005750:	d012      	beq.n	8005778 <SYSCFG_EXTILineConfig+0x50>
 8005752:	79fb      	ldrb	r3, [r7, #7]
 8005754:	2b04      	cmp	r3, #4
 8005756:	d00f      	beq.n	8005778 <SYSCFG_EXTILineConfig+0x50>
 8005758:	79fb      	ldrb	r3, [r7, #7]
 800575a:	2b05      	cmp	r3, #5
 800575c:	d00c      	beq.n	8005778 <SYSCFG_EXTILineConfig+0x50>
 800575e:	79fb      	ldrb	r3, [r7, #7]
 8005760:	2b06      	cmp	r3, #6
 8005762:	d009      	beq.n	8005778 <SYSCFG_EXTILineConfig+0x50>
 8005764:	79fb      	ldrb	r3, [r7, #7]
 8005766:	2b07      	cmp	r3, #7
 8005768:	d006      	beq.n	8005778 <SYSCFG_EXTILineConfig+0x50>
 800576a:	79fb      	ldrb	r3, [r7, #7]
 800576c:	2b08      	cmp	r3, #8
 800576e:	d003      	beq.n	8005778 <SYSCFG_EXTILineConfig+0x50>
 8005770:	4834      	ldr	r0, [pc, #208]	; (8005844 <SYSCFG_EXTILineConfig+0x11c>)
 8005772:	217c      	movs	r1, #124	; 0x7c
 8005774:	f7fc f82a 	bl	80017cc <assert_failed>
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
 8005778:	79bb      	ldrb	r3, [r7, #6]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d030      	beq.n	80057e0 <SYSCFG_EXTILineConfig+0xb8>
 800577e:	79bb      	ldrb	r3, [r7, #6]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d02d      	beq.n	80057e0 <SYSCFG_EXTILineConfig+0xb8>
 8005784:	79bb      	ldrb	r3, [r7, #6]
 8005786:	2b02      	cmp	r3, #2
 8005788:	d02a      	beq.n	80057e0 <SYSCFG_EXTILineConfig+0xb8>
 800578a:	79bb      	ldrb	r3, [r7, #6]
 800578c:	2b03      	cmp	r3, #3
 800578e:	d027      	beq.n	80057e0 <SYSCFG_EXTILineConfig+0xb8>
 8005790:	79bb      	ldrb	r3, [r7, #6]
 8005792:	2b04      	cmp	r3, #4
 8005794:	d024      	beq.n	80057e0 <SYSCFG_EXTILineConfig+0xb8>
 8005796:	79bb      	ldrb	r3, [r7, #6]
 8005798:	2b05      	cmp	r3, #5
 800579a:	d021      	beq.n	80057e0 <SYSCFG_EXTILineConfig+0xb8>
 800579c:	79bb      	ldrb	r3, [r7, #6]
 800579e:	2b06      	cmp	r3, #6
 80057a0:	d01e      	beq.n	80057e0 <SYSCFG_EXTILineConfig+0xb8>
 80057a2:	79bb      	ldrb	r3, [r7, #6]
 80057a4:	2b07      	cmp	r3, #7
 80057a6:	d01b      	beq.n	80057e0 <SYSCFG_EXTILineConfig+0xb8>
 80057a8:	79bb      	ldrb	r3, [r7, #6]
 80057aa:	2b08      	cmp	r3, #8
 80057ac:	d018      	beq.n	80057e0 <SYSCFG_EXTILineConfig+0xb8>
 80057ae:	79bb      	ldrb	r3, [r7, #6]
 80057b0:	2b09      	cmp	r3, #9
 80057b2:	d015      	beq.n	80057e0 <SYSCFG_EXTILineConfig+0xb8>
 80057b4:	79bb      	ldrb	r3, [r7, #6]
 80057b6:	2b0a      	cmp	r3, #10
 80057b8:	d012      	beq.n	80057e0 <SYSCFG_EXTILineConfig+0xb8>
 80057ba:	79bb      	ldrb	r3, [r7, #6]
 80057bc:	2b0b      	cmp	r3, #11
 80057be:	d00f      	beq.n	80057e0 <SYSCFG_EXTILineConfig+0xb8>
 80057c0:	79bb      	ldrb	r3, [r7, #6]
 80057c2:	2b0c      	cmp	r3, #12
 80057c4:	d00c      	beq.n	80057e0 <SYSCFG_EXTILineConfig+0xb8>
 80057c6:	79bb      	ldrb	r3, [r7, #6]
 80057c8:	2b0d      	cmp	r3, #13
 80057ca:	d009      	beq.n	80057e0 <SYSCFG_EXTILineConfig+0xb8>
 80057cc:	79bb      	ldrb	r3, [r7, #6]
 80057ce:	2b0e      	cmp	r3, #14
 80057d0:	d006      	beq.n	80057e0 <SYSCFG_EXTILineConfig+0xb8>
 80057d2:	79bb      	ldrb	r3, [r7, #6]
 80057d4:	2b0f      	cmp	r3, #15
 80057d6:	d003      	beq.n	80057e0 <SYSCFG_EXTILineConfig+0xb8>
 80057d8:	481a      	ldr	r0, [pc, #104]	; (8005844 <SYSCFG_EXTILineConfig+0x11c>)
 80057da:	217d      	movs	r1, #125	; 0x7d
 80057dc:	f7fb fff6 	bl	80017cc <assert_failed>

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80057e0:	79bb      	ldrb	r3, [r7, #6]
 80057e2:	f003 0303 	and.w	r3, r3, #3
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	220f      	movs	r2, #15
 80057ea:	fa02 f303 	lsl.w	r3, r2, r3
 80057ee:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80057f0:	4b15      	ldr	r3, [pc, #84]	; (8005848 <SYSCFG_EXTILineConfig+0x120>)
 80057f2:	79ba      	ldrb	r2, [r7, #6]
 80057f4:	0892      	lsrs	r2, r2, #2
 80057f6:	b2d2      	uxtb	r2, r2
 80057f8:	4913      	ldr	r1, [pc, #76]	; (8005848 <SYSCFG_EXTILineConfig+0x120>)
 80057fa:	79b8      	ldrb	r0, [r7, #6]
 80057fc:	0880      	lsrs	r0, r0, #2
 80057fe:	b2c0      	uxtb	r0, r0
 8005800:	3002      	adds	r0, #2
 8005802:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8005806:	68f9      	ldr	r1, [r7, #12]
 8005808:	43c9      	mvns	r1, r1
 800580a:	4001      	ands	r1, r0
 800580c:	3202      	adds	r2, #2
 800580e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8005812:	4b0d      	ldr	r3, [pc, #52]	; (8005848 <SYSCFG_EXTILineConfig+0x120>)
 8005814:	79ba      	ldrb	r2, [r7, #6]
 8005816:	0892      	lsrs	r2, r2, #2
 8005818:	b2d2      	uxtb	r2, r2
 800581a:	490b      	ldr	r1, [pc, #44]	; (8005848 <SYSCFG_EXTILineConfig+0x120>)
 800581c:	79b8      	ldrb	r0, [r7, #6]
 800581e:	0880      	lsrs	r0, r0, #2
 8005820:	b2c0      	uxtb	r0, r0
 8005822:	3002      	adds	r0, #2
 8005824:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8005828:	79fc      	ldrb	r4, [r7, #7]
 800582a:	79b9      	ldrb	r1, [r7, #6]
 800582c:	f001 0103 	and.w	r1, r1, #3
 8005830:	0089      	lsls	r1, r1, #2
 8005832:	fa04 f101 	lsl.w	r1, r4, r1
 8005836:	4301      	orrs	r1, r0
 8005838:	3202      	adds	r2, #2
 800583a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800583e:	3714      	adds	r7, #20
 8005840:	46bd      	mov	sp, r7
 8005842:	bd90      	pop	{r4, r7, pc}
 8005844:	08005d7c 	.word	0x08005d7c
 8005848:	40013800 	.word	0x40013800

0800584c <__libc_init_array>:
 800584c:	b570      	push	{r4, r5, r6, lr}
 800584e:	4e0f      	ldr	r6, [pc, #60]	; (800588c <__libc_init_array+0x40>)
 8005850:	4d0f      	ldr	r5, [pc, #60]	; (8005890 <__libc_init_array+0x44>)
 8005852:	1b76      	subs	r6, r6, r5
 8005854:	10b6      	asrs	r6, r6, #2
 8005856:	d007      	beq.n	8005868 <__libc_init_array+0x1c>
 8005858:	3d04      	subs	r5, #4
 800585a:	2400      	movs	r4, #0
 800585c:	3401      	adds	r4, #1
 800585e:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8005862:	4798      	blx	r3
 8005864:	42a6      	cmp	r6, r4
 8005866:	d1f9      	bne.n	800585c <__libc_init_array+0x10>
 8005868:	4e0a      	ldr	r6, [pc, #40]	; (8005894 <__libc_init_array+0x48>)
 800586a:	4d0b      	ldr	r5, [pc, #44]	; (8005898 <__libc_init_array+0x4c>)
 800586c:	1b76      	subs	r6, r6, r5
 800586e:	f000 fac9 	bl	8005e04 <_init>
 8005872:	10b6      	asrs	r6, r6, #2
 8005874:	d008      	beq.n	8005888 <__libc_init_array+0x3c>
 8005876:	3d04      	subs	r5, #4
 8005878:	2400      	movs	r4, #0
 800587a:	3401      	adds	r4, #1
 800587c:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8005880:	4798      	blx	r3
 8005882:	42a6      	cmp	r6, r4
 8005884:	d1f9      	bne.n	800587a <__libc_init_array+0x2e>
 8005886:	bd70      	pop	{r4, r5, r6, pc}
 8005888:	bd70      	pop	{r4, r5, r6, pc}
 800588a:	bf00      	nop
 800588c:	08005e1c 	.word	0x08005e1c
 8005890:	08005e1c 	.word	0x08005e1c
 8005894:	08005e24 	.word	0x08005e24
 8005898:	08005e1c 	.word	0x08005e1c

0800589c <memcmp>:
 800589c:	2a03      	cmp	r2, #3
 800589e:	b470      	push	{r4, r5, r6}
 80058a0:	d928      	bls.n	80058f4 <memcmp+0x58>
 80058a2:	ea40 0301 	orr.w	r3, r0, r1
 80058a6:	079b      	lsls	r3, r3, #30
 80058a8:	d013      	beq.n	80058d2 <memcmp+0x36>
 80058aa:	7805      	ldrb	r5, [r0, #0]
 80058ac:	780c      	ldrb	r4, [r1, #0]
 80058ae:	42a5      	cmp	r5, r4
 80058b0:	d124      	bne.n	80058fc <memcmp+0x60>
 80058b2:	3a01      	subs	r2, #1
 80058b4:	2300      	movs	r3, #0
 80058b6:	e005      	b.n	80058c4 <memcmp+0x28>
 80058b8:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80058bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80058c0:	42a5      	cmp	r5, r4
 80058c2:	d11b      	bne.n	80058fc <memcmp+0x60>
 80058c4:	4293      	cmp	r3, r2
 80058c6:	f103 0301 	add.w	r3, r3, #1
 80058ca:	d1f5      	bne.n	80058b8 <memcmp+0x1c>
 80058cc:	2000      	movs	r0, #0
 80058ce:	bc70      	pop	{r4, r5, r6}
 80058d0:	4770      	bx	lr
 80058d2:	460c      	mov	r4, r1
 80058d4:	4603      	mov	r3, r0
 80058d6:	6825      	ldr	r5, [r4, #0]
 80058d8:	681e      	ldr	r6, [r3, #0]
 80058da:	42ae      	cmp	r6, r5
 80058dc:	4621      	mov	r1, r4
 80058de:	4618      	mov	r0, r3
 80058e0:	f104 0404 	add.w	r4, r4, #4
 80058e4:	f103 0304 	add.w	r3, r3, #4
 80058e8:	d104      	bne.n	80058f4 <memcmp+0x58>
 80058ea:	3a04      	subs	r2, #4
 80058ec:	2a03      	cmp	r2, #3
 80058ee:	4618      	mov	r0, r3
 80058f0:	4621      	mov	r1, r4
 80058f2:	d8f0      	bhi.n	80058d6 <memcmp+0x3a>
 80058f4:	2a00      	cmp	r2, #0
 80058f6:	d1d8      	bne.n	80058aa <memcmp+0xe>
 80058f8:	4610      	mov	r0, r2
 80058fa:	e7e8      	b.n	80058ce <memcmp+0x32>
 80058fc:	1b28      	subs	r0, r5, r4
 80058fe:	bc70      	pop	{r4, r5, r6}
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop

08005904 <memset>:
 8005904:	b4f0      	push	{r4, r5, r6, r7}
 8005906:	0784      	lsls	r4, r0, #30
 8005908:	d043      	beq.n	8005992 <memset+0x8e>
 800590a:	1e54      	subs	r4, r2, #1
 800590c:	2a00      	cmp	r2, #0
 800590e:	d03e      	beq.n	800598e <memset+0x8a>
 8005910:	b2cd      	uxtb	r5, r1
 8005912:	4603      	mov	r3, r0
 8005914:	e003      	b.n	800591e <memset+0x1a>
 8005916:	1e62      	subs	r2, r4, #1
 8005918:	2c00      	cmp	r4, #0
 800591a:	d038      	beq.n	800598e <memset+0x8a>
 800591c:	4614      	mov	r4, r2
 800591e:	f803 5b01 	strb.w	r5, [r3], #1
 8005922:	079a      	lsls	r2, r3, #30
 8005924:	d1f7      	bne.n	8005916 <memset+0x12>
 8005926:	2c03      	cmp	r4, #3
 8005928:	d92a      	bls.n	8005980 <memset+0x7c>
 800592a:	b2cd      	uxtb	r5, r1
 800592c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8005930:	2c0f      	cmp	r4, #15
 8005932:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8005936:	d915      	bls.n	8005964 <memset+0x60>
 8005938:	f1a4 0710 	sub.w	r7, r4, #16
 800593c:	093f      	lsrs	r7, r7, #4
 800593e:	f103 0610 	add.w	r6, r3, #16
 8005942:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8005946:	461a      	mov	r2, r3
 8005948:	6015      	str	r5, [r2, #0]
 800594a:	6055      	str	r5, [r2, #4]
 800594c:	6095      	str	r5, [r2, #8]
 800594e:	60d5      	str	r5, [r2, #12]
 8005950:	3210      	adds	r2, #16
 8005952:	42b2      	cmp	r2, r6
 8005954:	d1f8      	bne.n	8005948 <memset+0x44>
 8005956:	f004 040f 	and.w	r4, r4, #15
 800595a:	3701      	adds	r7, #1
 800595c:	2c03      	cmp	r4, #3
 800595e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8005962:	d90d      	bls.n	8005980 <memset+0x7c>
 8005964:	461e      	mov	r6, r3
 8005966:	4622      	mov	r2, r4
 8005968:	3a04      	subs	r2, #4
 800596a:	2a03      	cmp	r2, #3
 800596c:	f846 5b04 	str.w	r5, [r6], #4
 8005970:	d8fa      	bhi.n	8005968 <memset+0x64>
 8005972:	1f22      	subs	r2, r4, #4
 8005974:	f022 0203 	bic.w	r2, r2, #3
 8005978:	3204      	adds	r2, #4
 800597a:	4413      	add	r3, r2
 800597c:	f004 0403 	and.w	r4, r4, #3
 8005980:	b12c      	cbz	r4, 800598e <memset+0x8a>
 8005982:	b2c9      	uxtb	r1, r1
 8005984:	441c      	add	r4, r3
 8005986:	f803 1b01 	strb.w	r1, [r3], #1
 800598a:	42a3      	cmp	r3, r4
 800598c:	d1fb      	bne.n	8005986 <memset+0x82>
 800598e:	bcf0      	pop	{r4, r5, r6, r7}
 8005990:	4770      	bx	lr
 8005992:	4614      	mov	r4, r2
 8005994:	4603      	mov	r3, r0
 8005996:	e7c6      	b.n	8005926 <memset+0x22>

08005998 <strncmp>:
 8005998:	b430      	push	{r4, r5}
 800599a:	2a00      	cmp	r2, #0
 800599c:	d04a      	beq.n	8005a34 <strncmp+0x9c>
 800599e:	ea40 0301 	orr.w	r3, r0, r1
 80059a2:	f013 0303 	ands.w	r3, r3, #3
 80059a6:	d12d      	bne.n	8005a04 <strncmp+0x6c>
 80059a8:	2a03      	cmp	r2, #3
 80059aa:	d92b      	bls.n	8005a04 <strncmp+0x6c>
 80059ac:	6804      	ldr	r4, [r0, #0]
 80059ae:	680d      	ldr	r5, [r1, #0]
 80059b0:	42ac      	cmp	r4, r5
 80059b2:	d127      	bne.n	8005a04 <strncmp+0x6c>
 80059b4:	3a04      	subs	r2, #4
 80059b6:	d03d      	beq.n	8005a34 <strncmp+0x9c>
 80059b8:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 80059bc:	ea25 0404 	bic.w	r4, r5, r4
 80059c0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 80059c4:	d13c      	bne.n	8005a40 <strncmp+0xa8>
 80059c6:	460c      	mov	r4, r1
 80059c8:	4603      	mov	r3, r0
 80059ca:	e00e      	b.n	80059ea <strncmp+0x52>
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	6864      	ldr	r4, [r4, #4]
 80059d0:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 80059d4:	42a3      	cmp	r3, r4
 80059d6:	ea25 0503 	bic.w	r5, r5, r3
 80059da:	d113      	bne.n	8005a04 <strncmp+0x6c>
 80059dc:	3a04      	subs	r2, #4
 80059de:	d029      	beq.n	8005a34 <strncmp+0x9c>
 80059e0:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 80059e4:	d129      	bne.n	8005a3a <strncmp+0xa2>
 80059e6:	4603      	mov	r3, r0
 80059e8:	460c      	mov	r4, r1
 80059ea:	2a03      	cmp	r2, #3
 80059ec:	f100 0004 	add.w	r0, r0, #4
 80059f0:	f101 0104 	add.w	r1, r1, #4
 80059f4:	d8ea      	bhi.n	80059cc <strncmp+0x34>
 80059f6:	1e55      	subs	r5, r2, #1
 80059f8:	b92a      	cbnz	r2, 8005a06 <strncmp+0x6e>
 80059fa:	7918      	ldrb	r0, [r3, #4]
 80059fc:	7922      	ldrb	r2, [r4, #4]
 80059fe:	1a80      	subs	r0, r0, r2
 8005a00:	bc30      	pop	{r4, r5}
 8005a02:	4770      	bx	lr
 8005a04:	1e55      	subs	r5, r2, #1
 8005a06:	7803      	ldrb	r3, [r0, #0]
 8005a08:	780a      	ldrb	r2, [r1, #0]
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d11a      	bne.n	8005a44 <strncmp+0xac>
 8005a0e:	b1dd      	cbz	r5, 8005a48 <strncmp+0xb0>
 8005a10:	b1b3      	cbz	r3, 8005a40 <strncmp+0xa8>
 8005a12:	1c6c      	adds	r4, r5, #1
 8005a14:	440c      	add	r4, r1
 8005a16:	1c8b      	adds	r3, r1, #2
 8005a18:	4601      	mov	r1, r0
 8005a1a:	e004      	b.n	8005a26 <strncmp+0x8e>
 8005a1c:	42a3      	cmp	r3, r4
 8005a1e:	d00c      	beq.n	8005a3a <strncmp+0xa2>
 8005a20:	3301      	adds	r3, #1
 8005a22:	2800      	cmp	r0, #0
 8005a24:	d0ec      	beq.n	8005a00 <strncmp+0x68>
 8005a26:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005a2a:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8005a2e:	4290      	cmp	r0, r2
 8005a30:	d0f4      	beq.n	8005a1c <strncmp+0x84>
 8005a32:	e7e4      	b.n	80059fe <strncmp+0x66>
 8005a34:	4610      	mov	r0, r2
 8005a36:	bc30      	pop	{r4, r5}
 8005a38:	4770      	bx	lr
 8005a3a:	2000      	movs	r0, #0
 8005a3c:	bc30      	pop	{r4, r5}
 8005a3e:	4770      	bx	lr
 8005a40:	4618      	mov	r0, r3
 8005a42:	e7dd      	b.n	8005a00 <strncmp+0x68>
 8005a44:	4618      	mov	r0, r3
 8005a46:	e7da      	b.n	80059fe <strncmp+0x66>
 8005a48:	4628      	mov	r0, r5
 8005a4a:	e7d9      	b.n	8005a00 <strncmp+0x68>

08005a4c <register_fini>:
 8005a4c:	4b02      	ldr	r3, [pc, #8]	; (8005a58 <register_fini+0xc>)
 8005a4e:	b113      	cbz	r3, 8005a56 <register_fini+0xa>
 8005a50:	4802      	ldr	r0, [pc, #8]	; (8005a5c <register_fini+0x10>)
 8005a52:	f000 b805 	b.w	8005a60 <atexit>
 8005a56:	4770      	bx	lr
 8005a58:	00000000 	.word	0x00000000
 8005a5c:	08005a6d 	.word	0x08005a6d

08005a60 <atexit>:
 8005a60:	4601      	mov	r1, r0
 8005a62:	2000      	movs	r0, #0
 8005a64:	4602      	mov	r2, r0
 8005a66:	4603      	mov	r3, r0
 8005a68:	f000 b818 	b.w	8005a9c <__register_exitproc>

08005a6c <__libc_fini_array>:
 8005a6c:	b538      	push	{r3, r4, r5, lr}
 8005a6e:	4d09      	ldr	r5, [pc, #36]	; (8005a94 <__libc_fini_array+0x28>)
 8005a70:	4c09      	ldr	r4, [pc, #36]	; (8005a98 <__libc_fini_array+0x2c>)
 8005a72:	1b64      	subs	r4, r4, r5
 8005a74:	10a4      	asrs	r4, r4, #2
 8005a76:	bf18      	it	ne
 8005a78:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
 8005a7c:	d005      	beq.n	8005a8a <__libc_fini_array+0x1e>
 8005a7e:	3c01      	subs	r4, #1
 8005a80:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005a84:	4798      	blx	r3
 8005a86:	2c00      	cmp	r4, #0
 8005a88:	d1f9      	bne.n	8005a7e <__libc_fini_array+0x12>
 8005a8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a8e:	f000 b9bf 	b.w	8005e10 <_fini>
 8005a92:	bf00      	nop
 8005a94:	08005e24 	.word	0x08005e24
 8005a98:	08005e28 	.word	0x08005e28

08005a9c <__register_exitproc>:
 8005a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a9e:	4c27      	ldr	r4, [pc, #156]	; (8005b3c <__register_exitproc+0xa0>)
 8005aa0:	6826      	ldr	r6, [r4, #0]
 8005aa2:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	4607      	mov	r7, r0
 8005aaa:	2c00      	cmp	r4, #0
 8005aac:	d041      	beq.n	8005b32 <__register_exitproc+0x96>
 8005aae:	6865      	ldr	r5, [r4, #4]
 8005ab0:	2d1f      	cmp	r5, #31
 8005ab2:	dd1e      	ble.n	8005af2 <__register_exitproc+0x56>
 8005ab4:	4822      	ldr	r0, [pc, #136]	; (8005b40 <__register_exitproc+0xa4>)
 8005ab6:	b918      	cbnz	r0, 8005ac0 <__register_exitproc+0x24>
 8005ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005abc:	b005      	add	sp, #20
 8005abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ac0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8005ac4:	9103      	str	r1, [sp, #12]
 8005ac6:	9202      	str	r2, [sp, #8]
 8005ac8:	9301      	str	r3, [sp, #4]
 8005aca:	f3af 8000 	nop.w
 8005ace:	9903      	ldr	r1, [sp, #12]
 8005ad0:	9a02      	ldr	r2, [sp, #8]
 8005ad2:	9b01      	ldr	r3, [sp, #4]
 8005ad4:	4604      	mov	r4, r0
 8005ad6:	2800      	cmp	r0, #0
 8005ad8:	d0ee      	beq.n	8005ab8 <__register_exitproc+0x1c>
 8005ada:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
 8005ade:	6025      	str	r5, [r4, #0]
 8005ae0:	2000      	movs	r0, #0
 8005ae2:	6060      	str	r0, [r4, #4]
 8005ae4:	4605      	mov	r5, r0
 8005ae6:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 8005aea:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
 8005aee:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
 8005af2:	b93f      	cbnz	r7, 8005b04 <__register_exitproc+0x68>
 8005af4:	1cab      	adds	r3, r5, #2
 8005af6:	2000      	movs	r0, #0
 8005af8:	3501      	adds	r5, #1
 8005afa:	6065      	str	r5, [r4, #4]
 8005afc:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8005b00:	b005      	add	sp, #20
 8005b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b04:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 8005b08:	f04f 0c01 	mov.w	ip, #1
 8005b0c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 8005b10:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 8005b14:	fa0c f205 	lsl.w	r2, ip, r5
 8005b18:	4316      	orrs	r6, r2
 8005b1a:	2f02      	cmp	r7, #2
 8005b1c:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 8005b20:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8005b24:	d1e6      	bne.n	8005af4 <__register_exitproc+0x58>
 8005b26:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8005b30:	e7e0      	b.n	8005af4 <__register_exitproc+0x58>
 8005b32:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
 8005b36:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 8005b3a:	e7b8      	b.n	8005aae <__register_exitproc+0x12>
 8005b3c:	08005e00 	.word	0x08005e00
 8005b40:	00000000 	.word	0x00000000
 8005b44:	4d544553 	.word	0x4d544553
 8005b48:	00004341 	.word	0x00004341
 8005b4c:	74697571 	.word	0x74697571
 8005b50:	00000000 	.word	0x00000000
 8005b54:	0a657942 	.word	0x0a657942
 8005b58:	00000000 	.word	0x00000000
 8005b5c:	ccbbaadd 	.word	0xccbbaadd
 8005b60:	00002211 	.word	0x00002211
 8005b64:	0800a8c0 	.word	0x0800a8c0
 8005b68:	00ffffff 	.word	0x00ffffff
 8005b6c:	0100a8c0 	.word	0x0100a8c0
 8005b70:	31676552 	.word	0x31676552
 8005b74:	00000000 	.word	0x00000000
 8005b78:	32676552 	.word	0x32676552
 8005b7c:	00000000 	.word	0x00000000
 8005b80:	546e7442 	.word	0x546e7442
 8005b84:	00747365 	.word	0x00747365
 8005b88:	63656843 	.word	0x63656843
 8005b8c:	6d69546b 	.word	0x6d69546b
 8005b90:	00007265 	.word	0x00007265
 8005b94:	454c4449 	.word	0x454c4449
 8005b98:	00000000 	.word	0x00000000
 8005b9c:	20726d54 	.word	0x20726d54
 8005ba0:	00637653 	.word	0x00637653
 8005ba4:	2f707041 	.word	0x2f707041
 8005ba8:	334d5453 	.word	0x334d5453
 8005bac:	2d344632 	.word	0x2d344632
 8005bb0:	63736944 	.word	0x63736944
 8005bb4:	7265766f 	.word	0x7265766f
 8005bb8:	694c2f79 	.word	0x694c2f79
 8005bbc:	72617262 	.word	0x72617262
 8005bc0:	2f736569 	.word	0x2f736569
 8005bc4:	334d5453 	.word	0x334d5453
 8005bc8:	78344632 	.word	0x78344632
 8005bcc:	74535f78 	.word	0x74535f78
 8005bd0:	72655064 	.word	0x72655064
 8005bd4:	5f687069 	.word	0x5f687069
 8005bd8:	76697244 	.word	0x76697244
 8005bdc:	732f7265 	.word	0x732f7265
 8005be0:	6d2f6372 	.word	0x6d2f6372
 8005be4:	2e637369 	.word	0x2e637369
 8005be8:	00000063 	.word	0x00000063
 8005bec:	2f707041 	.word	0x2f707041
 8005bf0:	334d5453 	.word	0x334d5453
 8005bf4:	2d344632 	.word	0x2d344632
 8005bf8:	63736944 	.word	0x63736944
 8005bfc:	7265766f 	.word	0x7265766f
 8005c00:	694c2f79 	.word	0x694c2f79
 8005c04:	72617262 	.word	0x72617262
 8005c08:	2f736569 	.word	0x2f736569
 8005c0c:	334d5453 	.word	0x334d5453
 8005c10:	78344632 	.word	0x78344632
 8005c14:	74535f78 	.word	0x74535f78
 8005c18:	72655064 	.word	0x72655064
 8005c1c:	5f687069 	.word	0x5f687069
 8005c20:	76697244 	.word	0x76697244
 8005c24:	732f7265 	.word	0x732f7265
 8005c28:	732f6372 	.word	0x732f6372
 8005c2c:	32336d74 	.word	0x32336d74
 8005c30:	78783466 	.word	0x78783466
 8005c34:	616d645f 	.word	0x616d645f
 8005c38:	0000632e 	.word	0x0000632e
 8005c3c:	2f707041 	.word	0x2f707041
 8005c40:	334d5453 	.word	0x334d5453
 8005c44:	2d344632 	.word	0x2d344632
 8005c48:	63736944 	.word	0x63736944
 8005c4c:	7265766f 	.word	0x7265766f
 8005c50:	694c2f79 	.word	0x694c2f79
 8005c54:	72617262 	.word	0x72617262
 8005c58:	2f736569 	.word	0x2f736569
 8005c5c:	334d5453 	.word	0x334d5453
 8005c60:	78344632 	.word	0x78344632
 8005c64:	74535f78 	.word	0x74535f78
 8005c68:	72655064 	.word	0x72655064
 8005c6c:	5f687069 	.word	0x5f687069
 8005c70:	76697244 	.word	0x76697244
 8005c74:	732f7265 	.word	0x732f7265
 8005c78:	732f6372 	.word	0x732f6372
 8005c7c:	32336d74 	.word	0x32336d74
 8005c80:	78783466 	.word	0x78783466
 8005c84:	7478655f 	.word	0x7478655f
 8005c88:	00632e69 	.word	0x00632e69
 8005c8c:	2f707041 	.word	0x2f707041
 8005c90:	334d5453 	.word	0x334d5453
 8005c94:	2d344632 	.word	0x2d344632
 8005c98:	63736944 	.word	0x63736944
 8005c9c:	7265766f 	.word	0x7265766f
 8005ca0:	694c2f79 	.word	0x694c2f79
 8005ca4:	72617262 	.word	0x72617262
 8005ca8:	2f736569 	.word	0x2f736569
 8005cac:	334d5453 	.word	0x334d5453
 8005cb0:	78344632 	.word	0x78344632
 8005cb4:	74535f78 	.word	0x74535f78
 8005cb8:	72655064 	.word	0x72655064
 8005cbc:	5f687069 	.word	0x5f687069
 8005cc0:	76697244 	.word	0x76697244
 8005cc4:	732f7265 	.word	0x732f7265
 8005cc8:	732f6372 	.word	0x732f6372
 8005ccc:	32336d74 	.word	0x32336d74
 8005cd0:	78783466 	.word	0x78783466
 8005cd4:	6970675f 	.word	0x6970675f
 8005cd8:	00632e6f 	.word	0x00632e6f
 8005cdc:	2f707041 	.word	0x2f707041
 8005ce0:	334d5453 	.word	0x334d5453
 8005ce4:	2d344632 	.word	0x2d344632
 8005ce8:	63736944 	.word	0x63736944
 8005cec:	7265766f 	.word	0x7265766f
 8005cf0:	694c2f79 	.word	0x694c2f79
 8005cf4:	72617262 	.word	0x72617262
 8005cf8:	2f736569 	.word	0x2f736569
 8005cfc:	334d5453 	.word	0x334d5453
 8005d00:	78344632 	.word	0x78344632
 8005d04:	74535f78 	.word	0x74535f78
 8005d08:	72655064 	.word	0x72655064
 8005d0c:	5f687069 	.word	0x5f687069
 8005d10:	76697244 	.word	0x76697244
 8005d14:	732f7265 	.word	0x732f7265
 8005d18:	732f6372 	.word	0x732f6372
 8005d1c:	32336d74 	.word	0x32336d74
 8005d20:	78783466 	.word	0x78783466
 8005d24:	6363725f 	.word	0x6363725f
 8005d28:	0000632e 	.word	0x0000632e
 8005d2c:	2f707041 	.word	0x2f707041
 8005d30:	334d5453 	.word	0x334d5453
 8005d34:	2d344632 	.word	0x2d344632
 8005d38:	63736944 	.word	0x63736944
 8005d3c:	7265766f 	.word	0x7265766f
 8005d40:	694c2f79 	.word	0x694c2f79
 8005d44:	72617262 	.word	0x72617262
 8005d48:	2f736569 	.word	0x2f736569
 8005d4c:	334d5453 	.word	0x334d5453
 8005d50:	78344632 	.word	0x78344632
 8005d54:	74535f78 	.word	0x74535f78
 8005d58:	72655064 	.word	0x72655064
 8005d5c:	5f687069 	.word	0x5f687069
 8005d60:	76697244 	.word	0x76697244
 8005d64:	732f7265 	.word	0x732f7265
 8005d68:	732f6372 	.word	0x732f6372
 8005d6c:	32336d74 	.word	0x32336d74
 8005d70:	78783466 	.word	0x78783466
 8005d74:	6970735f 	.word	0x6970735f
 8005d78:	0000632e 	.word	0x0000632e
 8005d7c:	2f707041 	.word	0x2f707041
 8005d80:	334d5453 	.word	0x334d5453
 8005d84:	2d344632 	.word	0x2d344632
 8005d88:	63736944 	.word	0x63736944
 8005d8c:	7265766f 	.word	0x7265766f
 8005d90:	694c2f79 	.word	0x694c2f79
 8005d94:	72617262 	.word	0x72617262
 8005d98:	2f736569 	.word	0x2f736569
 8005d9c:	334d5453 	.word	0x334d5453
 8005da0:	78344632 	.word	0x78344632
 8005da4:	74535f78 	.word	0x74535f78
 8005da8:	72655064 	.word	0x72655064
 8005dac:	5f687069 	.word	0x5f687069
 8005db0:	76697244 	.word	0x76697244
 8005db4:	732f7265 	.word	0x732f7265
 8005db8:	732f6372 	.word	0x732f6372
 8005dbc:	32336d74 	.word	0x32336d74
 8005dc0:	78783466 	.word	0x78783466
 8005dc4:	7379735f 	.word	0x7379735f
 8005dc8:	2e676663 	.word	0x2e676663
 8005dcc:	00000063 	.word	0x00000063

08005dd0 <ucExpectedStackBytes.8478>:
 8005dd0:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
 8005de0:	a5a5a5a5                                ....

08005de4 <GPIO_PIN>:
 8005de4:	20001000 80004000                       ... .@..

08005dec <GPIO_CLK>:
 8005dec:	00000008 00000008 00000008 00000008     ................
 8005dfc:	00000043                                C...

08005e00 <_global_impure_ptr>:
 8005e00:	20000020                                 .. 

08005e04 <_init>:
 8005e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e06:	bf00      	nop
 8005e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e0a:	bc08      	pop	{r3}
 8005e0c:	469e      	mov	lr, r3
 8005e0e:	4770      	bx	lr

08005e10 <_fini>:
 8005e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e12:	bf00      	nop
 8005e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e16:	bc08      	pop	{r3}
 8005e18:	469e      	mov	lr, r3
 8005e1a:	4770      	bx	lr
